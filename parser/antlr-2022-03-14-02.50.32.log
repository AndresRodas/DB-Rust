2022-03-14 02:50:31:398 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns string hi) (BLOCK (ALT declaration PYC {$hi = "declaration"}) (ALT function {$hi = "function"}) (ALT module {$hi = "module"}))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ instructions LLAVEDER { $mainInst = $instructions.insts }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                               newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                               $arrayType.t.Add(newType)
                                               $t = $arrayType.t
                                            }) (ALT CORIZQ types PYC expression CORDER {
                                        $t = arrayList.New()
                                        newType := environment.NewArrayType($types.ty, $expression.p)
                                        $t.Add(newType)
                                     }))) (RULE function (returns ) (BLOCK (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ instructions LLAVEDER))) (RULE module (returns ) (BLOCK (ALT MODULE ID LLAVEIZQ LLAVEDER))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT VECTOR { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR))) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT primitive { $p = $primitive.p }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.INTEGER)
            }
        }) (ALT STRING {
                str := $STRING.text
                $p = expressions.NewPrimitive(0,0,str[1:len(str)-1],environment.STRING)
            })))))
2022-03-14 02:50:31:416 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns string hi) (BLOCK (ALT declaration PYC {$hi = "declaration"}) (ALT function {$hi = "function"}) (ALT module {$hi = "module"}))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ instructions LLAVEDER { $mainInst = $instructions.insts }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                               newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                               $arrayType.t.Add(newType)
                                               $t = $arrayType.t
                                            }) (ALT CORIZQ types PYC expression CORDER {
                                        $t = arrayList.New()
                                        newType := environment.NewArrayType($types.ty, $expression.p)
                                        $t.Add(newType)
                                     }))) (RULE function (returns ) (BLOCK (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ instructions LLAVEDER))) (RULE module (returns ) (BLOCK (ALT MODULE ID LLAVEIZQ LLAVEDER))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT VECTOR { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (SET MUL DIV)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR)) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT primitive { $p = $primitive.p }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.INTEGER)
            }
        }) (ALT STRING {
                str := $STRING.text
                $p = expressions.NewPrimitive(0,0,str[1:len(str)-1],environment.STRING)
            })))))
2022-03-14 02:50:31:602 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=413> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=405> expression<tokenIndex=407>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-03-14 02:50:31:607 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 413))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 405))) (expression (ELEMENT_OPTIONS (= tokenIndex 407))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-03-14 02:50:31:668 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} CORIZQ<tokenIndex=503> listParams<tokenIndex=505> CORDER<tokenIndex=507> { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | PARIZQ<tokenIndex=513> expression<tokenIndex=515> PARDER<tokenIndex=517> { $p = $expression.p } 
        | primitive<tokenIndex=523> { $p = $primitive.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> op=(MUL<tokenIndex=446>|DIV<tokenIndex=448>) opDe=expr_arit<tokenIndex=453,p=7> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> op=(ADD<tokenIndex=466>|SUB<tokenIndex=468>) opDe=expr_arit<tokenIndex=473,p=6> {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=(MENOR<tokenIndex=486>|MENORIGUAL<tokenIndex=488>|MAYORIGUAL<tokenIndex=490>|MAYOR<tokenIndex=492>) opDe=expr_arit<tokenIndex=497,p=5> {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}
        )*
    ;
2022-03-14 02:50:31:672 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 503))) (listParams (ELEMENT_OPTIONS (= tokenIndex 505))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 507))) { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 513))) (expression (ELEMENT_OPTIONS (= tokenIndex 515))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 517))) { $p = $expression.p }) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 523))) { $p = $primitive.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 446))) (DIV (ELEMENT_OPTIONS (= tokenIndex 448))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 453) (= p 7)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 466))) (SUB (ELEMENT_OPTIONS (= tokenIndex 468))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 473) (= p 6)))) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 486))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 488))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 490))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 492))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 497) (= p 5)))) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}))))))
2022-03-14 02:50:31:683 grammar LogManager.java:25 import INT=1
2022-03-14 02:50:31:683 grammar LogManager.java:25 import FLOAT=2
2022-03-14 02:50:31:683 grammar LogManager.java:25 import BOOL=3
2022-03-14 02:50:31:683 grammar LogManager.java:25 import CHAR=4
2022-03-14 02:50:31:683 grammar LogManager.java:25 import STR1=5
2022-03-14 02:50:31:683 grammar LogManager.java:25 import STR2=6
2022-03-14 02:50:31:683 grammar LogManager.java:25 import USIZE=7
2022-03-14 02:50:31:683 grammar LogManager.java:25 import VECTOR=8
2022-03-14 02:50:31:683 grammar LogManager.java:25 import STRUCT=9
2022-03-14 02:50:31:683 grammar LogManager.java:25 import POW=10
2022-03-14 02:50:31:683 grammar LogManager.java:25 import PRINT=11
2022-03-14 02:50:31:683 grammar LogManager.java:25 import LET=12
2022-03-14 02:50:31:683 grammar LogManager.java:25 import MUT=13
2022-03-14 02:50:31:683 grammar LogManager.java:25 import FUNC=14
2022-03-14 02:50:31:683 grammar LogManager.java:25 import ARROW1=15
2022-03-14 02:50:31:683 grammar LogManager.java:25 import ARROW2=16
2022-03-14 02:50:31:683 grammar LogManager.java:25 import ABS=17
2022-03-14 02:50:31:683 grammar LogManager.java:25 import SQRT=18
2022-03-14 02:50:31:683 grammar LogManager.java:25 import TOSTR=19
2022-03-14 02:50:31:683 grammar LogManager.java:25 import CLONE=20
2022-03-14 02:50:31:683 grammar LogManager.java:25 import NEW=21
2022-03-14 02:50:31:683 grammar LogManager.java:25 import LEN=22
2022-03-14 02:50:31:683 grammar LogManager.java:25 import PUSH=23
2022-03-14 02:50:31:683 grammar LogManager.java:25 import REMOVE=24
2022-03-14 02:50:31:683 grammar LogManager.java:25 import CONTAINS=25
2022-03-14 02:50:31:683 grammar LogManager.java:25 import INSERT=26
2022-03-14 02:50:31:683 grammar LogManager.java:25 import CAPACITY=27
2022-03-14 02:50:31:683 grammar LogManager.java:25 import WCAPACITY=28
2022-03-14 02:50:31:683 grammar LogManager.java:25 import MAIN=29
2022-03-14 02:50:31:683 grammar LogManager.java:25 import IF=30
2022-03-14 02:50:31:683 grammar LogManager.java:25 import MATCH=31
2022-03-14 02:50:31:683 grammar LogManager.java:25 import LOOP=32
2022-03-14 02:50:31:683 grammar LogManager.java:25 import WHILE=33
2022-03-14 02:50:31:683 grammar LogManager.java:25 import FOR=34
2022-03-14 02:50:31:683 grammar LogManager.java:25 import IN=35
2022-03-14 02:50:31:684 grammar LogManager.java:25 import BREAK=36
2022-03-14 02:50:31:684 grammar LogManager.java:25 import CONTINUE=37
2022-03-14 02:50:31:684 grammar LogManager.java:25 import RETURN=38
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MODULE=39
2022-03-14 02:50:31:684 grammar LogManager.java:25 import PUB=40
2022-03-14 02:50:31:684 grammar LogManager.java:25 import NUMBER=41
2022-03-14 02:50:31:684 grammar LogManager.java:25 import STRING=42
2022-03-14 02:50:31:684 grammar LogManager.java:25 import ID=43
2022-03-14 02:50:31:684 grammar LogManager.java:25 import PUNTO=44
2022-03-14 02:50:31:684 grammar LogManager.java:25 import C_PTS=45
2022-03-14 02:50:31:684 grammar LogManager.java:25 import D_PTS=46
2022-03-14 02:50:31:684 grammar LogManager.java:25 import PYC=47
2022-03-14 02:50:31:684 grammar LogManager.java:25 import COMA=48
2022-03-14 02:50:31:684 grammar LogManager.java:25 import DIFERENTE=49
2022-03-14 02:50:31:684 grammar LogManager.java:25 import IG_IG=50
2022-03-14 02:50:31:684 grammar LogManager.java:25 import NOT=51
2022-03-14 02:50:31:684 grammar LogManager.java:25 import OR=52
2022-03-14 02:50:31:684 grammar LogManager.java:25 import AND=53
2022-03-14 02:50:31:684 grammar LogManager.java:25 import IGUAL=54
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MAYORIGUAL=55
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MENORIGUAL=56
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MAYOR=57
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MENOR=58
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MUL=59
2022-03-14 02:50:31:684 grammar LogManager.java:25 import DIV=60
2022-03-14 02:50:31:684 grammar LogManager.java:25 import ADD=61
2022-03-14 02:50:31:684 grammar LogManager.java:25 import SUB=62
2022-03-14 02:50:31:684 grammar LogManager.java:25 import MOD=63
2022-03-14 02:50:31:684 grammar LogManager.java:25 import PARIZQ=64
2022-03-14 02:50:31:684 grammar LogManager.java:25 import PARDER=65
2022-03-14 02:50:31:684 grammar LogManager.java:25 import LLAVEIZQ=66
2022-03-14 02:50:31:684 grammar LogManager.java:25 import LLAVEDER=67
2022-03-14 02:50:31:684 grammar LogManager.java:25 import CORIZQ=68
2022-03-14 02:50:31:684 grammar LogManager.java:25 import CORDER=69
2022-03-14 02:50:31:684 grammar LogManager.java:25 import WHITESPACE=70
2022-03-14 02:50:31:684 grammar LogManager.java:25 import COMMENT=71
2022-03-14 02:50:31:684 grammar LogManager.java:25 import LINE_COMMENT=72
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'i64'=1
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'f64'=2
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'bool'=3
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'char'=4
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'String'=5
2022-03-14 02:50:31:684 grammar LogManager.java:25 import '&str'=6
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'usize'=7
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'vec'=8
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'struct'=9
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'pow'=10
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'println!'=11
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'let'=12
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'mut'=13
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'fn'=14
2022-03-14 02:50:31:684 grammar LogManager.java:25 import '->'=15
2022-03-14 02:50:31:684 grammar LogManager.java:25 import '=>'=16
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'abs'=17
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'sqrt'=18
2022-03-14 02:50:31:684 grammar LogManager.java:25 import 'to_string'=19
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'clone'=20
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'new'=21
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'len'=22
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'push'=23
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'remove'=24
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'contains'=25
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'insert'=26
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'capacity'=27
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'with_capacity'=28
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'main'=29
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'if'=30
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'match'=31
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'loop'=32
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'while'=33
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'for'=34
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'in'=35
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'break'=36
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'continue'=37
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'return'=38
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'mod'=39
2022-03-14 02:50:31:685 grammar LogManager.java:25 import 'pub'=40
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '.'=44
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '::'=45
2022-03-14 02:50:31:685 grammar LogManager.java:25 import ':'=46
2022-03-14 02:50:31:685 grammar LogManager.java:25 import ';'=47
2022-03-14 02:50:31:685 grammar LogManager.java:25 import ','=48
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '!='=49
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '=='=50
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '!'=51
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '||'=52
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '&&'=53
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '='=54
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '>='=55
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '<='=56
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '>'=57
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '<'=58
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '*'=59
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '/'=60
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '+'=61
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '-'=62
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '%'=63
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '('=64
2022-03-14 02:50:31:685 grammar LogManager.java:25 import ')'=65
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '{'=66
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '}'=67
2022-03-14 02:50:31:685 grammar LogManager.java:25 import '['=68
2022-03-14 02:50:31:685 grammar LogManager.java:25 import ']'=69
2022-03-14 02:50:31:686 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR=8, STRUCT=9, POW=10, PRINT=11, LET=12, MUT=13, FUNC=14, ARROW1=15, ARROW2=16, ABS=17, SQRT=18, TOSTR=19, CLONE=20, NEW=21, LEN=22, PUSH=23, REMOVE=24, CONTAINS=25, INSERT=26, CAPACITY=27, WCAPACITY=28, MAIN=29, IF=30, MATCH=31, LOOP=32, WHILE=33, FOR=34, IN=35, BREAK=36, CONTINUE=37, RETURN=38, MODULE=39, PUB=40, NUMBER=41, STRING=42, ID=43, PUNTO=44, C_PTS=45, D_PTS=46, PYC=47, COMA=48, DIFERENTE=49, IG_IG=50, NOT=51, OR=52, AND=53, IGUAL=54, MAYORIGUAL=55, MENORIGUAL=56, MAYOR=57, MENOR=58, MUL=59, DIV=60, ADD=61, SUB=62, MOD=63, PARIZQ=64, PARDER=65, LLAVEIZQ=66, LLAVEDER=67, CORIZQ=68, CORDER=69, WHITESPACE=70, COMMENT=71, LINE_COMMENT=72, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'struct'=9, 'pow'=10, 'println!'=11, 'let'=12, 'mut'=13, 'fn'=14, '->'=15, '=>'=16, 'abs'=17, 'sqrt'=18, 'to_string'=19, 'clone'=20, 'new'=21, 'len'=22, 'push'=23, 'remove'=24, 'contains'=25, 'insert'=26, 'capacity'=27, 'with_capacity'=28, 'main'=29, 'if'=30, 'match'=31, 'loop'=32, 'while'=33, 'for'=34, 'in'=35, 'break'=36, 'continue'=37, 'return'=38, 'mod'=39, 'pub'=40, '.'=44, '::'=45, ':'=46, ';'=47, ','=48, '!='=49, '=='=50, '!'=51, '||'=52, '&&'=53, '='=54, '>='=55, '<='=56, '>'=57, '<'=58, '*'=59, '/'=60, '+'=61, '-'=62, '%'=63, '('=64, ')'=65, '{'=66, '}'=67, '['=68, ']'=69}
2022-03-14 02:50:31:686 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR=8, STRUCT=9, POW=10, PRINT=11, LET=12, MUT=13, FUNC=14, ARROW1=15, ARROW2=16, ABS=17, SQRT=18, TOSTR=19, CLONE=20, NEW=21, LEN=22, PUSH=23, REMOVE=24, CONTAINS=25, INSERT=26, CAPACITY=27, WCAPACITY=28, MAIN=29, IF=30, MATCH=31, LOOP=32, WHILE=33, FOR=34, IN=35, BREAK=36, CONTINUE=37, RETURN=38, MODULE=39, PUB=40, NUMBER=41, STRING=42, ID=43, PUNTO=44, C_PTS=45, D_PTS=46, PYC=47, COMA=48, DIFERENTE=49, IG_IG=50, NOT=51, OR=52, AND=53, IGUAL=54, MAYORIGUAL=55, MENORIGUAL=56, MAYOR=57, MENOR=58, MUL=59, DIV=60, ADD=61, SUB=62, MOD=63, PARIZQ=64, PARDER=65, LLAVEIZQ=66, LLAVEDER=67, CORIZQ=68, CORDER=69, WHITESPACE=70, COMMENT=71, LINE_COMMENT=72}
2022-03-14 02:50:31:686 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'struct'=9, 'pow'=10, 'println!'=11, 'let'=12, 'mut'=13, 'fn'=14, '->'=15, '=>'=16, 'abs'=17, 'sqrt'=18, 'to_string'=19, 'clone'=20, 'new'=21, 'len'=22, 'push'=23, 'remove'=24, 'contains'=25, 'insert'=26, 'capacity'=27, 'with_capacity'=28, 'main'=29, 'if'=30, 'match'=31, 'loop'=32, 'while'=33, 'for'=34, 'in'=35, 'break'=36, 'continue'=37, 'return'=38, 'mod'=39, 'pub'=40, '.'=44, '::'=45, ':'=46, ';'=47, ','=48, '!='=49, '=='=50, '!'=51, '||'=52, '&&'=53, '='=54, '>='=55, '<='=56, '>'=57, '<'=58, '*'=59, '/'=60, '+'=61, '-'=62, '%'=63, '('=64, ')'=65, '{'=66, '}'=67, '['=68, ']'=69}
2022-03-14 02:50:31:723 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-03-14 02:50:31:723 LL1 LogManager.java:25 look=[{12, 14, 39}, 14]
2022-03-14 02:50:31:723 LL1 LogManager.java:25 LL(1)? false
2022-03-14 02:50:31:723 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-03-14 02:50:31:723 LL1 LogManager.java:25 look=[{12, 14, 39}, <EOF>]
2022-03-14 02:50:31:723 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:723 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-03-14 02:50:31:723 LL1 LogManager.java:25 look=[12, 14, 39]
2022-03-14 02:50:31:723 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:723 LL1 LogManager.java:25 
DECISION 3 in rule instructions
2022-03-14 02:50:31:723 LL1 LogManager.java:25 look=[{11..12}, 67]
2022-03-14 02:50:31:723 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:723 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2022-03-14 02:50:31:723 LL1 LogManager.java:25 look=[11, 12]
2022-03-14 02:50:31:723 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:723 LL1 LogManager.java:25 
DECISION 5 in rule declaration
2022-03-14 02:50:31:723 LL1 LogManager.java:25 look=[12, 12, 12, 12, 12, 12]
2022-03-14 02:50:31:723 LL1 LogManager.java:25 LL(1)? false
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 6 in rule arrayType
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[68, 68]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? false
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 7 in rule types
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 8, 9]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 8 in rule listParams
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[null, {65, 69}]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? false
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 9 in rule expr_arit
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[68, 64, {41..42}]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 10 in rule expr_arit
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[null, null, null]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? false
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 11 in rule expr_arit
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[null, null]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? false
2022-03-14 02:50:31:724 LL1 LogManager.java:25 
DECISION 12 in rule primitive
2022-03-14 02:50:31:724 LL1 LogManager.java:25 look=[41, 42]
2022-03-14 02:50:31:724 LL1 LogManager.java:25 LL(1)? true
2022-03-14 02:50:31:741 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-14 02:50:31:811 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-03-14 02:50:31:811 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-03-14 02:50:31:812 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-03-14 02:50:31:813 action-translator LogManager.java:25 translate $hi = "declaration"
2022-03-14 02:50:31:813 action-translator LogManager.java:25 attr [@-1,1:2='hi',<0>,29:19]
2022-03-14 02:50:31:813 action-translator LogManager.java:25 translate $hi = "function"
2022-03-14 02:50:31:814 action-translator LogManager.java:25 attr [@-1,1:2='hi',<0>,30:12]
2022-03-14 02:50:31:814 action-translator LogManager.java:25 translate $hi = "module"
2022-03-14 02:50:31:814 action-translator LogManager.java:25 attr [@-1,1:2='hi',<0>,31:10]
2022-03-14 02:50:31:815 action-translator LogManager.java:25 translate  $mainInst = $instructions.insts 
2022-03-14 02:50:31:815 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,35:59]
2022-03-14 02:50:31:815 action-translator LogManager.java:25 qattr [@-1,14:25='instructions',<0>,35:71].[@-1,27:31='insts',<0>,35:84]
2022-03-14 02:50:31:815 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-03-14 02:50:31:815 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,40:5]
2022-03-14 02:50:31:816 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-03-14 02:50:31:816 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,46:13]
2022-03-14 02:50:31:816 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-03-14 02:50:31:816 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:19]
2022-03-14 02:50:31:816 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,52:27].[@-1,21:22='pr',<0>,52:38]
2022-03-14 02:50:31:817 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-03-14 02:50:31:817 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:20]
2022-03-14 02:50:31:817 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,53:28].[@-1,22:24='dec',<0>,53:40]
2022-03-14 02:50:31:817 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-03-14 02:50:31:817 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,57:35]
2022-03-14 02:50:31:817 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,57:63].[@-1,36:39='line',<0>,57:69]
2022-03-14 02:50:31:818 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,57:75].[@-1,48:50='pos',<0>,57:81]
2022-03-14 02:50:31:818 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,57:86].[@-1,64:64='l',<0>,57:97]
2022-03-14 02:50:31:819 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) 
2022-03-14 02:50:31:819 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,61:46]
2022-03-14 02:50:31:819 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,61:81].[@-1,41:44='line',<0>,61:85]
2022-03-14 02:50:31:819 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,61:92].[@-1,52:54='pos',<0>,61:96]
2022-03-14 02:50:31:819 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,61:102].[@-1,61:64='text',<0>,61:105]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,61:112].[@-1,74:75='ty',<0>,61:118]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,61:123].[@-1,90:90='p',<0>,61:134]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) 
2022-03-14 02:50:31:820 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,62:46]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,62:81].[@-1,41:44='line',<0>,62:85]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,62:92].[@-1,52:54='pos',<0>,62:96]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,62:102].[@-1,61:64='text',<0>,62:105]
2022-03-14 02:50:31:820 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,62:134].[@-1,101:101='p',<0>,62:145]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) 
2022-03-14 02:50:31:821 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,63:46]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,63:81].[@-1,41:44='line',<0>,63:85]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,63:92].[@-1,52:54='pos',<0>,63:96]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,63:102].[@-1,61:64='text',<0>,63:105]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,63:112].[@-1,74:75='ty',<0>,63:118]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,63:123].[@-1,90:90='p',<0>,63:134]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) 
2022-03-14 02:50:31:821 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,64:46]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,64:81].[@-1,41:44='line',<0>,64:85]
2022-03-14 02:50:31:821 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,64:92].[@-1,52:54='pos',<0>,64:96]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,64:102].[@-1,61:64='text',<0>,64:105]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,64:134].[@-1,101:101='p',<0>,64:145]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) 
2022-03-14 02:50:31:822 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,65:48]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,65:88].[@-1,46:49='line',<0>,65:92]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,65:99].[@-1,57:59='pos',<0>,65:103]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,65:109].[@-1,66:69='text',<0>,65:112]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,65:119].[@-1,83:83='t',<0>,65:129]
2022-03-14 02:50:31:822 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,65:133].[@-1,98:98='p',<0>,65:144]
2022-03-14 02:50:31:823 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) 
2022-03-14 02:50:31:823 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,66:46]
2022-03-14 02:50:31:823 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,66:86].[@-1,46:49='line',<0>,66:90]
2022-03-14 02:50:31:823 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,66:97].[@-1,57:59='pos',<0>,66:101]
2022-03-14 02:50:31:823 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,66:107].[@-1,66:69='text',<0>,66:110]
2022-03-14 02:50:31:823 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,66:117].[@-1,83:83='t',<0>,66:127]
2022-03-14 02:50:31:823 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,66:131].[@-1,98:98='p',<0>,66:142]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 translate 
                                               newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                               $arrayType.t.Add(newType)
                                               $t = $arrayType.t
                                            
2022-03-14 02:50:31:824 action-translator LogManager.java:25 qattr [@-1,105:114='expression',<0>,71:103].[@-1,116:116='p',<0>,71:114]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 qattr [@-1,168:176='arrayType',<0>,72:48].[@-1,178:178='t',<0>,72:58]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 attr [@-1,242:242='t',<0>,73:48]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 qattr [@-1,247:255='arrayType',<0>,73:53].[@-1,257:257='t',<0>,73:63]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 translate 
                                        $t = arrayList.New()
                                        newType := environment.NewArrayType($types.ty, $expression.p)
                                        $t.Add(newType)
                                     
2022-03-14 02:50:31:824 action-translator LogManager.java:25 attr [@-1,43:43='t',<0>,76:41]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 qattr [@-1,141:145='types',<0>,77:77].[@-1,147:148='ty',<0>,77:83]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 qattr [@-1,152:161='expression',<0>,77:88].[@-1,163:163='p',<0>,77:99]
2022-03-14 02:50:31:824 action-translator LogManager.java:25 attr [@-1,208:208='t',<0>,78:41]
2022-03-14 02:50:31:825 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-03-14 02:50:31:825 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,91:8]
2022-03-14 02:50:31:826 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-03-14 02:50:31:826 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,92:10]
2022-03-14 02:50:31:826 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-03-14 02:50:31:826 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,93:9]
2022-03-14 02:50:31:826 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-03-14 02:50:31:826 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,94:9]
2022-03-14 02:50:31:826 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-03-14 02:50:31:826 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,95:9]
2022-03-14 02:50:31:826 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-03-14 02:50:31:826 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,96:11]
2022-03-14 02:50:31:826 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-03-14 02:50:31:826 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,97:11]
2022-03-14 02:50:31:827 action-translator LogManager.java:25 translate 
2022-03-14 02:50:31:827 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-03-14 02:50:31:827 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-03-14 02:50:31:827 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-03-14 02:50:31:827 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-03-14 02:50:31:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-14 02:50:31:828 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-03-14 02:50:31:828 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-03-14 02:50:31:828 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-03-14 02:50:31:828 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-03-14 02:50:31:828 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-03-14 02:50:31:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-14 02:50:31:829 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-03-14 02:50:31:830 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,112:14]
2022-03-14 02:50:31:830 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,112:19].[@-1,17:17='p',<0>,112:29]
2022-03-14 02:50:31:830 action-translator LogManager.java:25 translate 
2022-03-14 02:50:31:830 action-translator LogManager.java:25 translate  $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2022-03-14 02:50:31:831 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:88]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,2:114].[@-1,35:38='line',<0>,2:121]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,2:128].[@-1,49:51='pos',<0>,2:135]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,2:141].[@-1,66:66='l',<0>,2:152]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-03-14 02:50:31:831 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,3:85]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,3:90].[@-1,18:18='p',<0>,3:101]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-03-14 02:50:31:831 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:38]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,4:43].[@-1,17:17='p',<0>,4:53]
2022-03-14 02:50:31:831 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-14 02:50:31:832 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-14 02:50:31:832 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:139]
2022-03-14 02:50:31:832 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,7:169].[@-1,36:40='start',<0>,7:174]
2022-03-14 02:50:31:832 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,7:191].[@-1,58:62='start',<0>,7:196]
2022-03-14 02:50:31:832 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,7:215].[@-1,82:82='p',<0>,7:220]
2022-03-14 02:50:31:832 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,7:223].[@-1,88:91='text',<0>,7:226]
2022-03-14 02:50:31:832 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,7:232].[@-1,99:99='p',<0>,7:237]
2022-03-14 02:50:31:832 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-14 02:50:31:832 action-translator LogManager.java:25 translate $p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)
2022-03-14 02:50:31:832 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:149]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 qattr [@-1,35:38='opIz',<0>,8:183].[@-1,40:40='p',<0>,8:188]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,8:191].[@-1,46:49='text',<0>,8:194]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,8:200].[@-1,57:57='p',<0>,8:205]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-14 02:50:31:833 action-translator LogManager.java:25 translate $p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)
2022-03-14 02:50:31:833 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,9:207]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 qattr [@-1,35:38='opIz',<0>,9:241].[@-1,40:40='p',<0>,9:246]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,9:249].[@-1,46:49='text',<0>,9:252]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,9:258].[@-1,57:57='p',<0>,9:263]
2022-03-14 02:50:31:833 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-14 02:50:31:833 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-14 02:50:31:833 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-14 02:50:31:834 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.INTEGER)
            }
        
2022-03-14 02:50:31:834 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,126:34].[@-1,43:46='text',<0>,126:41]
2022-03-14 02:50:31:834 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,127:47].[@-1,110:113='text',<0>,127:54]
2022-03-14 02:50:31:834 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,131:17]
2022-03-14 02:50:31:834 action-translator LogManager.java:25 qattr [@-1,345:350='NUMBER',<0>,133:41].[@-1,352:355='text',<0>,133:48]
2022-03-14 02:50:31:834 action-translator LogManager.java:25 attr [@-1,464:464='p',<0>,137:17]
2022-03-14 02:50:31:834 action-translator LogManager.java:25 translate 
                str := $STRING.text
                $p = expressions.NewPrimitive(0,0,str[1:len(str)-1],environment.STRING)
            
2022-03-14 02:50:31:834 action-translator LogManager.java:25 qattr [@-1,26:31='STRING',<0>,141:24].[@-1,33:36='text',<0>,141:31]
2022-03-14 02:50:31:834 action-translator LogManager.java:25 attr [@-1,56:56='p',<0>,142:17]
2022-03-14 02:50:32:053 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-14 02:50:32:053 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-14 02:50:32:157 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-14 02:50:32:157 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

