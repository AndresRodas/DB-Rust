2022-03-20 08:14:21:416 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT structCreation { $inst = $structCreation.dec }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER { $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) }))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ instructions LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        }))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         }) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        }))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {
                                $lma.ma.Add($expression.p)
                                $ma = $lma.ma
                             }) (ALT expression {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA ID D_PTS types {
                                        StrDef := environment.NewStructType($ID.text, $types.ty)
                                        $list.l.Add(StrDef);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS types {
                    StrDef := environment.NewStructType($ID.text, $types.ty)
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) }) (ALT ID listAccessArray IGUAL expression { $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) }))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
    $l = arrayList.New()
    $l.Add($ID.text)
}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                                 }) (ALT CORIZQ expression CORDER {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        }) (ALT CORIZQ types PYC expression CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE module (returns ) (BLOCK (ALT MODULE ID LLAVEIZQ LLAVEDER))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IG_IG) (ALT DIFERENTE))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFunction { $p = $callFunction.cf }) (ALT primitive { $p = $primitive.p }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT stringTypes { $p = $stringTypes.st  }) (ALT CHARACTER { $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,$CHARACTER.text,environment.CHAR) }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE stringTypes (returns interfaces.Expression st) (BLOCK (ALT STRING PUNTO (= fnc (BLOCK (ALT TOSTR) (ALT TOOWN))) {
                                     str := $STRING.text
                                     $st = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STRING)
                                 }) (ALT (* (BLOCK (ALT AMP))) STRING (* (BLOCK (ALT PUNTO TOSTR) (ALT PUNTO TOOWN))) {
              str := $STRING.text
              $st = expressions.NewPrimitive($AMP.line, $AMP.pos,str[1:len(str)-1],environment.STR)
          }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {
                                        StrExp := environment.NewStructContent($ID.text, $expression.p)
                                        $list.l.Add(StrExp);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS expression {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                })))))
2022-03-20 08:14:21:443 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT structCreation { $inst = $structCreation.dec }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER { $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) }))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ instructions LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        }))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         }) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        }))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {
                                $lma.ma.Add($expression.p)
                                $ma = $lma.ma
                             }) (ALT expression {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA ID D_PTS types {
                                        StrDef := environment.NewStructType($ID.text, $types.ty)
                                        $list.l.Add(StrDef);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS types {
                    StrDef := environment.NewStructType($ID.text, $types.ty)
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) }) (ALT ID listAccessArray IGUAL expression { $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) }))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
    $l = arrayList.New()
    $l.Add($ID.text)
}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                                 }) (ALT CORIZQ expression CORDER {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        }) (ALT CORIZQ types PYC expression CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE module (returns ) (BLOCK (ALT MODULE ID LLAVEIZQ LLAVEDER))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (SET MUL DIV MOD)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IG_IG DIFERENTE)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFunction { $p = $callFunction.cf }) (ALT primitive { $p = $primitive.p }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT stringTypes { $p = $stringTypes.st  }) (ALT CHARACTER { $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,$CHARACTER.text,environment.CHAR) }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE stringTypes (returns interfaces.Expression st) (BLOCK (ALT STRING PUNTO (= fnc (SET TOSTR TOOWN)) {
                                     str := $STRING.text
                                     $st = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STRING)
                                 }) (ALT (* (BLOCK (ALT AMP))) STRING (* (BLOCK (ALT PUNTO TOSTR) (ALT PUNTO TOOWN))) {
              str := $STRING.text
              $st = expressions.NewPrimitive($AMP.line, $AMP.pos,str[1:len(str)-1],environment.STR)
          }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {
                                        StrExp := environment.NewStructContent($ID.text, $expression.p)
                                        $list.l.Add(StrExp);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS expression {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                })))))
2022-03-20 08:14:21:632 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=237> {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              } 
        | AMP<tokenIndex=243> MUT<tokenIndex=245> expression<tokenIndex=247> {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     } 
        | {
          $l = arrayList.New()
       } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=214> expression<tokenIndex=216>{
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=225> AMP<tokenIndex=227> MUT<tokenIndex=229> expression<tokenIndex=231> {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }
        )*
    ;
2022-03-20 08:14:21:637 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 237))) {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 243))) (MUT (ELEMENT_OPTIONS (= tokenIndex 245))) (expression (ELEMENT_OPTIONS (= tokenIndex 247))) {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 214))) (expression (ELEMENT_OPTIONS (= tokenIndex 216))) {
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 225))) (AMP (ELEMENT_OPTIONS (= tokenIndex 227))) (MUT (ELEMENT_OPTIONS (= tokenIndex 229))) (expression (ELEMENT_OPTIONS (= tokenIndex 231))) {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }))))))
2022-03-20 08:14:21:718 left-recursion LogManager.java:25 block returns [*arrayList.List blk]
    :   ( {} instruction<tokenIndex=463> { $blk.Add($instruction.inst) } 
        | expression<tokenIndex=469> { $blk.Add($expression.p) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> instruction<tokenIndex=447> {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> expression<tokenIndex=457> {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }
        )*
    ;
2022-03-20 08:14:21:720 grammar LogManager.java:25 added: (RULE block (returns *arrayList.List blk) (BLOCK (ALT (BLOCK (ALT {} (instruction (ELEMENT_OPTIONS (= tokenIndex 463))) { $blk.Add($instruction.inst) }) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 469))) { $blk.Add($expression.p) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (instruction (ELEMENT_OPTIONS (= tokenIndex 447))) {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (expression (ELEMENT_OPTIONS (= tokenIndex 457))) {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }))))))
2022-03-20 08:14:21:773 left-recursion LogManager.java:25 listMatch returns [*arrayList.List ma]
    :   ( {} expression<tokenIndex=556> {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PLEC<tokenIndex=548> expression<tokenIndex=550> {
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       }
        )*
    ;
2022-03-20 08:14:21:774 grammar LogManager.java:25 added: (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 556))) {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PLEC (ELEMENT_OPTIONS (= tokenIndex 548))) (expression (ELEMENT_OPTIONS (= tokenIndex 550))) {
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       }))))))
2022-03-20 08:14:21:797 left-recursion LogManager.java:25 listStructDec returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=767> D_PTS<tokenIndex=769> types<tokenIndex=771>{
                    StrDef := environment.NewStructType($ID.text, $types.ty)
                    $l = arrayList.New();
                    $l.Add(StrDef);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=755> ID<tokenIndex=757> D_PTS<tokenIndex=759> types<tokenIndex=761> {
                                                  StrDef := environment.NewStructType($ID.text, $types.ty)
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              }
        )*
    ;
2022-03-20 08:14:21:798 grammar LogManager.java:25 added: (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 767))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 769))) (types (ELEMENT_OPTIONS (= tokenIndex 771))) {
                    StrDef := environment.NewStructType($ID.text, $types.ty)
                    $l = arrayList.New();
                    $l.Add(StrDef);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 755))) (ID (ELEMENT_OPTIONS (= tokenIndex 757))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 759))) (types (ELEMENT_OPTIONS (= tokenIndex 761))) {
                                                  StrDef := environment.NewStructType($ID.text, $types.ty)
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              }))))))
2022-03-20 08:14:21:819 left-recursion LogManager.java:25 listAccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=835> {
    $l = arrayList.New()
    $l.Add($ID.text)
} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=827> ID<tokenIndex=829> {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }
        )*
    ;
2022-03-20 08:14:21:820 grammar LogManager.java:25 added: (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 835))) {
    $l = arrayList.New()
    $l.Add($ID.text)
})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 827))) (ID (ELEMENT_OPTIONS (= tokenIndex 829))) {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }))))))
2022-03-20 08:14:21:845 left-recursion LogManager.java:25 listAccessArray returns [*arrayList.List l]
    :   ( {} CORIZQ<tokenIndex=861> expression<tokenIndex=863> CORDER<tokenIndex=865>{
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=852> expression<tokenIndex=854> CORDER<tokenIndex=856>{
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           }
        )*
    ;
2022-03-20 08:14:21:846 grammar LogManager.java:25 added: (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 861))) (expression (ELEMENT_OPTIONS (= tokenIndex 863))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 865))) {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 852))) (expression (ELEMENT_OPTIONS (= tokenIndex 854))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 856))) {
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           }))))))
2022-03-20 08:14:21:866 left-recursion LogManager.java:25 listParamsFunc returns [*arrayList.List lpf]
    :   ( {} ID<tokenIndex=999> D_PTS<tokenIndex=1001> types<tokenIndex=1003>{
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                $lpf.Add(newParam)
             } 
        | ID<tokenIndex=1008> D_PTS<tokenIndex=1010> AMP<tokenIndex=1012> MUT<tokenIndex=1014> arrayType<tokenIndex=1016> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                 $lpf.Add(newParam)
              } 
        | { $lpf = arrayList.New() } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=967> ID<tokenIndex=969> D_PTS<tokenIndex=971> types<tokenIndex=973> {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=983> ID<tokenIndex=985> D_PTS<tokenIndex=987> AMP<tokenIndex=989> MUT<tokenIndex=991> arrayType<tokenIndex=993> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
        )*
    ;
2022-03-20 08:14:21:869 grammar LogManager.java:25 added: (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 999))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1001))) (types (ELEMENT_OPTIONS (= tokenIndex 1003))) {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                $lpf.Add(newParam)
             }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1008))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1010))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1012))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1014))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1016))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 967))) (ID (ELEMENT_OPTIONS (= tokenIndex 969))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 971))) (types (ELEMENT_OPTIONS (= tokenIndex 973))) {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 983))) (ID (ELEMENT_OPTIONS (= tokenIndex 985))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 987))) (AMP (ELEMENT_OPTIONS (= tokenIndex 989))) (MUT (ELEMENT_OPTIONS (= tokenIndex 991))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 993))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }))))))
2022-03-20 08:14:21:895 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=1117> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1109> expression<tokenIndex=1111>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-03-20 08:14:21:897 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1117))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1109))) (expression (ELEMENT_OPTIONS (= tokenIndex 1111))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-03-20 08:14:21:922 left-recursion LogManager.java:25 expression returns [interfaces.Expression p]
    :   ( {} expr_arit<tokenIndex=1130> { $p = $expr_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> PUNTO<tokenIndex=1140> PUNTO<tokenIndex=1142> expdos=expression<tokenIndex=1146,p=2> { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }
        )*
    ;
2022-03-20 08:14:21:923 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1130))) { $p = $expr_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1140))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1142))) (= expdos (expression (ELEMENT_OPTIONS (= tokenIndex 1146) (= p 2)))) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))))))
2022-03-20 08:14:21:945 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} SUB<tokenIndex=1262> opDe=expr_arit<tokenIndex=1266,p=10> {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)} 
        | NOT<tokenIndex=1272> opDe=expr_arit<tokenIndex=1276,p=9> {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)} 
        | CORIZQ<tokenIndex=1282> listParams<tokenIndex=1284> CORDER<tokenIndex=1286> { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | PARIZQ<tokenIndex=1292> expression<tokenIndex=1294> PARDER<tokenIndex=1296> { $p = $expression.p } 
        | ID<tokenIndex=1302> LLAVEIZQ<tokenIndex=1304> listStructExp<tokenIndex=1306> LLAVEDER<tokenIndex=1308> { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | callFunction<tokenIndex=1314> { $p = $callFunction.cf } 
        | primitive<tokenIndex=1320> { $p = $primitive.p } 
        | condIf<tokenIndex=1326> { $p = $condIf.ifCond } 
        | condMatch<tokenIndex=1332> { $p = $condMatch.mtch } 
        | loopBucle<tokenIndex=1338> { $p = $loopBucle.lb } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MUL<tokenIndex=1199>|DIV<tokenIndex=1201>|MOD<tokenIndex=1203>) opDe=expr_arit<tokenIndex=1208,p=14> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(ADD<tokenIndex=1221>|SUB<tokenIndex=1223>) opDe=expr_arit<tokenIndex=1228,p=13> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MENOR<tokenIndex=1241>|MENORIGUAL<tokenIndex=1243>|MAYORIGUAL<tokenIndex=1245>|MAYOR<tokenIndex=1247>|IG_IG<tokenIndex=1249>|DIFERENTE<tokenIndex=1251>) opDe=expr_arit<tokenIndex=1256,p=12> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
        )*
    ;
2022-03-20 08:14:21:951 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 1262))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1266) (= p 10)))) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1272))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1276) (= p 9)))) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1282))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1284))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1286))) { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1292))) (expression (ELEMENT_OPTIONS (= tokenIndex 1294))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1296))) { $p = $expression.p }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1302))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 1304))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1306))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 1308))) { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 1314))) { $p = $callFunction.cf }) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 1320))) { $p = $primitive.p }) (ALT (condIf (ELEMENT_OPTIONS (= tokenIndex 1326))) { $p = $condIf.ifCond }) (ALT (condMatch (ELEMENT_OPTIONS (= tokenIndex 1332))) { $p = $condMatch.mtch }) (ALT (loopBucle (ELEMENT_OPTIONS (= tokenIndex 1338))) { $p = $loopBucle.lb })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1199))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1201))) (MOD (ELEMENT_OPTIONS (= tokenIndex 1203))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1208) (= p 14)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1221))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1223))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1228) (= p 13)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 1241))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 1243))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 1245))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1247))) (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1249))) (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 1251))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1256) (= p 12)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}))))))
2022-03-20 08:14:21:977 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1468> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=1444> expression<tokenIndex=1446> CORDER<tokenIndex=1448> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1460> ID<tokenIndex=1462> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2022-03-20 08:14:21:978 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1468))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1444))) (expression (ELEMENT_OPTIONS (= tokenIndex 1446))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1448))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1460))) (ID (ELEMENT_OPTIONS (= tokenIndex 1462))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2022-03-20 08:14:22:002 left-recursion LogManager.java:25 listStructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1497> D_PTS<tokenIndex=1499> expression<tokenIndex=1501>{
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1485> ID<tokenIndex=1487> D_PTS<tokenIndex=1489> expression<tokenIndex=1491> {
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              }
        )*
    ;
2022-03-20 08:14:22:003 grammar LogManager.java:25 added: (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1497))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1499))) (expression (ELEMENT_OPTIONS (= tokenIndex 1501))) {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1485))) (ID (ELEMENT_OPTIONS (= tokenIndex 1487))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1489))) (expression (ELEMENT_OPTIONS (= tokenIndex 1491))) {
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              }))))))
2022-03-20 08:14:22:020 grammar LogManager.java:25 import INT=1
2022-03-20 08:14:22:020 grammar LogManager.java:25 import FLOAT=2
2022-03-20 08:14:22:020 grammar LogManager.java:25 import BOOL=3
2022-03-20 08:14:22:020 grammar LogManager.java:25 import CHAR=4
2022-03-20 08:14:22:020 grammar LogManager.java:25 import STR1=5
2022-03-20 08:14:22:020 grammar LogManager.java:25 import STR2=6
2022-03-20 08:14:22:020 grammar LogManager.java:25 import USIZE=7
2022-03-20 08:14:22:020 grammar LogManager.java:25 import VECTOR=8
2022-03-20 08:14:22:020 grammar LogManager.java:25 import STRUCT=9
2022-03-20 08:14:22:020 grammar LogManager.java:25 import TRU=10
2022-03-20 08:14:22:020 grammar LogManager.java:25 import FAL=11
2022-03-20 08:14:22:020 grammar LogManager.java:25 import POW=12
2022-03-20 08:14:22:020 grammar LogManager.java:25 import PRINT=13
2022-03-20 08:14:22:020 grammar LogManager.java:25 import LET=14
2022-03-20 08:14:22:020 grammar LogManager.java:25 import MUT=15
2022-03-20 08:14:22:020 grammar LogManager.java:25 import FUNC=16
2022-03-20 08:14:22:020 grammar LogManager.java:25 import ARROW1=17
2022-03-20 08:14:22:020 grammar LogManager.java:25 import ARROW2=18
2022-03-20 08:14:22:020 grammar LogManager.java:25 import ABS=19
2022-03-20 08:14:22:020 grammar LogManager.java:25 import SQRT=20
2022-03-20 08:14:22:020 grammar LogManager.java:25 import TOSTR=21
2022-03-20 08:14:22:020 grammar LogManager.java:25 import TOOWN=22
2022-03-20 08:14:22:020 grammar LogManager.java:25 import CLONE=23
2022-03-20 08:14:22:020 grammar LogManager.java:25 import NEW=24
2022-03-20 08:14:22:020 grammar LogManager.java:25 import LEN=25
2022-03-20 08:14:22:021 grammar LogManager.java:25 import PUSH=26
2022-03-20 08:14:22:021 grammar LogManager.java:25 import REMOVE=27
2022-03-20 08:14:22:021 grammar LogManager.java:25 import CONTAINS=28
2022-03-20 08:14:22:021 grammar LogManager.java:25 import INSERT=29
2022-03-20 08:14:22:021 grammar LogManager.java:25 import CAPACITY=30
2022-03-20 08:14:22:021 grammar LogManager.java:25 import WCAPACITY=31
2022-03-20 08:14:22:021 grammar LogManager.java:25 import MAIN=32
2022-03-20 08:14:22:021 grammar LogManager.java:25 import IF=33
2022-03-20 08:14:22:021 grammar LogManager.java:25 import ELSE=34
2022-03-20 08:14:22:021 grammar LogManager.java:25 import MATCH=35
2022-03-20 08:14:22:021 grammar LogManager.java:25 import LOOP=36
2022-03-20 08:14:22:021 grammar LogManager.java:25 import WHILE=37
2022-03-20 08:14:22:021 grammar LogManager.java:25 import FOR=38
2022-03-20 08:14:22:021 grammar LogManager.java:25 import IN=39
2022-03-20 08:14:22:021 grammar LogManager.java:25 import BREAK=40
2022-03-20 08:14:22:021 grammar LogManager.java:25 import CONTINUE=41
2022-03-20 08:14:22:021 grammar LogManager.java:25 import RETURN=42
2022-03-20 08:14:22:021 grammar LogManager.java:25 import MODULE=43
2022-03-20 08:14:22:021 grammar LogManager.java:25 import PUB=44
2022-03-20 08:14:22:021 grammar LogManager.java:25 import NUMBER=45
2022-03-20 08:14:22:021 grammar LogManager.java:25 import STRING=46
2022-03-20 08:14:22:021 grammar LogManager.java:25 import ID=47
2022-03-20 08:14:22:021 grammar LogManager.java:25 import CHARACTER=48
2022-03-20 08:14:22:021 grammar LogManager.java:25 import PUNTO=49
2022-03-20 08:14:22:021 grammar LogManager.java:25 import C_PTS=50
2022-03-20 08:14:22:021 grammar LogManager.java:25 import D_PTS=51
2022-03-20 08:14:22:021 grammar LogManager.java:25 import PYC=52
2022-03-20 08:14:22:021 grammar LogManager.java:25 import COMA=53
2022-03-20 08:14:22:022 grammar LogManager.java:25 import DIFERENTE=54
2022-03-20 08:14:22:022 grammar LogManager.java:25 import IG_IG=55
2022-03-20 08:14:22:022 grammar LogManager.java:25 import NOT=56
2022-03-20 08:14:22:022 grammar LogManager.java:25 import OR=57
2022-03-20 08:14:22:022 grammar LogManager.java:25 import PLEC=58
2022-03-20 08:14:22:022 grammar LogManager.java:25 import UNDERSCORE=59
2022-03-20 08:14:22:022 grammar LogManager.java:25 import AND=60
2022-03-20 08:14:22:022 grammar LogManager.java:25 import IGUAL=61
2022-03-20 08:14:22:022 grammar LogManager.java:25 import MAYORIGUAL=62
2022-03-20 08:14:22:022 grammar LogManager.java:25 import MENORIGUAL=63
2022-03-20 08:14:22:022 grammar LogManager.java:25 import MAYOR=64
2022-03-20 08:14:22:022 grammar LogManager.java:25 import MENOR=65
2022-03-20 08:14:22:022 grammar LogManager.java:25 import MUL=66
2022-03-20 08:14:22:022 grammar LogManager.java:25 import DIV=67
2022-03-20 08:14:22:022 grammar LogManager.java:25 import ADD=68
2022-03-20 08:14:22:022 grammar LogManager.java:25 import SUB=69
2022-03-20 08:14:22:022 grammar LogManager.java:25 import MOD=70
2022-03-20 08:14:22:022 grammar LogManager.java:25 import PARIZQ=71
2022-03-20 08:14:22:022 grammar LogManager.java:25 import PARDER=72
2022-03-20 08:14:22:022 grammar LogManager.java:25 import LLAVEIZQ=73
2022-03-20 08:14:22:022 grammar LogManager.java:25 import LLAVEDER=74
2022-03-20 08:14:22:022 grammar LogManager.java:25 import CORIZQ=75
2022-03-20 08:14:22:022 grammar LogManager.java:25 import CORDER=76
2022-03-20 08:14:22:022 grammar LogManager.java:25 import AMP=77
2022-03-20 08:14:22:022 grammar LogManager.java:25 import WHITESPACE=78
2022-03-20 08:14:22:022 grammar LogManager.java:25 import COMMENT=79
2022-03-20 08:14:22:022 grammar LogManager.java:25 import LINE_COMMENT=80
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'i64'=1
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'f64'=2
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'bool'=3
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'char'=4
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'String'=5
2022-03-20 08:14:22:022 grammar LogManager.java:25 import '&str'=6
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'usize'=7
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'vec'=8
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'struct'=9
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'true'=10
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'false'=11
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'pow'=12
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'println!'=13
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'let'=14
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'mut'=15
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'fn'=16
2022-03-20 08:14:22:022 grammar LogManager.java:25 import '->'=17
2022-03-20 08:14:22:022 grammar LogManager.java:25 import '=>'=18
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'abs'=19
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'sqrt'=20
2022-03-20 08:14:22:022 grammar LogManager.java:25 import 'to_string()'=21
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'to_owned()'=22
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'clone'=23
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'new'=24
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'len'=25
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'push'=26
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'remove'=27
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'contains'=28
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'insert'=29
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'capacity'=30
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'with_capacity'=31
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'main'=32
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'if'=33
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'else'=34
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'match'=35
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'loop'=36
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'while'=37
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'for'=38
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'in'=39
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'break'=40
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'continue'=41
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'return'=42
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'mod'=43
2022-03-20 08:14:22:023 grammar LogManager.java:25 import 'pub'=44
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '.'=49
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '::'=50
2022-03-20 08:14:22:023 grammar LogManager.java:25 import ':'=51
2022-03-20 08:14:22:023 grammar LogManager.java:25 import ';'=52
2022-03-20 08:14:22:023 grammar LogManager.java:25 import ','=53
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '!='=54
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '=='=55
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '!'=56
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '||'=57
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '|'=58
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '_'=59
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '&&'=60
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '='=61
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '>='=62
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '<='=63
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '>'=64
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '<'=65
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '*'=66
2022-03-20 08:14:22:023 grammar LogManager.java:25 import '/'=67
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '+'=68
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '-'=69
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '%'=70
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '('=71
2022-03-20 08:14:22:024 grammar LogManager.java:25 import ')'=72
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '{'=73
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '}'=74
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '['=75
2022-03-20 08:14:22:024 grammar LogManager.java:25 import ']'=76
2022-03-20 08:14:22:024 grammar LogManager.java:25 import '&'=77
2022-03-20 08:14:22:024 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR=8, STRUCT=9, TRU=10, FAL=11, POW=12, PRINT=13, LET=14, MUT=15, FUNC=16, ARROW1=17, ARROW2=18, ABS=19, SQRT=20, TOSTR=21, TOOWN=22, CLONE=23, NEW=24, LEN=25, PUSH=26, REMOVE=27, CONTAINS=28, INSERT=29, CAPACITY=30, WCAPACITY=31, MAIN=32, IF=33, ELSE=34, MATCH=35, LOOP=36, WHILE=37, FOR=38, IN=39, BREAK=40, CONTINUE=41, RETURN=42, MODULE=43, PUB=44, NUMBER=45, STRING=46, ID=47, CHARACTER=48, PUNTO=49, C_PTS=50, D_PTS=51, PYC=52, COMA=53, DIFERENTE=54, IG_IG=55, NOT=56, OR=57, PLEC=58, UNDERSCORE=59, AND=60, IGUAL=61, MAYORIGUAL=62, MENORIGUAL=63, MAYOR=64, MENOR=65, MUL=66, DIV=67, ADD=68, SUB=69, MOD=70, PARIZQ=71, PARDER=72, LLAVEIZQ=73, LLAVEDER=74, CORIZQ=75, CORDER=76, AMP=77, WHITESPACE=78, COMMENT=79, LINE_COMMENT=80, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'struct'=9, 'true'=10, 'false'=11, 'pow'=12, 'println!'=13, 'let'=14, 'mut'=15, 'fn'=16, '->'=17, '=>'=18, 'abs'=19, 'sqrt'=20, 'to_string()'=21, 'to_owned()'=22, 'clone'=23, 'new'=24, 'len'=25, 'push'=26, 'remove'=27, 'contains'=28, 'insert'=29, 'capacity'=30, 'with_capacity'=31, 'main'=32, 'if'=33, 'else'=34, 'match'=35, 'loop'=36, 'while'=37, 'for'=38, 'in'=39, 'break'=40, 'continue'=41, 'return'=42, 'mod'=43, 'pub'=44, '.'=49, '::'=50, ':'=51, ';'=52, ','=53, '!='=54, '=='=55, '!'=56, '||'=57, '|'=58, '_'=59, '&&'=60, '='=61, '>='=62, '<='=63, '>'=64, '<'=65, '*'=66, '/'=67, '+'=68, '-'=69, '%'=70, '('=71, ')'=72, '{'=73, '}'=74, '['=75, ']'=76, '&'=77}
2022-03-20 08:14:22:025 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR=8, STRUCT=9, TRU=10, FAL=11, POW=12, PRINT=13, LET=14, MUT=15, FUNC=16, ARROW1=17, ARROW2=18, ABS=19, SQRT=20, TOSTR=21, TOOWN=22, CLONE=23, NEW=24, LEN=25, PUSH=26, REMOVE=27, CONTAINS=28, INSERT=29, CAPACITY=30, WCAPACITY=31, MAIN=32, IF=33, ELSE=34, MATCH=35, LOOP=36, WHILE=37, FOR=38, IN=39, BREAK=40, CONTINUE=41, RETURN=42, MODULE=43, PUB=44, NUMBER=45, STRING=46, ID=47, CHARACTER=48, PUNTO=49, C_PTS=50, D_PTS=51, PYC=52, COMA=53, DIFERENTE=54, IG_IG=55, NOT=56, OR=57, PLEC=58, UNDERSCORE=59, AND=60, IGUAL=61, MAYORIGUAL=62, MENORIGUAL=63, MAYOR=64, MENOR=65, MUL=66, DIV=67, ADD=68, SUB=69, MOD=70, PARIZQ=71, PARDER=72, LLAVEIZQ=73, LLAVEDER=74, CORIZQ=75, CORDER=76, AMP=77, WHITESPACE=78, COMMENT=79, LINE_COMMENT=80}
2022-03-20 08:14:22:029 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'struct'=9, 'true'=10, 'false'=11, 'pow'=12, 'println!'=13, 'let'=14, 'mut'=15, 'fn'=16, '->'=17, '=>'=18, 'abs'=19, 'sqrt'=20, 'to_string()'=21, 'to_owned()'=22, 'clone'=23, 'new'=24, 'len'=25, 'push'=26, 'remove'=27, 'contains'=28, 'insert'=29, 'capacity'=30, 'with_capacity'=31, 'main'=32, 'if'=33, 'else'=34, 'match'=35, 'loop'=36, 'while'=37, 'for'=38, 'in'=39, 'break'=40, 'continue'=41, 'return'=42, 'mod'=43, 'pub'=44, '.'=49, '::'=50, ':'=51, ';'=52, ','=53, '!='=54, '=='=55, '!'=56, '||'=57, '|'=58, '_'=59, '&&'=60, '='=61, '>='=62, '<='=63, '>'=64, '<'=65, '*'=66, '/'=67, '+'=68, '-'=69, '%'=70, '('=71, ')'=72, '{'=73, '}'=74, '['=75, ']'=76, '&'=77}
2022-03-20 08:14:22:097 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-03-20 08:14:22:098 LL1 LogManager.java:25 look=[{14, 16, 43}, 16]
2022-03-20 08:14:22:098 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:098 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-03-20 08:14:22:098 LL1 LogManager.java:25 look=[{14, 16, 43}, <EOF>]
2022-03-20 08:14:22:098 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:098 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-03-20 08:14:22:098 LL1 LogManager.java:25 look=[14, 16, 43]
2022-03-20 08:14:22:098 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:098 LL1 LogManager.java:25 
DECISION 3 in rule instructions
2022-03-20 08:14:22:098 LL1 LogManager.java:25 look=[{9, 13..14, 33, 35..38, 40..41, 47}, 74]
2022-03-20 08:14:22:098 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:098 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2022-03-20 08:14:22:098 LL1 LogManager.java:25 look=[13, 14, 47, 33, 35, 37, 36, 38, 40, 41, 9]
2022-03-20 08:14:22:098 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:098 LL1 LogManager.java:25 
DECISION 5 in rule listParamsCall
2022-03-20 08:14:22:099 LL1 LogManager.java:25 look=[{10..11, 33, 35..36, 45..48, 56, 69, 71, 75, 77}, 77, null]
2022-03-20 08:14:22:099 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:099 LL1 LogManager.java:25 
DECISION 6 in rule listParamsCall
2022-03-20 08:14:22:099 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:099 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:099 LL1 LogManager.java:25 
DECISION 7 in rule listParamsCall
2022-03-20 08:14:22:099 LL1 LogManager.java:25 look=[null, 72]
2022-03-20 08:14:22:099 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:099 LL1 LogManager.java:25 
DECISION 8 in rule transBreak
2022-03-20 08:14:22:099 LL1 LogManager.java:25 look=[40, 40]
2022-03-20 08:14:22:099 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:099 LL1 LogManager.java:25 
DECISION 9 in rule condIf
2022-03-20 08:14:22:100 LL1 LogManager.java:25 look=[34, null]
2022-03-20 08:14:22:100 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:100 LL1 LogManager.java:25 
DECISION 10 in rule condElse
2022-03-20 08:14:22:100 LL1 LogManager.java:25 look=[34, null]
2022-03-20 08:14:22:100 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:100 LL1 LogManager.java:25 
DECISION 11 in rule block
2022-03-20 08:14:22:101 LL1 LogManager.java:25 look=[{9, 13..14, 33, 35..38, 40..41, 47}, {10..11, 33, 35..36, 45..48, 56, 69, 71, 75, 77}]
2022-03-20 08:14:22:101 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:101 LL1 LogManager.java:25 
DECISION 12 in rule block
2022-03-20 08:14:22:101 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:101 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:101 LL1 LogManager.java:25 
DECISION 13 in rule block
2022-03-20 08:14:22:101 LL1 LogManager.java:25 look=[null, {53, 74}]
2022-03-20 08:14:22:101 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:101 LL1 LogManager.java:25 
DECISION 14 in rule condMatch
2022-03-20 08:14:22:101 LL1 LogManager.java:25 look=[{10..11, 33, 35..36, 45..48, 56, 69, 71, 75, 77}, {59, 74}]
2022-03-20 08:14:22:101 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:101 LL1 LogManager.java:25 
DECISION 15 in rule listArms
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[{10..11, 33, 35..36, 45..48, 56, 69, 71, 75, 77}, {10..11, 33, 35..36, 45..48, 56, 69, 71, 75, 77}]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 16 in rule listMatch
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, 18]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 17 in rule defaultArm
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[59, 59, 74]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 18 in rule declaration
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[14, 14, 14, 14, 14, 14]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 19 in rule listStructDec
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, 74]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 20 in rule assignment
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[47, 47, 47]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 21 in rule listAccessStruct
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, 61]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 22 in rule listAccessArray
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, 61]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 23 in rule arrayType
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[75, 75]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 24 in rule function
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[16, 16]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 25 in rule listParamsFunc
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[47, 47, null]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 26 in rule listParamsFunc
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 27 in rule listParamsFunc
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, 72]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 28 in rule types
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 6, 8, 9]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 29 in rule listParams
2022-03-20 08:14:22:102 LL1 LogManager.java:25 look=[null, {72, 76}]
2022-03-20 08:14:22:102 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:102 LL1 LogManager.java:25 
DECISION 30 in rule expression
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 31 in rule callFunction
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[47, 47]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 32 in rule expr_arit
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[69, 56, 75, 71, 47, 47, {10..11, 45..48, 77}, 33, 35, 36]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 33 in rule expr_arit
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[null, null, null]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 34 in rule expr_arit
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 35 in rule primitive
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[45, {46, 77}, 48, 10, 11, 47]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 36 in rule stringTypes
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[77, 46]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? true
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 37 in rule stringTypes
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[49, 49]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 38 in rule stringTypes
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[49, null]
2022-03-20 08:14:22:103 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:103 LL1 LogManager.java:25 
DECISION 39 in rule stringTypes
2022-03-20 08:14:22:103 LL1 LogManager.java:25 look=[46, {46, 77}]
2022-03-20 08:14:22:104 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:104 LL1 LogManager.java:25 
DECISION 40 in rule listArray
2022-03-20 08:14:22:104 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:104 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:104 LL1 LogManager.java:25 
DECISION 41 in rule listArray
2022-03-20 08:14:22:104 LL1 LogManager.java:25 look=[null, null]
2022-03-20 08:14:22:104 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:104 LL1 LogManager.java:25 
DECISION 42 in rule listStructExp
2022-03-20 08:14:22:104 LL1 LogManager.java:25 look=[null, 74]
2022-03-20 08:14:22:104 LL1 LogManager.java:25 LL(1)? false
2022-03-20 08:14:22:121 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-20 08:14:22:153 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-03-20 08:14:22:153 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-03-20 08:14:22:153 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-03-20 08:14:22:154 action-translator LogManager.java:25 translate  $hi = $declaration.dec 
2022-03-20 08:14:22:155 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,29:20]
2022-03-20 08:14:22:155 action-translator LogManager.java:25 qattr [@-1,8:18='declaration',<0>,29:26].[@-1,20:22='dec',<0>,29:38]
2022-03-20 08:14:22:155 action-translator LogManager.java:25 translate  $hi = $function.fun 
2022-03-20 08:14:22:155 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,30:13]
2022-03-20 08:14:22:155 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,30:19].[@-1,17:19='fun',<0>,30:28]
2022-03-20 08:14:22:156 action-translator LogManager.java:25 translate  $mainInst = $block.blk 
2022-03-20 08:14:22:156 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,35:52]
2022-03-20 08:14:22:156 action-translator LogManager.java:25 qattr [@-1,14:18='block',<0>,35:64].[@-1,20:22='blk',<0>,35:70]
2022-03-20 08:14:22:156 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-03-20 08:14:22:156 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,40:5]
2022-03-20 08:14:22:157 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-03-20 08:14:22:157 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,46:13]
2022-03-20 08:14:22:157 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-03-20 08:14:22:157 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:19]
2022-03-20 08:14:22:157 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,52:27].[@-1,21:22='pr',<0>,52:38]
2022-03-20 08:14:22:157 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-03-20 08:14:22:158 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:20]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,53:28].[@-1,22:24='dec',<0>,53:40]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2022-03-20 08:14:22:158 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:19]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,54:27].[@-1,21:23='ass',<0>,54:38]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 translate  $inst = $condIf.ifCond 
2022-03-20 08:14:22:158 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,55:11]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 qattr [@-1,10:15='condIf',<0>,55:19].[@-1,17:22='ifCond',<0>,55:26]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 translate  $inst = $condMatch.mtch 
2022-03-20 08:14:22:158 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,56:14]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 qattr [@-1,10:18='condMatch',<0>,56:22].[@-1,20:23='mtch',<0>,56:32]
2022-03-20 08:14:22:158 action-translator LogManager.java:25 translate  $inst = $loopWhile.lw 
2022-03-20 08:14:22:159 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,57:14]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 qattr [@-1,10:18='loopWhile',<0>,57:22].[@-1,20:21='lw',<0>,57:32]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 translate  $inst = $loopBucle.lb 
2022-03-20 08:14:22:159 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,58:14]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 qattr [@-1,10:18='loopBucle',<0>,58:22].[@-1,20:21='lb',<0>,58:32]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 translate  $inst = $loopForin.lfi 
2022-03-20 08:14:22:159 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,59:14]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 qattr [@-1,10:18='loopForin',<0>,59:22].[@-1,20:22='lfi',<0>,59:32]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 translate  $inst = $transBreak.brk 
2022-03-20 08:14:22:159 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,60:19]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 qattr [@-1,10:19='transBreak',<0>,60:27].[@-1,21:23='brk',<0>,60:38]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 translate  $inst = $transContinue.cnt 
2022-03-20 08:14:22:159 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,61:22]
2022-03-20 08:14:22:159 action-translator LogManager.java:25 qattr [@-1,10:22='transContinue',<0>,61:30].[@-1,24:26='cnt',<0>,61:44]
2022-03-20 08:14:22:160 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2022-03-20 08:14:22:160 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,62:19]
2022-03-20 08:14:22:160 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,62:27].[@-1,25:27='dec',<0>,62:42]
2022-03-20 08:14:22:161 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:161 action-translator LogManager.java:25 translate 
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              
2022-03-20 08:14:22:161 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,3:54].[@-1,67:67='p',<0>,3:65]
2022-03-20 08:14:22:161 action-translator LogManager.java:25 attr [@-1,96:96='l',<0>,4:18]
2022-03-20 08:14:22:161 action-translator LogManager.java:25 attr [@-1,135:135='l',<0>,5:18]
2022-03-20 08:14:22:161 action-translator LogManager.java:25 translate 
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     
2022-03-20 08:14:22:161 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,8:61].[@-1,74:74='p',<0>,8:72]
2022-03-20 08:14:22:162 action-translator LogManager.java:25 attr [@-1,109:109='l',<0>,9:25]
2022-03-20 08:14:22:162 action-translator LogManager.java:25 attr [@-1,155:155='l',<0>,10:25]
2022-03-20 08:14:22:162 action-translator LogManager.java:25 translate 
          $l = arrayList.New()
       
2022-03-20 08:14:22:162 action-translator LogManager.java:25 attr [@-1,13:13='l',<0>,13:11]
2022-03-20 08:14:22:163 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-20 08:14:22:163 action-translator LogManager.java:25 translate 
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                
2022-03-20 08:14:22:163 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,18:88].[@-1,101:101='p',<0>,18:99]
2022-03-20 08:14:22:163 action-translator LogManager.java:25 qattr [@-1,164:167='list',<0>,19:52].[@-1,169:169='l',<0>,19:57]
2022-03-20 08:14:22:163 action-translator LogManager.java:25 setAttr [@-1,236:236='l',<0>,20:52] [@-1,239:246=' $list.l',<0>,20:55]
2022-03-20 08:14:22:163 action-translator LogManager.java:25 translate  $list.l
2022-03-20 08:14:22:163 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,17:107].[@-1,7:7='l',<0>,17:112]
2022-03-20 08:14:22:164 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-20 08:14:22:164 action-translator LogManager.java:25 translate 
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   
2022-03-20 08:14:22:164 action-translator LogManager.java:25 qattr [@-1,93:102='expression',<0>,23:91].[@-1,104:104='p',<0>,23:102]
2022-03-20 08:14:22:164 action-translator LogManager.java:25 qattr [@-1,169:172='list',<0>,24:55].[@-1,174:174='l',<0>,24:60]
2022-03-20 08:14:22:164 action-translator LogManager.java:25 setAttr [@-1,244:244='l',<0>,25:55] [@-1,247:254=' $list.l',<0>,25:58]
2022-03-20 08:14:22:164 action-translator LogManager.java:25 translate  $list.l
2022-03-20 08:14:22:164 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,22:158].[@-1,7:7='l',<0>,22:163]
2022-03-20 08:14:22:165 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-20 08:14:22:165 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-20 08:14:22:165 action-translator LogManager.java:25 translate  $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) 
2022-03-20 08:14:22:165 action-translator LogManager.java:25 attr [@-1,2:3='lw',<0>,92:45]
2022-03-20 08:14:22:165 action-translator LogManager.java:25 qattr [@-1,30:34='WHILE',<0>,92:73].[@-1,36:39='line',<0>,92:79]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 qattr [@-1,43:47='WHILE',<0>,92:86].[@-1,49:51='pos',<0>,92:92]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 qattr [@-1,55:64='expression',<0>,92:98].[@-1,66:66='p',<0>,92:109]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 qattr [@-1,70:74='block',<0>,92:113].[@-1,76:78='blk',<0>,92:119]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 translate  $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) 
2022-03-20 08:14:22:166 action-translator LogManager.java:25 attr [@-1,2:3='lb',<0>,96:33]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 qattr [@-1,29:32='LOOP',<0>,96:60].[@-1,34:37='line',<0>,96:65]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 qattr [@-1,41:44='LOOP',<0>,96:72].[@-1,46:48='pos',<0>,96:77]
2022-03-20 08:14:22:166 action-translator LogManager.java:25 qattr [@-1,52:56='block',<0>,96:83].[@-1,58:60='blk',<0>,96:89]
2022-03-20 08:14:22:167 action-translator LogManager.java:25 translate  $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) 
2022-03-20 08:14:22:167 action-translator LogManager.java:25 attr [@-1,2:4='lfi',<0>,100:56]
2022-03-20 08:14:22:167 action-translator LogManager.java:25 qattr [@-1,31:33='FOR',<0>,100:85].[@-1,35:38='line',<0>,100:89]
2022-03-20 08:14:22:167 action-translator LogManager.java:25 qattr [@-1,42:44='FOR',<0>,100:96].[@-1,46:48='pos',<0>,100:100]
2022-03-20 08:14:22:167 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,100:106].[@-1,55:58='text',<0>,100:109]
2022-03-20 08:14:22:167 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,100:116].[@-1,73:73='p',<0>,100:127]
2022-03-20 08:14:22:167 action-translator LogManager.java:25 qattr [@-1,77:88='instructions',<0>,100:131].[@-1,90:94='insts',<0>,100:144]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) 
2022-03-20 08:14:22:168 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,104:21]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,104:50].[@-1,37:40='line',<0>,104:56]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,104:63].[@-1,50:52='pos',<0>,104:69]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,104:75].[@-1,67:67='p',<0>,104:86]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) 
2022-03-20 08:14:22:168 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,105:10]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,105:39].[@-1,37:40='line',<0>,105:45]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,105:52].[@-1,50:52='pos',<0>,105:58]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2022-03-20 08:14:22:168 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,109:13]
2022-03-20 08:14:22:168 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,109:45].[@-1,43:46='line',<0>,109:54]
2022-03-20 08:14:22:169 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,109:61].[@-1,59:61='pos',<0>,109:70]
2022-03-20 08:14:22:169 action-translator LogManager.java:25 translate 
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            
2022-03-20 08:14:22:169 action-translator LogManager.java:25 attr [@-1,206:211='ifCond',<0>,119:13]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,235:236='IF',<0>,119:42].[@-1,238:241='line',<0>,119:45]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,245:246='IF',<0>,119:52].[@-1,248:250='pos',<0>,119:55]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,254:263='expression',<0>,119:61].[@-1,265:265='p',<0>,119:72]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,269:273='block',<0>,119:76].[@-1,275:277='blk',<0>,119:82]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,287:294='condElse',<0>,119:94].[@-1,296:302='blkelse',<0>,119:103]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 translate 
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    
2022-03-20 08:14:22:170 action-translator LogManager.java:25 attr [@-1,69:72='elif',<0>,127:5]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,96:99='ELSE',<0>,127:32].[@-1,101:104='line',<0>,127:37]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,108:111='ELSE',<0>,127:44].[@-1,113:115='pos',<0>,127:49]
2022-03-20 08:14:22:170 action-translator LogManager.java:25 qattr [@-1,119:128='expression',<0>,127:55].[@-1,130:130='p',<0>,127:66]
2022-03-20 08:14:22:171 action-translator LogManager.java:25 qattr [@-1,134:138='block',<0>,127:70].[@-1,140:142='blk',<0>,127:76]
2022-03-20 08:14:22:171 action-translator LogManager.java:25 translate  $blkelse = $block.blk 
2022-03-20 08:14:22:171 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,132:33]
2022-03-20 08:14:22:171 action-translator LogManager.java:25 qattr [@-1,13:17='block',<0>,132:44].[@-1,19:21='blk',<0>,132:50]
2022-03-20 08:14:22:171 action-translator LogManager.java:25 translate  $blkelse = arrayList.New() 
2022-03-20 08:14:22:171 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,133:4]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 translate 
    $blk = arrayList.New()
  
2022-03-20 08:14:22:172 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,138:5]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:172 action-translator LogManager.java:25 translate  $blk.Add($instruction.inst) 
2022-03-20 08:14:22:172 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,2:43]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 qattr [@-1,11:21='instruction',<0>,2:52].[@-1,23:26='inst',<0>,2:64]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 translate  $blk.Add($expression.p) 
2022-03-20 08:14:22:172 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,3:39]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 qattr [@-1,11:20='expression',<0>,3:48].[@-1,22:22='p',<0>,3:59]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-20 08:14:22:172 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      
2022-03-20 08:14:22:172 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,7:39].[@-1,48:50='blk',<0>,7:46]
2022-03-20 08:14:22:172 action-translator LogManager.java:25 qattr [@-1,57:67='instruction',<0>,7:55].[@-1,69:72='inst',<0>,7:67]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 attr [@-1,115:117='blk',<0>,8:39]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 qattr [@-1,122:127='bloque',<0>,8:46].[@-1,129:131='blk',<0>,8:53]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-20 08:14:22:173 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     
2022-03-20 08:14:22:173 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,11:39].[@-1,48:50='blk',<0>,11:46]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,11:55].[@-1,68:68='p',<0>,11:66]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 attr [@-1,111:113='blk',<0>,12:39]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 qattr [@-1,118:123='bloque',<0>,12:46].[@-1,125:127='blk',<0>,12:53]
2022-03-20 08:14:22:173 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-20 08:14:22:173 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-20 08:14:22:174 action-translator LogManager.java:25 translate 
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        
2022-03-20 08:14:22:174 action-translator LogManager.java:25 attr [@-1,185:188='mtch',<0>,160:9]
2022-03-20 08:14:22:174 action-translator LogManager.java:25 qattr [@-1,215:219='MATCH',<0>,160:39].[@-1,221:224='line',<0>,160:45]
2022-03-20 08:14:22:174 action-translator LogManager.java:25 qattr [@-1,228:232='MATCH',<0>,160:52].[@-1,234:236='pos',<0>,160:58]
2022-03-20 08:14:22:174 action-translator LogManager.java:25 qattr [@-1,240:249='expression',<0>,160:64].[@-1,251:251='p',<0>,160:75]
2022-03-20 08:14:22:174 action-translator LogManager.java:25 qattr [@-1,264:273='defaultArm',<0>,160:88].[@-1,275:278='defa',<0>,160:99]
2022-03-20 08:14:22:174 action-translator LogManager.java:25 translate 
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         
2022-03-20 08:14:22:174 action-translator LogManager.java:25 attr [@-1,12:15='arms',<0>,166:10]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 qattr [@-1,40:48='listMatch',<0>,166:38].[@-1,50:54='start',<0>,166:48]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 qattr [@-1,67:75='listMatch',<0>,166:65].[@-1,77:81='start',<0>,166:75]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 qattr [@-1,97:105='listMatch',<0>,166:95].[@-1,107:108='ma',<0>,166:105]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 qattr [@-1,112:116='block',<0>,166:110].[@-1,118:120='blk',<0>,166:116]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 translate 
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        
2022-03-20 08:14:22:175 action-translator LogManager.java:25 attr [@-1,11:14='arms',<0>,169:9]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 qattr [@-1,39:47='listMatch',<0>,169:37].[@-1,49:53='start',<0>,169:47]
2022-03-20 08:14:22:175 action-translator LogManager.java:25 qattr [@-1,66:74='listMatch',<0>,169:64].[@-1,76:80='start',<0>,169:74]
2022-03-20 08:14:22:176 action-translator LogManager.java:25 qattr [@-1,96:104='listMatch',<0>,169:94].[@-1,106:107='ma',<0>,169:104]
2022-03-20 08:14:22:177 action-translator LogManager.java:25 qattr [@-1,111:115='block',<0>,169:109].[@-1,117:119='blk',<0>,169:115]
2022-03-20 08:14:22:177 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:178 action-translator LogManager.java:25 translate 
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              
2022-03-20 08:14:22:178 action-translator LogManager.java:25 attr [@-1,20:21='ma',<0>,3:18]
2022-03-20 08:14:22:178 action-translator LogManager.java:25 attr [@-1,60:61='ma',<0>,4:18]
2022-03-20 08:14:22:178 action-translator LogManager.java:25 qattr [@-1,68:77='expression',<0>,4:26].[@-1,79:79='p',<0>,4:37]
2022-03-20 08:14:22:178 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:178 action-translator LogManager.java:25 translate 
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       
2022-03-20 08:14:22:178 action-translator LogManager.java:25 qattr [@-1,45:47='lma',<0>,9:43].[@-1,49:50='ma',<0>,9:47]
2022-03-20 08:14:22:178 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,9:55].[@-1,68:68='p',<0>,9:66]
2022-03-20 08:14:22:178 action-translator LogManager.java:25 attr [@-1,115:116='ma',<0>,10:43]
2022-03-20 08:14:22:179 action-translator LogManager.java:25 qattr [@-1,121:123='lma',<0>,10:49].[@-1,125:126='ma',<0>,10:53]
2022-03-20 08:14:22:179 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:179 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-03-20 08:14:22:179 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,185:33]
2022-03-20 08:14:22:180 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,185:41].[@-1,16:18='blk',<0>,185:47]
2022-03-20 08:14:22:180 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-03-20 08:14:22:180 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,186:51]
2022-03-20 08:14:22:180 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,186:59].[@-1,16:18='blk',<0>,186:65]
2022-03-20 08:14:22:180 action-translator LogManager.java:25 translate  $defa = arrayList.New() 
2022-03-20 08:14:22:180 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,187:4]
2022-03-20 08:14:22:181 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-03-20 08:14:22:181 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,191:35]
2022-03-20 08:14:22:181 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,191:63].[@-1,36:39='line',<0>,191:69]
2022-03-20 08:14:22:181 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,191:75].[@-1,48:50='pos',<0>,191:81]
2022-03-20 08:14:22:181 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,191:86].[@-1,64:64='l',<0>,191:97]
2022-03-20 08:14:22:182 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) 
2022-03-20 08:14:22:182 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,195:46]
2022-03-20 08:14:22:182 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,195:81].[@-1,41:44='line',<0>,195:85]
2022-03-20 08:14:22:182 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,195:92].[@-1,52:54='pos',<0>,195:96]
2022-03-20 08:14:22:182 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,195:102].[@-1,61:64='text',<0>,195:105]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,195:112].[@-1,74:75='ty',<0>,195:118]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,195:123].[@-1,90:90='p',<0>,195:134]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) 
2022-03-20 08:14:22:183 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,196:46]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,196:81].[@-1,41:44='line',<0>,196:85]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,196:92].[@-1,52:54='pos',<0>,196:96]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,196:102].[@-1,61:64='text',<0>,196:105]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,196:134].[@-1,101:101='p',<0>,196:145]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) 
2022-03-20 08:14:22:183 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,197:46]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,197:81].[@-1,41:44='line',<0>,197:85]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,197:92].[@-1,52:54='pos',<0>,197:96]
2022-03-20 08:14:22:183 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,197:102].[@-1,61:64='text',<0>,197:105]
2022-03-20 08:14:22:184 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,197:112].[@-1,74:75='ty',<0>,197:118]
2022-03-20 08:14:22:184 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,197:123].[@-1,90:90='p',<0>,197:134]
2022-03-20 08:14:22:184 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) 
2022-03-20 08:14:22:184 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,198:46]
2022-03-20 08:14:22:184 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,198:81].[@-1,41:44='line',<0>,198:85]
2022-03-20 08:14:22:185 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,198:92].[@-1,52:54='pos',<0>,198:96]
2022-03-20 08:14:22:185 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,198:102].[@-1,61:64='text',<0>,198:105]
2022-03-20 08:14:22:185 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,198:134].[@-1,101:101='p',<0>,198:145]
2022-03-20 08:14:22:185 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) 
2022-03-20 08:14:22:185 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,199:48]
2022-03-20 08:14:22:185 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,199:88].[@-1,46:49='line',<0>,199:92]
2022-03-20 08:14:22:185 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,199:99].[@-1,57:59='pos',<0>,199:103]
2022-03-20 08:14:22:186 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,199:109].[@-1,66:69='text',<0>,199:112]
2022-03-20 08:14:22:186 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,199:119].[@-1,83:83='t',<0>,199:129]
2022-03-20 08:14:22:186 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,199:133].[@-1,98:98='p',<0>,199:144]
2022-03-20 08:14:22:186 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) 
2022-03-20 08:14:22:186 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,200:46]
2022-03-20 08:14:22:186 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,200:86].[@-1,46:49='line',<0>,200:90]
2022-03-20 08:14:22:187 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,200:97].[@-1,57:59='pos',<0>,200:101]
2022-03-20 08:14:22:187 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,200:107].[@-1,66:69='text',<0>,200:110]
2022-03-20 08:14:22:187 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,200:117].[@-1,83:83='t',<0>,200:127]
2022-03-20 08:14:22:187 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,200:131].[@-1,98:98='p',<0>,200:142]
2022-03-20 08:14:22:188 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2022-03-20 08:14:22:188 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,204:46]
2022-03-20 08:14:22:188 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,204:76].[@-1,39:42='line',<0>,204:83]
2022-03-20 08:14:22:188 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,204:90].[@-1,53:55='pos',<0>,204:97]
2022-03-20 08:14:22:189 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,204:103].[@-1,62:65='text',<0>,204:106]
2022-03-20 08:14:22:189 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,204:113].[@-1,83:83='l',<0>,204:127]
2022-03-20 08:14:22:189 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:189 action-translator LogManager.java:25 translate 
                    StrDef := environment.NewStructType($ID.text, $types.ty)
                    $l = arrayList.New();
                    $l.Add(StrDef);
                
2022-03-20 08:14:22:190 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,3:57].[@-1,62:65='text',<0>,3:60]
2022-03-20 08:14:22:190 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,3:67].[@-1,75:76='ty',<0>,3:73]
2022-03-20 08:14:22:190 action-translator LogManager.java:25 setAttr [@-1,101:101='l',<0>,4:21] [@-1,104:119=' arrayList.New()',<0>,4:24]
2022-03-20 08:14:22:190 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-20 08:14:22:190 action-translator LogManager.java:25 attr [@-1,144:144='l',<0>,5:21]
2022-03-20 08:14:22:190 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:190 action-translator LogManager.java:25 translate 
                                                  StrDef := environment.NewStructType($ID.text, $types.ty)
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              
2022-03-20 08:14:22:190 action-translator LogManager.java:25 qattr [@-1,89:90='ID',<0>,10:87].[@-1,92:95='text',<0>,10:90]
2022-03-20 08:14:22:191 action-translator LogManager.java:25 qattr [@-1,99:103='types',<0>,10:97].[@-1,105:106='ty',<0>,10:103]
2022-03-20 08:14:22:191 action-translator LogManager.java:25 qattr [@-1,161:164='list',<0>,11:51].[@-1,166:166='l',<0>,11:56]
2022-03-20 08:14:22:191 action-translator LogManager.java:25 setAttr [@-1,233:233='l',<0>,12:51] [@-1,236:243=' $list.l',<0>,12:54]
2022-03-20 08:14:22:191 action-translator LogManager.java:25 translate  $list.l
2022-03-20 08:14:22:191 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:144].[@-1,7:7='l',<0>,9:149]
2022-03-20 08:14:22:191 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:192 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)
2022-03-20 08:14:22:192 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,221:24]
2022-03-20 08:14:22:192 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,221:58].[@-1,39:42='line',<0>,221:61]
2022-03-20 08:14:22:192 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,221:68].[@-1,49:51='pos',<0>,221:71]
2022-03-20 08:14:22:192 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,221:77].[@-1,58:61='text',<0>,221:80]
2022-03-20 08:14:22:192 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,221:87].[@-1,76:76='p',<0>,221:98]
2022-03-20 08:14:22:193 action-translator LogManager.java:25 translate  $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) 
2022-03-20 08:14:22:193 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,222:38]
2022-03-20 08:14:22:193 action-translator LogManager.java:25 qattr [@-1,38:53='listAccessStruct',<0>,222:74].[@-1,55:59='start',<0>,222:91]
2022-03-20 08:14:22:193 action-translator LogManager.java:25 qattr [@-1,72:87='listAccessStruct',<0>,222:108].[@-1,89:93='start',<0>,222:125]
2022-03-20 08:14:22:193 action-translator LogManager.java:25 qattr [@-1,109:124='listAccessStruct',<0>,222:145].[@-1,126:126='l',<0>,222:162]
2022-03-20 08:14:22:193 action-translator LogManager.java:25 qattr [@-1,130:139='expression',<0>,222:166].[@-1,141:141='p',<0>,222:177]
2022-03-20 08:14:22:193 action-translator LogManager.java:25 translate  $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) 
2022-03-20 08:14:22:194 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,223:40]
2022-03-20 08:14:22:194 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,223:75].[@-1,40:43='line',<0>,223:78]
2022-03-20 08:14:22:194 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,223:85].[@-1,50:52='pos',<0>,223:88]
2022-03-20 08:14:22:194 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,223:94].[@-1,59:62='text',<0>,223:97]
2022-03-20 08:14:22:194 action-translator LogManager.java:25 qattr [@-1,66:80='listAccessArray',<0>,223:104].[@-1,82:82='l',<0>,223:120]
2022-03-20 08:14:22:194 action-translator LogManager.java:25 qattr [@-1,86:95='expression',<0>,223:124].[@-1,97:97='p',<0>,223:135]
2022-03-20 08:14:22:194 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:195 action-translator LogManager.java:25 translate 
    $l = arrayList.New()
    $l.Add($ID.text)

2022-03-20 08:14:22:195 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,3:5]
2022-03-20 08:14:22:195 action-translator LogManager.java:25 attr [@-1,33:33='l',<0>,4:5]
2022-03-20 08:14:22:195 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,4:12].[@-1,43:46='text',<0>,4:15]
2022-03-20 08:14:22:195 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:195 action-translator LogManager.java:25 translate 
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            
2022-03-20 08:14:22:195 action-translator LogManager.java:25 qattr [@-1,48:51='list',<0>,9:46].[@-1,53:53='l',<0>,9:51]
2022-03-20 08:14:22:196 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,9:58].[@-1,63:66='text',<0>,9:61]
2022-03-20 08:14:22:196 action-translator LogManager.java:25 attr [@-1,116:116='l',<0>,10:46]
2022-03-20 08:14:22:196 action-translator LogManager.java:25 qattr [@-1,121:124='list',<0>,10:51].[@-1,126:126='l',<0>,10:56]
2022-03-20 08:14:22:196 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:197 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:197 action-translator LogManager.java:25 translate 
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          
2022-03-20 08:14:22:197 action-translator LogManager.java:25 attr [@-1,33:33='l',<0>,3:31]
2022-03-20 08:14:22:197 action-translator LogManager.java:25 attr [@-1,85:85='l',<0>,4:31]
2022-03-20 08:14:22:197 action-translator LogManager.java:25 qattr [@-1,92:101='expression',<0>,4:38].[@-1,103:103='p',<0>,4:49]
2022-03-20 08:14:22:197 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:197 action-translator LogManager.java:25 translate 
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           
2022-03-20 08:14:22:197 action-translator LogManager.java:25 qattr [@-1,63:66='list',<0>,9:61].[@-1,68:68='l',<0>,9:66]
2022-03-20 08:14:22:197 action-translator LogManager.java:25 qattr [@-1,75:84='expression',<0>,9:73].[@-1,86:86='p',<0>,9:84]
2022-03-20 08:14:22:198 action-translator LogManager.java:25 attr [@-1,151:151='l',<0>,10:61]
2022-03-20 08:14:22:198 action-translator LogManager.java:25 qattr [@-1,156:159='list',<0>,10:66].[@-1,161:161='l',<0>,10:71]
2022-03-20 08:14:22:198 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:198 action-translator LogManager.java:25 translate 
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        
2022-03-20 08:14:22:199 action-translator LogManager.java:25 qattr [@-1,98:107='expression',<0>,250:96].[@-1,109:109='p',<0>,250:107]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 qattr [@-1,153:161='arrayType',<0>,251:40].[@-1,163:163='t',<0>,251:50]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 attr [@-1,219:219='t',<0>,252:40]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 qattr [@-1,224:232='arrayType',<0>,252:45].[@-1,234:234='t',<0>,252:55]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 translate 
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         
2022-03-20 08:14:22:199 action-translator LogManager.java:25 attr [@-1,31:31='t',<0>,255:29]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 qattr [@-1,117:121='types',<0>,256:65].[@-1,123:124='ty',<0>,256:71]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 qattr [@-1,128:137='expression',<0>,256:76].[@-1,139:139='p',<0>,256:87]
2022-03-20 08:14:22:199 action-translator LogManager.java:25 attr [@-1,172:172='t',<0>,257:29]
2022-03-20 08:14:22:200 action-translator LogManager.java:25 translate 
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
                        
2022-03-20 08:14:22:200 action-translator LogManager.java:25 attr [@-1,27:29='fun',<0>,263:25]
2022-03-20 08:14:22:200 action-translator LogManager.java:25 qattr [@-1,59:62='FUNC',<0>,263:57].[@-1,64:67='line',<0>,263:62]
2022-03-20 08:14:22:201 action-translator LogManager.java:25 qattr [@-1,71:74='FUNC',<0>,263:69].[@-1,76:78='pos',<0>,263:74]
2022-03-20 08:14:22:201 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,263:80].[@-1,85:88='text',<0>,263:83]
2022-03-20 08:14:22:201 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,263:90].[@-1,107:109='lpf',<0>,263:105]
2022-03-20 08:14:22:201 action-translator LogManager.java:25 qattr [@-1,131:135='block',<0>,263:129].[@-1,137:139='blk',<0>,263:135]
2022-03-20 08:14:22:201 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
                       
2022-03-20 08:14:22:201 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,266:24]
2022-03-20 08:14:22:201 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,266:56].[@-1,63:66='line',<0>,266:61]
2022-03-20 08:14:22:202 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,266:68].[@-1,75:77='pos',<0>,266:73]
2022-03-20 08:14:22:202 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,266:79].[@-1,84:87='text',<0>,266:82]
2022-03-20 08:14:22:202 action-translator LogManager.java:25 qattr [@-1,91:104='listParamsFunc',<0>,266:89].[@-1,106:108='lpf',<0>,266:104]
2022-03-20 08:14:22:202 action-translator LogManager.java:25 qattr [@-1,112:116='types',<0>,266:110].[@-1,118:119='ty',<0>,266:116]
2022-03-20 08:14:22:202 action-translator LogManager.java:25 qattr [@-1,123:127='block',<0>,266:121].[@-1,129:131='blk',<0>,266:127]
2022-03-20 08:14:22:203 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:203 action-translator LogManager.java:25 translate 
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                $lpf.Add(newParam)
             
2022-03-20 08:14:22:203 action-translator LogManager.java:25 attr [@-1,19:21='lpf',<0>,3:17]
2022-03-20 08:14:22:203 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:63].[@-1,108:111='line',<0>,4:66]
2022-03-20 08:14:22:203 action-translator LogManager.java:25 qattr [@-1,115:116='ID',<0>,4:73].[@-1,118:120='pos',<0>,4:76]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 qattr [@-1,124:125='ID',<0>,4:82].[@-1,127:130='text',<0>,4:85]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 qattr [@-1,134:138='types',<0>,4:92].[@-1,140:141='ty',<0>,4:98]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 attr [@-1,162:164='lpf',<0>,5:17]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                 $lpf.Add(newParam)
              
2022-03-20 08:14:22:204 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,8:18]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,9:64].[@-1,110:113='line',<0>,9:67]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,9:74].[@-1,120:122='pos',<0>,9:77]
2022-03-20 08:14:22:204 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,9:83].[@-1,129:132='text',<0>,9:86]
2022-03-20 08:14:22:205 action-translator LogManager.java:25 attr [@-1,173:175='lpf',<0>,10:18]
2022-03-20 08:14:22:205 action-translator LogManager.java:25 translate  $lpf = arrayList.New() 
2022-03-20 08:14:22:205 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,12:12]
2022-03-20 08:14:22:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-20 08:14:22:205 action-translator LogManager.java:25 translate 
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              
2022-03-20 08:14:22:205 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,16:76].[@-1,81:84='line',<0>,16:79]
2022-03-20 08:14:22:205 action-translator LogManager.java:25 qattr [@-1,88:89='ID',<0>,16:86].[@-1,91:93='pos',<0>,16:89]
2022-03-20 08:14:22:205 action-translator LogManager.java:25 qattr [@-1,97:98='ID',<0>,16:95].[@-1,100:103='text',<0>,16:98]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,107:111='types',<0>,16:105].[@-1,113:114='ty',<0>,16:111]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,148:151='list',<0>,17:30].[@-1,153:155='lpf',<0>,17:35]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 attr [@-1,202:204='lpf',<0>,18:30]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,209:212='list',<0>,18:37].[@-1,214:216='lpf',<0>,18:42]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-20 08:14:22:206 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,21:70].[@-1,75:78='line',<0>,21:73]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,21:80].[@-1,85:87='pos',<0>,21:83]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,21:89].[@-1,94:97='text',<0>,21:92]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 qattr [@-1,144:147='list',<0>,22:24].[@-1,149:151='lpf',<0>,22:29]
2022-03-20 08:14:22:206 action-translator LogManager.java:25 attr [@-1,192:194='lpf',<0>,23:24]
2022-03-20 08:14:22:207 action-translator LogManager.java:25 qattr [@-1,199:202='list',<0>,23:31].[@-1,204:206='lpf',<0>,23:36]
2022-03-20 08:14:22:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-20 08:14:22:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-20 08:14:22:208 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-03-20 08:14:22:208 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,299:8]
2022-03-20 08:14:22:208 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-03-20 08:14:22:208 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,300:10]
2022-03-20 08:14:22:208 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-03-20 08:14:22:208 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,301:9]
2022-03-20 08:14:22:208 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-03-20 08:14:22:208 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,302:9]
2022-03-20 08:14:22:208 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-03-20 08:14:22:208 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,303:9]
2022-03-20 08:14:22:208 action-translator LogManager.java:25 translate  $ty = environment.STR 
2022-03-20 08:14:22:209 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,304:9]
2022-03-20 08:14:22:209 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-03-20 08:14:22:209 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,305:11]
2022-03-20 08:14:22:209 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-03-20 08:14:22:209 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,306:11]
2022-03-20 08:14:22:209 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:209 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-03-20 08:14:22:210 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:210 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-03-20 08:14:22:210 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-03-20 08:14:22:210 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:211 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:211 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-03-20 08:14:22:212 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:42]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,2:47].[@-1,17:17='p',<0>,2:57]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-03-20 08:14:22:212 action-translator LogManager.java:25 translate  $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) 
2022-03-20 08:14:22:212 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:145]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 qattr [@-1,28:33='expuno',<0>,5:171].[@-1,35:39='start',<0>,5:178]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 qattr [@-1,52:57='expuno',<0>,5:195].[@-1,59:63='start',<0>,5:202]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 qattr [@-1,79:84='expuno',<0>,5:222].[@-1,86:86='p',<0>,5:229]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 qattr [@-1,90:95='expdos',<0>,5:233].[@-1,97:97='p',<0>,5:240]
2022-03-20 08:14:22:212 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-03-20 08:14:22:213 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-03-20 08:14:22:213 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,326:42]
2022-03-20 08:14:22:213 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,326:71].[@-1,34:37='line',<0>,326:74]
2022-03-20 08:14:22:213 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,326:81].[@-1,44:46='pos',<0>,326:84]
2022-03-20 08:14:22:213 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,326:90].[@-1,53:56='text',<0>,326:93]
2022-03-20 08:14:22:214 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,326:100].[@-1,75:75='l',<0>,326:115]
2022-03-20 08:14:22:214 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-03-20 08:14:22:214 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,327:42]
2022-03-20 08:14:22:214 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,327:71].[@-1,34:37='line',<0>,327:74]
2022-03-20 08:14:22:214 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,327:81].[@-1,44:46='pos',<0>,327:84]
2022-03-20 08:14:22:214 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,327:90].[@-1,53:56='text',<0>,327:93]
2022-03-20 08:14:22:214 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,327:100].[@-1,75:75='l',<0>,327:115]
2022-03-20 08:14:22:215 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:215 action-translator LogManager.java:25 translate $p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)
2022-03-20 08:14:22:216 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:72]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:102].[@-1,35:38='line',<0>,2:106]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:112].[@-1,45:47='pos',<0>,2:116]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:121].[@-1,55:55='p',<0>,2:126]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 translate $p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)
2022-03-20 08:14:22:216 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:68]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:98].[@-1,35:38='line',<0>,3:102]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,41:43='NOT',<0>,3:108].[@-1,45:47='pos',<0>,3:112]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,3:117].[@-1,55:55='p',<0>,3:122]
2022-03-20 08:14:22:216 action-translator LogManager.java:25 qattr [@-1,58:60='NOT',<0>,3:125].[@-1,62:65='text',<0>,3:129]
2022-03-20 08:14:22:217 action-translator LogManager.java:25 translate  $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2022-03-20 08:14:22:217 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:88]
2022-03-20 08:14:22:217 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:114].[@-1,35:38='line',<0>,4:121]
2022-03-20 08:14:22:217 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:128].[@-1,49:51='pos',<0>,4:135]
2022-03-20 08:14:22:217 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:141].[@-1,66:66='l',<0>,4:152]
2022-03-20 08:14:22:217 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-03-20 08:14:22:217 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:88]
2022-03-20 08:14:22:217 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,5:93].[@-1,18:18='p',<0>,5:104]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 translate  $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2022-03-20 08:14:22:218 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:115]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,6:145].[@-1,35:38='line',<0>,6:148]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,6:155].[@-1,45:47='pos',<0>,6:158]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,6:164].[@-1,54:57='text',<0>,6:167]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,6:174].[@-1,75:75='l',<0>,6:188]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-03-20 08:14:22:218 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:42]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,7:47].[@-1,20:21='cf',<0>,7:60]
2022-03-20 08:14:22:218 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-03-20 08:14:22:218 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:39]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,8:44].[@-1,17:17='p',<0>,8:54]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 translate  $p = $condIf.ifCond 
2022-03-20 08:14:22:219 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:36]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 qattr [@-1,7:12='condIf',<0>,9:41].[@-1,14:19='ifCond',<0>,9:48]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 translate  $p = $condMatch.mtch 
2022-03-20 08:14:22:219 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:39]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 qattr [@-1,7:15='condMatch',<0>,10:44].[@-1,17:20='mtch',<0>,10:54]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 translate  $p = $loopBucle.lb 
2022-03-20 08:14:22:219 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:39]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 qattr [@-1,7:15='loopBucle',<0>,11:44].[@-1,17:18='lb',<0>,11:54]
2022-03-20 08:14:22:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-03-20 08:14:22:220 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-20 08:14:22:220 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,14:166]
2022-03-20 08:14:22:220 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,14:196].[@-1,36:40='start',<0>,14:201]
2022-03-20 08:14:22:220 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,14:218].[@-1,58:62='start',<0>,14:223]
2022-03-20 08:14:22:220 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,14:242].[@-1,82:82='p',<0>,14:247]
2022-03-20 08:14:22:220 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,14:250].[@-1,88:91='text',<0>,14:253]
2022-03-20 08:14:22:220 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,14:259].[@-1,99:99='p',<0>,14:264]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-03-20 08:14:22:221 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-20 08:14:22:221 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:155]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,15:185].[@-1,36:40='start',<0>,15:190]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,15:207].[@-1,58:62='start',<0>,15:212]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,15:231].[@-1,82:82='p',<0>,15:236]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,15:239].[@-1,88:91='text',<0>,15:242]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,15:248].[@-1,99:99='p',<0>,15:253]
2022-03-20 08:14:22:221 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-20 08:14:22:222 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-20 08:14:22:222 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:265]
2022-03-20 08:14:22:222 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,16:295].[@-1,36:40='start',<0>,16:300]
2022-03-20 08:14:22:222 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,16:317].[@-1,58:62='start',<0>,16:322]
2022-03-20 08:14:22:222 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,16:341].[@-1,82:82='p',<0>,16:346]
2022-03-20 08:14:22:222 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,16:349].[@-1,88:91='text',<0>,16:352]
2022-03-20 08:14:22:222 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,16:358].[@-1,99:99='p',<0>,16:363]
2022-03-20 08:14:22:222 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-03-20 08:14:22:222 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-03-20 08:14:22:222 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-20 08:14:22:223 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        
2022-03-20 08:14:22:223 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,348:34].[@-1,43:46='text',<0>,348:41]
2022-03-20 08:14:22:223 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,349:47].[@-1,110:113='text',<0>,349:54]
2022-03-20 08:14:22:223 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,353:17]
2022-03-20 08:14:22:223 action-translator LogManager.java:25 qattr [@-1,257:262='NUMBER',<0>,353:47].[@-1,264:267='line',<0>,353:54]
2022-03-20 08:14:22:223 action-translator LogManager.java:25 qattr [@-1,270:275='NUMBER',<0>,353:60].[@-1,277:279='pos',<0>,353:67]
2022-03-20 08:14:22:223 action-translator LogManager.java:25 qattr [@-1,366:371='NUMBER',<0>,355:41].[@-1,373:376='text',<0>,355:48]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 attr [@-1,485:485='p',<0>,359:17]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 qattr [@-1,515:520='NUMBER',<0>,359:47].[@-1,522:525='line',<0>,359:54]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 qattr [@-1,528:533='NUMBER',<0>,359:60].[@-1,535:537='pos',<0>,359:67]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 translate  $p = $stringTypes.st  
2022-03-20 08:14:22:224 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,362:19]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 qattr [@-1,7:17='stringTypes',<0>,362:24].[@-1,19:20='st',<0>,362:36]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,$CHARACTER.text,environment.CHAR) 
2022-03-20 08:14:22:224 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,363:14]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 qattr [@-1,32:40='CHARACTER',<0>,363:44].[@-1,42:45='line',<0>,363:54]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 qattr [@-1,49:57='CHARACTER',<0>,363:61].[@-1,59:61='pos',<0>,363:71]
2022-03-20 08:14:22:224 action-translator LogManager.java:25 qattr [@-1,64:72='CHARACTER',<0>,363:76].[@-1,74:77='text',<0>,363:86]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) 
2022-03-20 08:14:22:225 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,364:8]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,364:38].[@-1,36:39='line',<0>,364:42]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,364:49].[@-1,47:49='pos',<0>,364:53]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) 
2022-03-20 08:14:22:225 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,365:8]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,365:38].[@-1,36:39='line',<0>,365:42]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,365:49].[@-1,47:49='pos',<0>,365:53]
2022-03-20 08:14:22:225 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-20 08:14:22:225 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,366:19]
2022-03-20 08:14:22:226 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,366:24].[@-1,12:12='p',<0>,366:29]
2022-03-20 08:14:22:226 action-translator LogManager.java:25 translate 
                                     str := $STRING.text
                                     $st = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STRING)
                                 
2022-03-20 08:14:22:226 action-translator LogManager.java:25 qattr [@-1,47:52='STRING',<0>,371:45].[@-1,54:57='text',<0>,371:52]
2022-03-20 08:14:22:226 action-translator LogManager.java:25 attr [@-1,98:99='st',<0>,372:38]
2022-03-20 08:14:22:226 action-translator LogManager.java:25 qattr [@-1,129:134='STRING',<0>,372:69].[@-1,136:139='line',<0>,372:76]
2022-03-20 08:14:22:227 action-translator LogManager.java:25 qattr [@-1,143:148='STRING',<0>,372:83].[@-1,150:152='pos',<0>,372:90]
2022-03-20 08:14:22:227 action-translator LogManager.java:25 translate 
              str := $STRING.text
              $st = expressions.NewPrimitive($AMP.line, $AMP.pos,str[1:len(str)-1],environment.STR)
          
2022-03-20 08:14:22:227 action-translator LogManager.java:25 qattr [@-1,24:29='STRING',<0>,375:22].[@-1,31:34='text',<0>,375:29]
2022-03-20 08:14:22:227 action-translator LogManager.java:25 attr [@-1,52:53='st',<0>,376:15]
2022-03-20 08:14:22:227 action-translator LogManager.java:25 qattr [@-1,83:85='AMP',<0>,376:46].[@-1,87:90='line',<0>,376:50]
2022-03-20 08:14:22:227 action-translator LogManager.java:25 qattr [@-1,94:96='AMP',<0>,376:57].[@-1,98:100='pos',<0>,376:61]
2022-03-20 08:14:22:228 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:228 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2022-03-20 08:14:22:228 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2022-03-20 08:14:22:228 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2022-03-20 08:14:22:228 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2022-03-20 08:14:22:228 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2022-03-20 08:14:22:228 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-20 08:14:22:229 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) 
2022-03-20 08:14:22:229 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:136]
2022-03-20 08:14:22:229 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:168].[@-1,39:43='start',<0>,5:173]
2022-03-20 08:14:22:229 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:191].[@-1,62:66='start',<0>,5:196]
2022-03-20 08:14:22:229 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:216].[@-1,87:87='p',<0>,5:221]
2022-03-20 08:14:22:229 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,5:225].[@-1,102:102='p',<0>,5:236]
2022-03-20 08:14:22:230 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:230 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2022-03-20 08:14:22:230 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2022-03-20 08:14:22:230 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2022-03-20 08:14:22:230 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2022-03-20 08:14:22:230 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2022-03-20 08:14:22:230 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2022-03-20 08:14:22:230 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-20 08:14:22:230 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:231 action-translator LogManager.java:25 translate 
2022-03-20 08:14:22:231 action-translator LogManager.java:25 translate 
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                
2022-03-20 08:14:22:231 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,3:60].[@-1,65:68='text',<0>,3:63]
2022-03-20 08:14:22:231 action-translator LogManager.java:25 qattr [@-1,72:81='expression',<0>,3:70].[@-1,83:83='p',<0>,3:81]
2022-03-20 08:14:22:231 action-translator LogManager.java:25 setAttr [@-1,108:108='l',<0>,4:21] [@-1,111:126=' arrayList.New()',<0>,4:24]
2022-03-20 08:14:22:231 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-20 08:14:22:231 action-translator LogManager.java:25 attr [@-1,151:151='l',<0>,5:21]
2022-03-20 08:14:22:231 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:232 action-translator LogManager.java:25 translate 
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              
2022-03-20 08:14:22:232 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,10:90].[@-1,95:98='text',<0>,10:93]
2022-03-20 08:14:22:232 action-translator LogManager.java:25 qattr [@-1,102:111='expression',<0>,10:100].[@-1,113:113='p',<0>,10:111]
2022-03-20 08:14:22:232 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,11:51].[@-1,173:173='l',<0>,11:56]
2022-03-20 08:14:22:232 action-translator LogManager.java:25 setAttr [@-1,240:240='l',<0>,12:51] [@-1,243:250=' $list.l',<0>,12:54]
2022-03-20 08:14:22:232 action-translator LogManager.java:25 translate  $list.l
2022-03-20 08:14:22:232 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:153].[@-1,7:7='l',<0>,9:158]
2022-03-20 08:14:22:232 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-20 08:14:22:569 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-20 08:14:22:570 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-20 08:14:22:692 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-20 08:14:22:692 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

