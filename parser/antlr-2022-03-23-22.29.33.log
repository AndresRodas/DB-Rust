2022-03-23 22:29:31:089 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module { $hi = $module.mod }) (ALT structCreation { $hi = $structCreation.dec }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER { $mod = instructions.NewModule($MODULE.line, $MODULE.pos, $ID.text, $moduleContent.m ) }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {
                                    newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                    $mc.m.Add(newObj)
                                    $m = $mc.m
                                 }) (ALT (= mc moduleContent) PUB moduleAction {
                                       newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                       $mc.m.Add(newObj)
                                       $m = $mc.m
                                    }) (ALT (= mc moduleContent) module {
                              newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                              $mc.m.Add(newObj)
                              $m = $mc.m
                           }) (ALT (= mc moduleContent) moduleAction {
                                newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                $mc.m.Add(newObj)
                                $m = $mc.m
                             }) (ALT PUB module {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               }) (ALT PUB moduleAction {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  }) (ALT module {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            }) (ALT moduleAction {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { $ma = $function.fun }) (ALT structCreation { $ma = $structCreation.dec }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { $iv = instructions.NewPush($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $iv = instructions.NewInsert($ID.line, $ID.pos, $ID.text, $exp1.p, $exp2.p) }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER { $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) }))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ instructions LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }) (ALT RETURN expression { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        }))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         }) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        }))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {
                                $lma.ma.Add($expression.p)
                                $ma = $lma.ma
                             }) (ALT expression {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false, nil, "") }) (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false, nil, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, true, nil, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true, nil, "") }) (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false, $expression.p, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, true, $expression.p, "") }) (ALT LET (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, false, nil, $id2.text) }) (ALT LET (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, $expression.p, false, nil, $id2.text) }) (ALT LET MUT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, true, nil, $id2.text) }) (ALT LET MUT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, $expression.p, true, nil, $id2.text) }) (ALT LET (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, false, $expression.p, $id2.text) }) (ALT LET MUT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, true, $expression.p, $id2.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {
                                        StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                        $list.l.Add(StrDef);
                                        $l = $list.l;
                                    }) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {
                                          StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                          $list.l.Add(StrDef);
                                          $l = $list.l;
                                      }) (ALT (= id1 ID) D_PTS types {
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }) (ALT (= id1 ID) D_PTS (= id2 ID) {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) }) (ALT ID listAccessArray IGUAL expression { $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) }))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
    $l = arrayList.New()
    $l.Add($ID.text)
}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                                 }) (ALT CORIZQ expression CORDER {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        }) (ALT CORIZQ types PYC expression CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT ID D_PTS arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { $lv = expressions.NewVectorList($exp1.start.GetLine(),$exp1.start.GetColumn(), $exp1.p, $exp2.p) }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IG_IG) (ALT DIFERENTE))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT VECTOR1 NOT CORIZQ listParams CORDER { $p = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l) }) (ALT VECTOR1 NOT CORIZQ listVec CORDER { $p = $listVec.lv }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT primitive { $p = $primitive.p }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT expVectors { $p = $expVectors.ev }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT stringTypes { $p = $stringTypes.st  }) (ALT CHARACTER { $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,$CHARACTER.text,environment.CHAR) }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE stringTypes (returns interfaces.Expression st) (BLOCK (ALT STRING PUNTO (= fnc (BLOCK (ALT TOSTR) (ALT TOOWN))) {
                                     str := $STRING.text
                                     $st = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STRING)
                                 }) (ALT (* (BLOCK (ALT AMP))) STRING (* (BLOCK (ALT PUNTO TOSTR) (ALT PUNTO TOOWN))) {
              str := $STRING.text
              $st = expressions.NewPrimitive($AMP.line, $AMP.pos,str[1:len(str)-1],environment.STR)
          }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {
                                        StrExp := environment.NewStructContent($ID.text, $expression.p)
                                        $list.l.Add(StrExp);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS expression {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                }))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expression PARDER { $ev = expressions.NewRemove($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO CONTAINS PARIZQ AMP expression PARDER { $ev = expressions.NewContains($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO LEN PARIZQ PARDER { $ev = expressions.NewLen($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { $ev = expressions.NewCapacity($ID.line, $ID.pos, $ID.text) }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { $cm = expressions.NewModuleAccess($listIdMod.start.GetLine(),$listIdMod.start.GetColumn(), $listIdMod.l, $expression.p ) }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {
                              $list.l.Add($ID.text)
                              $l = $list.l
                           }) (ALT ID C_PTS {
               $l = arrayList.New()
               $l.Add($ID.text)
            })))))
2022-03-23 22:29:31:123 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module { $hi = $module.mod }) (ALT structCreation { $hi = $structCreation.dec }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER { $mod = instructions.NewModule($MODULE.line, $MODULE.pos, $ID.text, $moduleContent.m ) }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {
                                    newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                    $mc.m.Add(newObj)
                                    $m = $mc.m
                                 }) (ALT (= mc moduleContent) PUB moduleAction {
                                       newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                       $mc.m.Add(newObj)
                                       $m = $mc.m
                                    }) (ALT (= mc moduleContent) module {
                              newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                              $mc.m.Add(newObj)
                              $m = $mc.m
                           }) (ALT (= mc moduleContent) moduleAction {
                                newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                $mc.m.Add(newObj)
                                $m = $mc.m
                             }) (ALT PUB module {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               }) (ALT PUB moduleAction {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  }) (ALT module {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            }) (ALT moduleAction {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { $ma = $function.fun }) (ALT structCreation { $ma = $structCreation.dec }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { $iv = instructions.NewPush($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $iv = instructions.NewInsert($ID.line, $ID.pos, $ID.text, $exp1.p, $exp2.p) }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER { $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) }))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ instructions LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }) (ALT RETURN expression { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        }))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         }) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        }))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {
                                $lma.ma.Add($expression.p)
                                $ma = $lma.ma
                             }) (ALT expression {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false, nil, "") }) (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false, nil, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, true, nil, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true, nil, "") }) (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false, $expression.p, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, true, $expression.p, "") }) (ALT LET (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, false, nil, $id2.text) }) (ALT LET (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, $expression.p, false, nil, $id2.text) }) (ALT LET MUT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS NEW PARIZQ PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, true, nil, $id2.text) }) (ALT LET MUT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, $expression.p, true, nil, $id2.text) }) (ALT LET (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, false, $expression.p, $id2.text) }) (ALT LET MUT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, true, $expression.p, $id2.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {
                                        StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                        $list.l.Add(StrDef);
                                        $l = $list.l;
                                    }) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {
                                          StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                          $list.l.Add(StrDef);
                                          $l = $list.l;
                                      }) (ALT (= id1 ID) D_PTS types {
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }) (ALT (= id1 ID) D_PTS (= id2 ID) {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) }) (ALT ID listAccessArray IGUAL expression { $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) }))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
    $l = arrayList.New()
    $l.Add($ID.text)
}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                                 }) (ALT CORIZQ expression CORDER {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        }) (ALT CORIZQ types PYC expression CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT ID D_PTS arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { $lv = expressions.NewVectorList($exp1.start.GetLine(),$exp1.start.GetColumn(), $exp1.p, $exp2.p) }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (SET MUL DIV MOD)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IG_IG DIFERENTE)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT VECTOR1 NOT CORIZQ listParams CORDER { $p = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l) }) (ALT VECTOR1 NOT CORIZQ listVec CORDER { $p = $listVec.lv }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT primitive { $p = $primitive.p }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT expVectors { $p = $expVectors.ev }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT stringTypes { $p = $stringTypes.st  }) (ALT CHARACTER { $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,$CHARACTER.text,environment.CHAR) }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE stringTypes (returns interfaces.Expression st) (BLOCK (ALT STRING PUNTO (= fnc (SET TOSTR TOOWN)) {
                                     str := $STRING.text
                                     $st = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STRING)
                                 }) (ALT (* (BLOCK (ALT AMP))) STRING (* (BLOCK (ALT PUNTO TOSTR) (ALT PUNTO TOOWN))) {
              str := $STRING.text
              $st = expressions.NewPrimitive($AMP.line, $AMP.pos,str[1:len(str)-1],environment.STR)
          }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {
                                        StrExp := environment.NewStructContent($ID.text, $expression.p)
                                        $list.l.Add(StrExp);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS expression {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                }))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expression PARDER { $ev = expressions.NewRemove($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO CONTAINS PARIZQ AMP expression PARDER { $ev = expressions.NewContains($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO LEN PARIZQ PARDER { $ev = expressions.NewLen($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { $ev = expressions.NewCapacity($ID.line, $ID.pos, $ID.text) }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { $cm = expressions.NewModuleAccess($listIdMod.start.GetLine(),$listIdMod.start.GetColumn(), $listIdMod.l, $expression.p ) }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {
                              $list.l.Add($ID.text)
                              $l = $list.l
                           }) (ALT ID C_PTS {
               $l = arrayList.New()
               $l.Add($ID.text)
            })))))
2022-03-23 22:29:31:323 left-recursion LogManager.java:25 moduleContent returns [*arrayList.List m]
    :   ( {} PUB<tokenIndex=153> module<tokenIndex=155> {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               } 
        | PUB<tokenIndex=161> moduleAction<tokenIndex=163> {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  } 
        | module<tokenIndex=169> {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            } 
        | moduleAction<tokenIndex=175> {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> PUB<tokenIndex=113> module<tokenIndex=115> {
                                              newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                              $mc.m.Add(newObj)
                                              $m = $mc.m
                                           }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUB<tokenIndex=125> moduleAction<tokenIndex=127> {
                                                 newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                                 $mc.m.Add(newObj)
                                                 $m = $mc.m
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> module<tokenIndex=137> {
                                        newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                                        $mc.m.Add(newObj)
                                        $m = $mc.m
                                     }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> moduleAction<tokenIndex=147> {
                                          newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                          $mc.m.Add(newObj)
                                          $m = $mc.m
                                       }
        )*
    ;
2022-03-23 22:29:31:330 grammar LogManager.java:25 added: (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (BLOCK (ALT {} (PUB (ELEMENT_OPTIONS (= tokenIndex 153))) (module (ELEMENT_OPTIONS (= tokenIndex 155))) {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               }) (ALT (PUB (ELEMENT_OPTIONS (= tokenIndex 161))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 163))) {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  }) (ALT (module (ELEMENT_OPTIONS (= tokenIndex 169))) {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            }) (ALT (moduleAction (ELEMENT_OPTIONS (= tokenIndex 175))) {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (PUB (ELEMENT_OPTIONS (= tokenIndex 113))) (module (ELEMENT_OPTIONS (= tokenIndex 115))) {
                                              newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                              $mc.m.Add(newObj)
                                              $m = $mc.m
                                           }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUB (ELEMENT_OPTIONS (= tokenIndex 125))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 127))) {
                                                 newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                                 $mc.m.Add(newObj)
                                                 $m = $mc.m
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (module (ELEMENT_OPTIONS (= tokenIndex 137))) {
                                        newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                                        $mc.m.Add(newObj)
                                        $m = $mc.m
                                     }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 147))) {
                                          newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                          $mc.m.Add(newObj)
                                          $m = $mc.m
                                       }))))))
2022-03-23 22:29:31:387 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=426> {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              } 
        | AMP<tokenIndex=432> MUT<tokenIndex=434> expression<tokenIndex=436> {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     } 
        | {
          $l = arrayList.New()
       } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=403> expression<tokenIndex=405>{
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=414> AMP<tokenIndex=416> MUT<tokenIndex=418> expression<tokenIndex=420> {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }
        )*
    ;
2022-03-23 22:29:31:391 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 426))) {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 432))) (MUT (ELEMENT_OPTIONS (= tokenIndex 434))) (expression (ELEMENT_OPTIONS (= tokenIndex 436))) {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 403))) (expression (ELEMENT_OPTIONS (= tokenIndex 405))) {
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 414))) (AMP (ELEMENT_OPTIONS (= tokenIndex 416))) (MUT (ELEMENT_OPTIONS (= tokenIndex 418))) (expression (ELEMENT_OPTIONS (= tokenIndex 420))) {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }))))))
2022-03-23 22:29:31:442 left-recursion LogManager.java:25 block returns [*arrayList.List blk]
    :   ( {} instruction<tokenIndex=690> { $blk.Add($instruction.inst) } 
        | expression<tokenIndex=696> { $blk.Add($expression.p) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> instruction<tokenIndex=674> {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> expression<tokenIndex=684> {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }
        )*
    ;
2022-03-23 22:29:31:444 grammar LogManager.java:25 added: (RULE block (returns *arrayList.List blk) (BLOCK (ALT (BLOCK (ALT {} (instruction (ELEMENT_OPTIONS (= tokenIndex 690))) { $blk.Add($instruction.inst) }) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 696))) { $blk.Add($expression.p) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (instruction (ELEMENT_OPTIONS (= tokenIndex 674))) {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (expression (ELEMENT_OPTIONS (= tokenIndex 684))) {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }))))))
2022-03-23 22:29:31:476 left-recursion LogManager.java:25 listMatch returns [*arrayList.List ma]
    :   ( {} expression<tokenIndex=783> {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PLEC<tokenIndex=775> expression<tokenIndex=777> {
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       }
        )*
    ;
2022-03-23 22:29:31:477 grammar LogManager.java:25 added: (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 783))) {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PLEC (ELEMENT_OPTIONS (= tokenIndex 775))) (expression (ELEMENT_OPTIONS (= tokenIndex 777))) {
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       }))))))
2022-03-23 22:29:31:508 left-recursion LogManager.java:25 listStructDec returns [*arrayList.List l]
    :   ( {} id1=ID<tokenIndex=1403> D_PTS<tokenIndex=1405> types<tokenIndex=1407>{
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                } 
        | id1=ID<tokenIndex=1414> D_PTS<tokenIndex=1416> id2=ID<tokenIndex=1420> {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=1367> id1=ID<tokenIndex=1371> D_PTS<tokenIndex=1373> types<tokenIndex=1375> {
                                                  StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1385> id1=ID<tokenIndex=1389> D_PTS<tokenIndex=1391> id2=ID<tokenIndex=1395> {
                                                    StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                                    $list.l.Add(StrDef);
                                                    $l = $list.l;
                                                }
        )*
    ;
2022-03-23 22:29:31:511 grammar LogManager.java:25 added: (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1403)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1405))) (types (ELEMENT_OPTIONS (= tokenIndex 1407))) {
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1414)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1416))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1420)))) {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1367))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1371)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1373))) (types (ELEMENT_OPTIONS (= tokenIndex 1375))) {
                                                  StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1385))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1389)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1391))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1395)))) {
                                                    StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                                    $list.l.Add(StrDef);
                                                    $l = $list.l;
                                                }))))))
2022-03-23 22:29:31:539 left-recursion LogManager.java:25 listAccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1485> {
    $l = arrayList.New()
    $l.Add($ID.text)
} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1477> ID<tokenIndex=1479> {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }
        )*
    ;
2022-03-23 22:29:31:540 grammar LogManager.java:25 added: (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1485))) {
    $l = arrayList.New()
    $l.Add($ID.text)
})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1477))) (ID (ELEMENT_OPTIONS (= tokenIndex 1479))) {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }))))))
2022-03-23 22:29:31:560 left-recursion LogManager.java:25 listAccessArray returns [*arrayList.List l]
    :   ( {} CORIZQ<tokenIndex=1511> expression<tokenIndex=1513> CORDER<tokenIndex=1515>{
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1502> expression<tokenIndex=1504> CORDER<tokenIndex=1506>{
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           }
        )*
    ;
2022-03-23 22:29:31:561 grammar LogManager.java:25 added: (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1511))) (expression (ELEMENT_OPTIONS (= tokenIndex 1513))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1515))) {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1502))) (expression (ELEMENT_OPTIONS (= tokenIndex 1504))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1506))) {
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           }))))))
2022-03-23 22:29:31:585 left-recursion LogManager.java:25 listParamsFunc returns [*arrayList.List lpf]
    :   ( {} ID<tokenIndex=1781> D_PTS<tokenIndex=1783> types<tokenIndex=1785>{
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             } 
        | ID<tokenIndex=1790> D_PTS<tokenIndex=1792> AMP<tokenIndex=1794> MUT<tokenIndex=1796> arrayType<tokenIndex=1798> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1806> D_PTS<tokenIndex=1808> AMP<tokenIndex=1810> MUT<tokenIndex=1812> VECTOR2<tokenIndex=1814> MENOR<tokenIndex=1816> id2=ID<tokenIndex=1820> MAYOR<tokenIndex=1822> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              } 
        | ID<tokenIndex=1828> D_PTS<tokenIndex=1830> arrayType<tokenIndex=1832> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1840> D_PTS<tokenIndex=1842> VECTOR2<tokenIndex=1844> MENOR<tokenIndex=1846> id2=ID<tokenIndex=1850> MAYOR<tokenIndex=1852>  {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              } 
        | { $lpf = arrayList.New() } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> COMA<tokenIndex=1677> ID<tokenIndex=1679> D_PTS<tokenIndex=1681> types<tokenIndex=1683> {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> COMA<tokenIndex=1693> ID<tokenIndex=1695> D_PTS<tokenIndex=1697> AMP<tokenIndex=1699> MUT<tokenIndex=1701> arrayType<tokenIndex=1703> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> COMA<tokenIndex=1713> id1=ID<tokenIndex=1717> D_PTS<tokenIndex=1719> AMP<tokenIndex=1721> MUT<tokenIndex=1723> VECTOR2<tokenIndex=1725> MENOR<tokenIndex=1727> id2=ID<tokenIndex=1731> MAYOR<tokenIndex=1733> {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> COMA<tokenIndex=1743> ID<tokenIndex=1745> D_PTS<tokenIndex=1747> arrayType<tokenIndex=1749> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> COMA<tokenIndex=1759> id1=ID<tokenIndex=1763> D_PTS<tokenIndex=1765> VECTOR2<tokenIndex=1767> MENOR<tokenIndex=1769> id2=ID<tokenIndex=1773> MAYOR<tokenIndex=1775>  {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
        )*
    ;
2022-03-23 22:29:31:593 grammar LogManager.java:25 added: (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1781))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1783))) (types (ELEMENT_OPTIONS (= tokenIndex 1785))) {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1790))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1792))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1794))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1796))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1798))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1806)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1808))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1810))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1812))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1814))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1816))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1820)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1822))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1828))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1830))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1832))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1840)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1842))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1844))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1846))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1850)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1852))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1677))) (ID (ELEMENT_OPTIONS (= tokenIndex 1679))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1681))) (types (ELEMENT_OPTIONS (= tokenIndex 1683))) {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1693))) (ID (ELEMENT_OPTIONS (= tokenIndex 1695))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1697))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1699))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1701))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1703))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1713))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1717)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1719))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1721))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1723))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1725))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1727))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1731)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1733))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1743))) (ID (ELEMENT_OPTIONS (= tokenIndex 1745))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1747))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1749))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1759))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1763)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1765))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1767))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1769))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1773)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1775))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }))))))
2022-03-23 22:29:31:623 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=1936> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1928> expression<tokenIndex=1930>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-03-23 22:29:31:624 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1936))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1928))) (expression (ELEMENT_OPTIONS (= tokenIndex 1930))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-03-23 22:29:31:644 left-recursion LogManager.java:25 expression returns [interfaces.Expression p]
    :   ( {} expr_arit<tokenIndex=1971> { $p = $expr_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> PUNTO<tokenIndex=1981> PUNTO<tokenIndex=1983> expdos=expression<tokenIndex=1987,p=2> { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }
        )*
    ;
2022-03-23 22:29:31:646 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1971))) { $p = $expr_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1981))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1983))) (= expdos (expression (ELEMENT_OPTIONS (= tokenIndex 1987) (= p 2)))) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))))))
2022-03-23 22:29:31:670 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} SUB<tokenIndex=2103> opDe=expr_arit<tokenIndex=2107,p=16> {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)} 
        | NOT<tokenIndex=2113> opDe=expr_arit<tokenIndex=2117,p=15> {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)} 
        | CORIZQ<tokenIndex=2123> listParams<tokenIndex=2125> CORDER<tokenIndex=2127> { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | VECTOR1<tokenIndex=2133> NOT<tokenIndex=2135> CORIZQ<tokenIndex=2137> listParams<tokenIndex=2139> CORDER<tokenIndex=2141> { $p = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l) } 
        | VECTOR1<tokenIndex=2147> NOT<tokenIndex=2149> CORIZQ<tokenIndex=2151> listVec<tokenIndex=2153> CORDER<tokenIndex=2155> { $p = $listVec.lv } 
        | PARIZQ<tokenIndex=2161> expression<tokenIndex=2163> PARDER<tokenIndex=2165> { $p = $expression.p } 
        | ID<tokenIndex=2171> LLAVEIZQ<tokenIndex=2173> listStructExp<tokenIndex=2175> LLAVEDER<tokenIndex=2177> { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | callFunction<tokenIndex=2183> { $p = $callFunction.cf } 
        | callFunction<tokenIndex=2189> PYC<tokenIndex=2191> { $p = $callFunction.cf } 
        | callModule<tokenIndex=2197> { $p = $callModule.cm } 
        | callModule<tokenIndex=2203> PYC<tokenIndex=2205> { $p = $callModule.cm } 
        | primitive<tokenIndex=2211> { $p = $primitive.p } 
        | condIf<tokenIndex=2217> { $p = $condIf.ifCond } 
        | condMatch<tokenIndex=2223> { $p = $condMatch.mtch } 
        | loopBucle<tokenIndex=2229> { $p = $loopBucle.lb } 
        | expVectors<tokenIndex=2235> { $p = $expVectors.ev } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=2040>|DIV<tokenIndex=2042>|MOD<tokenIndex=2044>) opDe=expr_arit<tokenIndex=2049,p=20> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=2062>|SUB<tokenIndex=2064>) opDe=expr_arit<tokenIndex=2069,p=19> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MENOR<tokenIndex=2082>|MENORIGUAL<tokenIndex=2084>|MAYORIGUAL<tokenIndex=2086>|MAYOR<tokenIndex=2088>|IG_IG<tokenIndex=2090>|DIFERENTE<tokenIndex=2092>) opDe=expr_arit<tokenIndex=2097,p=18> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
        )*
    ;
2022-03-23 22:29:31:679 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 2103))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2107) (= p 16)))) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 2113))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2117) (= p 15)))) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2123))) (listParams (ELEMENT_OPTIONS (= tokenIndex 2125))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2127))) { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (VECTOR1 (ELEMENT_OPTIONS (= tokenIndex 2133))) (NOT (ELEMENT_OPTIONS (= tokenIndex 2135))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2137))) (listParams (ELEMENT_OPTIONS (= tokenIndex 2139))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2141))) { $p = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l) }) (ALT (VECTOR1 (ELEMENT_OPTIONS (= tokenIndex 2147))) (NOT (ELEMENT_OPTIONS (= tokenIndex 2149))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2151))) (listVec (ELEMENT_OPTIONS (= tokenIndex 2153))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2155))) { $p = $listVec.lv }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2161))) (expression (ELEMENT_OPTIONS (= tokenIndex 2163))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2165))) { $p = $expression.p }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2171))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 2173))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 2175))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 2177))) { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2183))) { $p = $callFunction.cf }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2189))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2191))) { $p = $callFunction.cf }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2197))) { $p = $callModule.cm }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2203))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2205))) { $p = $callModule.cm }) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 2211))) { $p = $primitive.p }) (ALT (condIf (ELEMENT_OPTIONS (= tokenIndex 2217))) { $p = $condIf.ifCond }) (ALT (condMatch (ELEMENT_OPTIONS (= tokenIndex 2223))) { $p = $condMatch.mtch }) (ALT (loopBucle (ELEMENT_OPTIONS (= tokenIndex 2229))) { $p = $loopBucle.lb }) (ALT (expVectors (ELEMENT_OPTIONS (= tokenIndex 2235))) { $p = $expVectors.ev })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2040))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2042))) (MOD (ELEMENT_OPTIONS (= tokenIndex 2044))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2049) (= p 20)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 2062))) (SUB (ELEMENT_OPTIONS (= tokenIndex 2064))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2069) (= p 19)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2082))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2084))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2086))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2088))) (IG_IG (ELEMENT_OPTIONS (= tokenIndex 2090))) (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 2092))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2097) (= p 18)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}))))))
2022-03-23 22:29:31:706 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=2365> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=2341> expression<tokenIndex=2343> CORDER<tokenIndex=2345> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=2357> ID<tokenIndex=2359> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2022-03-23 22:29:31:708 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2365))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2341))) (expression (ELEMENT_OPTIONS (= tokenIndex 2343))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2345))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2357))) (ID (ELEMENT_OPTIONS (= tokenIndex 2359))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2022-03-23 22:29:31:733 left-recursion LogManager.java:25 listStructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2394> D_PTS<tokenIndex=2396> expression<tokenIndex=2398>{
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2382> ID<tokenIndex=2384> D_PTS<tokenIndex=2386> expression<tokenIndex=2388> {
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              }
        )*
    ;
2022-03-23 22:29:31:735 grammar LogManager.java:25 added: (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2394))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2396))) (expression (ELEMENT_OPTIONS (= tokenIndex 2398))) {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2382))) (ID (ELEMENT_OPTIONS (= tokenIndex 2384))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2386))) (expression (ELEMENT_OPTIONS (= tokenIndex 2388))) {
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              }))))))
2022-03-23 22:29:31:761 left-recursion LogManager.java:25 listIdMod returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2506> C_PTS<tokenIndex=2508> {
               $l = arrayList.New()
               $l.Add($ID.text)
            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ID<tokenIndex=2498> C_PTS<tokenIndex=2500> {
                                        $list.l.Add($ID.text)
                                        $l = $list.l
                                     }
        )*
    ;
2022-03-23 22:29:31:763 grammar LogManager.java:25 added: (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2506))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2508))) {
               $l = arrayList.New()
               $l.Add($ID.text)
            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (ID (ELEMENT_OPTIONS (= tokenIndex 2498))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2500))) {
                                        $list.l.Add($ID.text)
                                        $l = $list.l
                                     }))))))
2022-03-23 22:29:31:785 grammar LogManager.java:25 import INT=1
2022-03-23 22:29:31:785 grammar LogManager.java:25 import FLOAT=2
2022-03-23 22:29:31:785 grammar LogManager.java:25 import BOOL=3
2022-03-23 22:29:31:785 grammar LogManager.java:25 import CHAR=4
2022-03-23 22:29:31:785 grammar LogManager.java:25 import STR1=5
2022-03-23 22:29:31:785 grammar LogManager.java:25 import STR2=6
2022-03-23 22:29:31:785 grammar LogManager.java:25 import USIZE=7
2022-03-23 22:29:31:785 grammar LogManager.java:25 import VECTOR1=8
2022-03-23 22:29:31:785 grammar LogManager.java:25 import VECTOR2=9
2022-03-23 22:29:31:785 grammar LogManager.java:25 import STRUCT=10
2022-03-23 22:29:31:785 grammar LogManager.java:25 import TRU=11
2022-03-23 22:29:31:785 grammar LogManager.java:25 import FAL=12
2022-03-23 22:29:31:785 grammar LogManager.java:25 import POW=13
2022-03-23 22:29:31:785 grammar LogManager.java:25 import PRINT=14
2022-03-23 22:29:31:785 grammar LogManager.java:25 import LET=15
2022-03-23 22:29:31:785 grammar LogManager.java:25 import MUT=16
2022-03-23 22:29:31:785 grammar LogManager.java:25 import FUNC=17
2022-03-23 22:29:31:785 grammar LogManager.java:25 import ARROW1=18
2022-03-23 22:29:31:785 grammar LogManager.java:25 import ARROW2=19
2022-03-23 22:29:31:785 grammar LogManager.java:25 import ABS=20
2022-03-23 22:29:31:785 grammar LogManager.java:25 import SQRT=21
2022-03-23 22:29:31:786 grammar LogManager.java:25 import TOSTR=22
2022-03-23 22:29:31:786 grammar LogManager.java:25 import TOOWN=23
2022-03-23 22:29:31:786 grammar LogManager.java:25 import CLONE=24
2022-03-23 22:29:31:786 grammar LogManager.java:25 import NEW=25
2022-03-23 22:29:31:786 grammar LogManager.java:25 import LEN=26
2022-03-23 22:29:31:786 grammar LogManager.java:25 import PUSH=27
2022-03-23 22:29:31:786 grammar LogManager.java:25 import REMOVE=28
2022-03-23 22:29:31:786 grammar LogManager.java:25 import CONTAINS=29
2022-03-23 22:29:31:786 grammar LogManager.java:25 import INSERT=30
2022-03-23 22:29:31:786 grammar LogManager.java:25 import CAPACITY=31
2022-03-23 22:29:31:786 grammar LogManager.java:25 import WCAPACITY=32
2022-03-23 22:29:31:786 grammar LogManager.java:25 import MAIN=33
2022-03-23 22:29:31:786 grammar LogManager.java:25 import IF=34
2022-03-23 22:29:31:786 grammar LogManager.java:25 import ELSE=35
2022-03-23 22:29:31:786 grammar LogManager.java:25 import MATCH=36
2022-03-23 22:29:31:786 grammar LogManager.java:25 import LOOP=37
2022-03-23 22:29:31:786 grammar LogManager.java:25 import WHILE=38
2022-03-23 22:29:31:786 grammar LogManager.java:25 import FOR=39
2022-03-23 22:29:31:786 grammar LogManager.java:25 import IN=40
2022-03-23 22:29:31:786 grammar LogManager.java:25 import BREAK=41
2022-03-23 22:29:31:786 grammar LogManager.java:25 import CONTINUE=42
2022-03-23 22:29:31:786 grammar LogManager.java:25 import RETURN=43
2022-03-23 22:29:31:786 grammar LogManager.java:25 import MODULE=44
2022-03-23 22:29:31:786 grammar LogManager.java:25 import PUB=45
2022-03-23 22:29:31:786 grammar LogManager.java:25 import NUMBER=46
2022-03-23 22:29:31:786 grammar LogManager.java:25 import STRING=47
2022-03-23 22:29:31:786 grammar LogManager.java:25 import ID=48
2022-03-23 22:29:31:786 grammar LogManager.java:25 import CHARACTER=49
2022-03-23 22:29:31:787 grammar LogManager.java:25 import PUNTO=50
2022-03-23 22:29:31:787 grammar LogManager.java:25 import C_PTS=51
2022-03-23 22:29:31:787 grammar LogManager.java:25 import D_PTS=52
2022-03-23 22:29:31:787 grammar LogManager.java:25 import PYC=53
2022-03-23 22:29:31:787 grammar LogManager.java:25 import COMA=54
2022-03-23 22:29:31:787 grammar LogManager.java:25 import DIFERENTE=55
2022-03-23 22:29:31:787 grammar LogManager.java:25 import IG_IG=56
2022-03-23 22:29:31:787 grammar LogManager.java:25 import NOT=57
2022-03-23 22:29:31:787 grammar LogManager.java:25 import OR=58
2022-03-23 22:29:31:787 grammar LogManager.java:25 import PLEC=59
2022-03-23 22:29:31:787 grammar LogManager.java:25 import UNDERSCORE=60
2022-03-23 22:29:31:787 grammar LogManager.java:25 import AND=61
2022-03-23 22:29:31:787 grammar LogManager.java:25 import IGUAL=62
2022-03-23 22:29:31:787 grammar LogManager.java:25 import MAYORIGUAL=63
2022-03-23 22:29:31:787 grammar LogManager.java:25 import MENORIGUAL=64
2022-03-23 22:29:31:787 grammar LogManager.java:25 import MAYOR=65
2022-03-23 22:29:31:787 grammar LogManager.java:25 import MENOR=66
2022-03-23 22:29:31:787 grammar LogManager.java:25 import MUL=67
2022-03-23 22:29:31:787 grammar LogManager.java:25 import DIV=68
2022-03-23 22:29:31:787 grammar LogManager.java:25 import ADD=69
2022-03-23 22:29:31:787 grammar LogManager.java:25 import SUB=70
2022-03-23 22:29:31:787 grammar LogManager.java:25 import MOD=71
2022-03-23 22:29:31:787 grammar LogManager.java:25 import PARIZQ=72
2022-03-23 22:29:31:787 grammar LogManager.java:25 import PARDER=73
2022-03-23 22:29:31:787 grammar LogManager.java:25 import LLAVEIZQ=74
2022-03-23 22:29:31:787 grammar LogManager.java:25 import LLAVEDER=75
2022-03-23 22:29:31:787 grammar LogManager.java:25 import CORIZQ=76
2022-03-23 22:29:31:787 grammar LogManager.java:25 import CORDER=77
2022-03-23 22:29:31:787 grammar LogManager.java:25 import AMP=78
2022-03-23 22:29:31:787 grammar LogManager.java:25 import WHITESPACE=79
2022-03-23 22:29:31:787 grammar LogManager.java:25 import COMMENT=80
2022-03-23 22:29:31:787 grammar LogManager.java:25 import LINE_COMMENT=81
2022-03-23 22:29:31:787 grammar LogManager.java:25 import 'i64'=1
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'f64'=2
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'bool'=3
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'char'=4
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'String'=5
2022-03-23 22:29:31:788 grammar LogManager.java:25 import '&str'=6
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'usize'=7
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'vec'=8
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'Vec'=9
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'struct'=10
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'true'=11
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'false'=12
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'pow'=13
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'println!'=14
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'let'=15
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'mut'=16
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'fn'=17
2022-03-23 22:29:31:788 grammar LogManager.java:25 import '->'=18
2022-03-23 22:29:31:788 grammar LogManager.java:25 import '=>'=19
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'abs'=20
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'sqrt'=21
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'to_string()'=22
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'to_owned()'=23
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'clone'=24
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'new'=25
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'len'=26
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'push'=27
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'remove'=28
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'contains'=29
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'insert'=30
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'capacity'=31
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'with_capacity'=32
2022-03-23 22:29:31:788 grammar LogManager.java:25 import 'main'=33
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'if'=34
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'else'=35
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'match'=36
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'loop'=37
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'while'=38
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'for'=39
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'in'=40
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'break'=41
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'continue'=42
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'return'=43
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'mod'=44
2022-03-23 22:29:31:789 grammar LogManager.java:25 import 'pub'=45
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '.'=50
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '::'=51
2022-03-23 22:29:31:789 grammar LogManager.java:25 import ':'=52
2022-03-23 22:29:31:789 grammar LogManager.java:25 import ';'=53
2022-03-23 22:29:31:789 grammar LogManager.java:25 import ','=54
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '!='=55
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '=='=56
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '!'=57
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '||'=58
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '|'=59
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '_'=60
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '&&'=61
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '='=62
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '>='=63
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '<='=64
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '>'=65
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '<'=66
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '*'=67
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '/'=68
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '+'=69
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '-'=70
2022-03-23 22:29:31:789 grammar LogManager.java:25 import '%'=71
2022-03-23 22:29:31:790 grammar LogManager.java:25 import '('=72
2022-03-23 22:29:31:790 grammar LogManager.java:25 import ')'=73
2022-03-23 22:29:31:790 grammar LogManager.java:25 import '{'=74
2022-03-23 22:29:31:790 grammar LogManager.java:25 import '}'=75
2022-03-23 22:29:31:790 grammar LogManager.java:25 import '['=76
2022-03-23 22:29:31:790 grammar LogManager.java:25 import ']'=77
2022-03-23 22:29:31:790 grammar LogManager.java:25 import '&'=78
2022-03-23 22:29:31:790 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, TRU=11, FAL=12, POW=13, PRINT=14, LET=15, MUT=16, FUNC=17, ARROW1=18, ARROW2=19, ABS=20, SQRT=21, TOSTR=22, TOOWN=23, CLONE=24, NEW=25, LEN=26, PUSH=27, REMOVE=28, CONTAINS=29, INSERT=30, CAPACITY=31, WCAPACITY=32, MAIN=33, IF=34, ELSE=35, MATCH=36, LOOP=37, WHILE=38, FOR=39, IN=40, BREAK=41, CONTINUE=42, RETURN=43, MODULE=44, PUB=45, NUMBER=46, STRING=47, ID=48, CHARACTER=49, PUNTO=50, C_PTS=51, D_PTS=52, PYC=53, COMA=54, DIFERENTE=55, IG_IG=56, NOT=57, OR=58, PLEC=59, UNDERSCORE=60, AND=61, IGUAL=62, MAYORIGUAL=63, MENORIGUAL=64, MAYOR=65, MENOR=66, MUL=67, DIV=68, ADD=69, SUB=70, MOD=71, PARIZQ=72, PARDER=73, LLAVEIZQ=74, LLAVEDER=75, CORIZQ=76, CORDER=77, AMP=78, WHITESPACE=79, COMMENT=80, LINE_COMMENT=81, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'Vec'=9, 'struct'=10, 'true'=11, 'false'=12, 'pow'=13, 'println!'=14, 'let'=15, 'mut'=16, 'fn'=17, '->'=18, '=>'=19, 'abs'=20, 'sqrt'=21, 'to_string()'=22, 'to_owned()'=23, 'clone'=24, 'new'=25, 'len'=26, 'push'=27, 'remove'=28, 'contains'=29, 'insert'=30, 'capacity'=31, 'with_capacity'=32, 'main'=33, 'if'=34, 'else'=35, 'match'=36, 'loop'=37, 'while'=38, 'for'=39, 'in'=40, 'break'=41, 'continue'=42, 'return'=43, 'mod'=44, 'pub'=45, '.'=50, '::'=51, ':'=52, ';'=53, ','=54, '!='=55, '=='=56, '!'=57, '||'=58, '|'=59, '_'=60, '&&'=61, '='=62, '>='=63, '<='=64, '>'=65, '<'=66, '*'=67, '/'=68, '+'=69, '-'=70, '%'=71, '('=72, ')'=73, '{'=74, '}'=75, '['=76, ']'=77, '&'=78}
2022-03-23 22:29:31:791 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, TRU=11, FAL=12, POW=13, PRINT=14, LET=15, MUT=16, FUNC=17, ARROW1=18, ARROW2=19, ABS=20, SQRT=21, TOSTR=22, TOOWN=23, CLONE=24, NEW=25, LEN=26, PUSH=27, REMOVE=28, CONTAINS=29, INSERT=30, CAPACITY=31, WCAPACITY=32, MAIN=33, IF=34, ELSE=35, MATCH=36, LOOP=37, WHILE=38, FOR=39, IN=40, BREAK=41, CONTINUE=42, RETURN=43, MODULE=44, PUB=45, NUMBER=46, STRING=47, ID=48, CHARACTER=49, PUNTO=50, C_PTS=51, D_PTS=52, PYC=53, COMA=54, DIFERENTE=55, IG_IG=56, NOT=57, OR=58, PLEC=59, UNDERSCORE=60, AND=61, IGUAL=62, MAYORIGUAL=63, MENORIGUAL=64, MAYOR=65, MENOR=66, MUL=67, DIV=68, ADD=69, SUB=70, MOD=71, PARIZQ=72, PARDER=73, LLAVEIZQ=74, LLAVEDER=75, CORIZQ=76, CORDER=77, AMP=78, WHITESPACE=79, COMMENT=80, LINE_COMMENT=81}
2022-03-23 22:29:31:791 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'Vec'=9, 'struct'=10, 'true'=11, 'false'=12, 'pow'=13, 'println!'=14, 'let'=15, 'mut'=16, 'fn'=17, '->'=18, '=>'=19, 'abs'=20, 'sqrt'=21, 'to_string()'=22, 'to_owned()'=23, 'clone'=24, 'new'=25, 'len'=26, 'push'=27, 'remove'=28, 'contains'=29, 'insert'=30, 'capacity'=31, 'with_capacity'=32, 'main'=33, 'if'=34, 'else'=35, 'match'=36, 'loop'=37, 'while'=38, 'for'=39, 'in'=40, 'break'=41, 'continue'=42, 'return'=43, 'mod'=44, 'pub'=45, '.'=50, '::'=51, ':'=52, ';'=53, ','=54, '!='=55, '=='=56, '!'=57, '||'=58, '|'=59, '_'=60, '&&'=61, '='=62, '>='=63, '<='=64, '>'=65, '<'=66, '*'=67, '/'=68, '+'=69, '-'=70, '%'=71, '('=72, ')'=73, '{'=74, '}'=75, '['=76, ']'=77, '&'=78}
2022-03-23 22:29:31:906 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[{10, 15, 17, 44}, 17]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[{10, 15, 17, 44}, <EOF>]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[15, 17, 44, 10]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 3 in rule moduleContent
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[45, 45, 44, {10, 17}]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 4 in rule moduleContent
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[null, null, null, null]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 5 in rule moduleContent
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[null, 75]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 6 in rule moduleAction
2022-03-23 22:29:31:907 LL1 LogManager.java:25 look=[17, 10]
2022-03-23 22:29:31:907 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:907 LL1 LogManager.java:25 
DECISION 7 in rule instructions
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[{10, 14..15, 34, 36..39, 41..43, 48}, 75]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[14, 15, 48, 34, 36, 38, 37, 39, 41, 42, 43, 10, 48]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 9 in rule insVectors
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[48, 48]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 10 in rule listParamsCall
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[{8, 11..12, 34, 36..37, 46..49, 57, 70, 72, 76, 78}, 78, null]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 11 in rule listParamsCall
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 12 in rule listParamsCall
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[null, 73]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 13 in rule transBreak
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[41, 41]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 14 in rule transReturn
2022-03-23 22:29:31:908 LL1 LogManager.java:25 look=[43, 43, 43, 43]
2022-03-23 22:29:31:908 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:908 LL1 LogManager.java:25 
DECISION 15 in rule condIf
2022-03-23 22:29:31:909 LL1 LogManager.java:25 look=[35, null]
2022-03-23 22:29:31:909 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:909 LL1 LogManager.java:25 
DECISION 16 in rule condElse
2022-03-23 22:29:31:909 LL1 LogManager.java:25 look=[35, null]
2022-03-23 22:29:31:909 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:909 LL1 LogManager.java:25 
DECISION 17 in rule block
2022-03-23 22:29:31:910 LL1 LogManager.java:25 look=[{10, 14..15, 34, 36..39, 41..43, 48}, {8, 11..12, 34, 36..37, 46..49, 57, 70, 72, 76, 78}]
2022-03-23 22:29:31:910 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:910 LL1 LogManager.java:25 
DECISION 18 in rule block
2022-03-23 22:29:31:910 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:910 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:910 LL1 LogManager.java:25 
DECISION 19 in rule block
2022-03-23 22:29:31:910 LL1 LogManager.java:25 look=[null, {54, 75}]
2022-03-23 22:29:31:910 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:910 LL1 LogManager.java:25 
DECISION 20 in rule condMatch
2022-03-23 22:29:31:910 LL1 LogManager.java:25 look=[{8, 11..12, 34, 36..37, 46..49, 57, 70, 72, 76, 78}, {60, 75}]
2022-03-23 22:29:31:910 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:910 LL1 LogManager.java:25 
DECISION 21 in rule listArms
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[{8, 11..12, 34, 36..37, 46..49, 57, 70, 72, 76, 78}, {8, 11..12, 34, 36..37, 46..49, 57, 70, 72, 76, 78}]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 22 in rule listMatch
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[null, 19]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 23 in rule defaultArm
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[60, 60, 75]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 24 in rule declaration
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[15, 15, 15, 15, 15, 15, 15]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 25 in rule vectDeclaration
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 26 in rule listStructDec
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[48, 48]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 27 in rule listStructDec
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 28 in rule listStructDec
2022-03-23 22:29:31:911 LL1 LogManager.java:25 look=[null, 75]
2022-03-23 22:29:31:911 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:911 LL1 LogManager.java:25 
DECISION 29 in rule assignment
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[48, 48, 48]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 30 in rule listAccessStruct
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[null, 62]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 31 in rule listAccessArray
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[null, 62]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 32 in rule arrayType
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[76, 76]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 33 in rule function
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[17, 17, 17, 17]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 34 in rule listParamsFunc
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[48, 48, 48, 48, 48, null]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 35 in rule listParamsFunc
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[null, null, null, null, null]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 36 in rule listParamsFunc
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[null, 73]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 37 in rule types
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 6, 8, 10]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:912 LL1 LogManager.java:25 
DECISION 38 in rule listParams
2022-03-23 22:29:31:912 LL1 LogManager.java:25 look=[null, {73, 77}]
2022-03-23 22:29:31:912 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:917 LL1 LogManager.java:25 
DECISION 39 in rule expression
2022-03-23 22:29:31:917 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:917 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:917 LL1 LogManager.java:25 
DECISION 40 in rule callFunction
2022-03-23 22:29:31:917 LL1 LogManager.java:25 look=[48, 48]
2022-03-23 22:29:31:917 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:917 LL1 LogManager.java:25 
DECISION 41 in rule expr_arit
2022-03-23 22:29:31:917 LL1 LogManager.java:25 look=[70, 57, 76, 8, 8, 72, 48, 48, 48, 48, 48, {11..12, 46..49, 78}, 34, 36, 37, 48]
2022-03-23 22:29:31:917 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:917 LL1 LogManager.java:25 
DECISION 42 in rule expr_arit
2022-03-23 22:29:31:917 LL1 LogManager.java:25 look=[null, null, null]
2022-03-23 22:29:31:917 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:917 LL1 LogManager.java:25 
DECISION 43 in rule expr_arit
2022-03-23 22:29:31:918 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:918 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:918 LL1 LogManager.java:25 
DECISION 44 in rule primitive
2022-03-23 22:29:31:918 LL1 LogManager.java:25 look=[46, {47, 78}, 49, 11, 12, 48]
2022-03-23 22:29:31:918 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:918 LL1 LogManager.java:25 
DECISION 45 in rule stringTypes
2022-03-23 22:29:31:918 LL1 LogManager.java:25 look=[78, 47]
2022-03-23 22:29:31:918 LL1 LogManager.java:25 LL(1)? true
2022-03-23 22:29:31:918 LL1 LogManager.java:25 
DECISION 46 in rule stringTypes
2022-03-23 22:29:31:918 LL1 LogManager.java:25 look=[50, 50]
2022-03-23 22:29:31:918 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:918 LL1 LogManager.java:25 
DECISION 47 in rule stringTypes
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[50, null]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:919 LL1 LogManager.java:25 
DECISION 48 in rule stringTypes
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[47, {47, 78}]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:919 LL1 LogManager.java:25 
DECISION 49 in rule listArray
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:919 LL1 LogManager.java:25 
DECISION 50 in rule listArray
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[null, null]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:919 LL1 LogManager.java:25 
DECISION 51 in rule listStructExp
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[null, 75]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:919 LL1 LogManager.java:25 
DECISION 52 in rule expVectors
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[48, 48, 48, 48]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:919 LL1 LogManager.java:25 
DECISION 53 in rule listIdMod
2022-03-23 22:29:31:919 LL1 LogManager.java:25 look=[null, {8, 11..12, 34, 36..37, 46..49, 57, 70, 72, 76, 78}]
2022-03-23 22:29:31:919 LL1 LogManager.java:25 LL(1)? false
2022-03-23 22:29:31:948 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-23 22:29:32:009 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-03-23 22:29:32:009 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-03-23 22:29:32:010 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-03-23 22:29:32:011 action-translator LogManager.java:25 translate  $hi = $declaration.dec 
2022-03-23 22:29:32:011 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,29:20]
2022-03-23 22:29:32:012 action-translator LogManager.java:25 qattr [@-1,8:18='declaration',<0>,29:26].[@-1,20:22='dec',<0>,29:38]
2022-03-23 22:29:32:012 action-translator LogManager.java:25 translate  $hi = $function.fun 
2022-03-23 22:29:32:012 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,30:13]
2022-03-23 22:29:32:012 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,30:19].[@-1,17:19='fun',<0>,30:28]
2022-03-23 22:29:32:012 action-translator LogManager.java:25 translate  $hi = $module.mod 
2022-03-23 22:29:32:012 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,31:11]
2022-03-23 22:29:32:012 action-translator LogManager.java:25 qattr [@-1,8:13='module',<0>,31:17].[@-1,15:17='mod',<0>,31:24]
2022-03-23 22:29:32:013 action-translator LogManager.java:25 translate  $hi = $structCreation.dec 
2022-03-23 22:29:32:013 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,32:19]
2022-03-23 22:29:32:013 action-translator LogManager.java:25 qattr [@-1,8:21='structCreation',<0>,32:25].[@-1,23:25='dec',<0>,32:40]
2022-03-23 22:29:32:015 action-translator LogManager.java:25 translate  $mod = instructions.NewModule($MODULE.line, $MODULE.pos, $ID.text, $moduleContent.m ) 
2022-03-23 22:29:32:015 action-translator LogManager.java:25 attr [@-1,2:4='mod',<0>,36:46]
2022-03-23 22:29:32:015 action-translator LogManager.java:25 qattr [@-1,32:37='MODULE',<0>,36:76].[@-1,39:42='line',<0>,36:83]
2022-03-23 22:29:32:015 action-translator LogManager.java:25 qattr [@-1,46:51='MODULE',<0>,36:90].[@-1,53:55='pos',<0>,36:97]
2022-03-23 22:29:32:015 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,36:103].[@-1,62:65='text',<0>,36:106]
2022-03-23 22:29:32:016 action-translator LogManager.java:25 qattr [@-1,69:81='moduleContent',<0>,36:113].[@-1,83:83='m',<0>,36:127]
2022-03-23 22:29:32:018 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:018 action-translator LogManager.java:25 translate 
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               
2022-03-23 22:29:32:018 action-translator LogManager.java:25 attr [@-1,21:21='m',<0>,3:19]
2022-03-23 22:29:32:018 action-translator LogManager.java:25 qattr [@-1,137:142='module',<0>,4:95].[@-1,144:146='mod',<0>,4:102]
2022-03-23 22:29:32:018 action-translator LogManager.java:25 attr [@-1,169:169='m',<0>,5:19]
2022-03-23 22:29:32:018 action-translator LogManager.java:25 translate 
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  
2022-03-23 22:29:32:018 action-translator LogManager.java:25 attr [@-1,24:24='m',<0>,8:22]
2022-03-23 22:29:32:019 action-translator LogManager.java:25 qattr [@-1,143:154='moduleAction',<0>,9:98].[@-1,156:157='ma',<0>,9:111]
2022-03-23 22:29:32:019 action-translator LogManager.java:25 attr [@-1,183:183='m',<0>,10:22]
2022-03-23 22:29:32:019 action-translator LogManager.java:25 translate 
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            
2022-03-23 22:29:32:019 action-translator LogManager.java:25 attr [@-1,18:18='m',<0>,13:16]
2022-03-23 22:29:32:019 action-translator LogManager.java:25 qattr [@-1,131:136='module',<0>,14:92].[@-1,138:140='mod',<0>,14:99]
2022-03-23 22:29:32:019 action-translator LogManager.java:25 attr [@-1,160:160='m',<0>,15:16]
2022-03-23 22:29:32:019 action-translator LogManager.java:25 translate 
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               
2022-03-23 22:29:32:019 action-translator LogManager.java:25 attr [@-1,21:21='m',<0>,18:19]
2022-03-23 22:29:32:020 action-translator LogManager.java:25 qattr [@-1,138:149='moduleAction',<0>,19:96].[@-1,151:152='ma',<0>,19:109]
2022-03-23 22:29:32:020 action-translator LogManager.java:25 attr [@-1,175:175='m',<0>,20:19]
2022-03-23 22:29:32:020 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-23 22:29:32:021 action-translator LogManager.java:25 translate 
                                              newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                              $mc.m.Add(newObj)
                                              $m = $mc.m
                                           
2022-03-23 22:29:32:021 action-translator LogManager.java:25 qattr [@-1,124:129='module',<0>,25:122].[@-1,131:133='mod',<0>,25:129]
2022-03-23 22:29:32:021 action-translator LogManager.java:25 qattr [@-1,184:185='mc',<0>,26:47].[@-1,187:187='m',<0>,26:50]
2022-03-23 22:29:32:021 action-translator LogManager.java:25 attr [@-1,249:249='m',<0>,27:47]
2022-03-23 22:29:32:021 action-translator LogManager.java:25 qattr [@-1,254:255='mc',<0>,27:52].[@-1,257:257='m',<0>,27:55]
2022-03-23 22:29:32:021 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-23 22:29:32:021 action-translator LogManager.java:25 translate 
                                                 newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                                 $mc.m.Add(newObj)
                                                 $m = $mc.m
                                              
2022-03-23 22:29:32:022 action-translator LogManager.java:25 qattr [@-1,128:139='moduleAction',<0>,30:126].[@-1,141:142='ma',<0>,30:139]
2022-03-23 22:29:32:022 action-translator LogManager.java:25 qattr [@-1,196:197='mc',<0>,31:50].[@-1,199:199='m',<0>,31:53]
2022-03-23 22:29:32:022 action-translator LogManager.java:25 attr [@-1,264:264='m',<0>,32:50]
2022-03-23 22:29:32:022 action-translator LogManager.java:25 qattr [@-1,269:270='mc',<0>,32:55].[@-1,272:272='m',<0>,32:58]
2022-03-23 22:29:32:022 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-23 22:29:32:022 action-translator LogManager.java:25 translate 
                                        newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                                        $mc.m.Add(newObj)
                                        $m = $mc.m
                                     
2022-03-23 22:29:32:022 action-translator LogManager.java:25 qattr [@-1,120:125='module',<0>,35:118].[@-1,127:129='mod',<0>,35:125]
2022-03-23 22:29:32:022 action-translator LogManager.java:25 qattr [@-1,174:175='mc',<0>,36:41].[@-1,177:177='m',<0>,36:44]
2022-03-23 22:29:32:023 action-translator LogManager.java:25 attr [@-1,233:233='m',<0>,37:41]
2022-03-23 22:29:32:023 action-translator LogManager.java:25 qattr [@-1,238:239='mc',<0>,37:46].[@-1,241:241='m',<0>,37:49]
2022-03-23 22:29:32:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-23 22:29:32:023 action-translator LogManager.java:25 translate 
                                          newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                          $mc.m.Add(newObj)
                                          $m = $mc.m
                                       
2022-03-23 22:29:32:023 action-translator LogManager.java:25 qattr [@-1,122:133='moduleAction',<0>,40:120].[@-1,135:136='ma',<0>,40:133]
2022-03-23 22:29:32:023 action-translator LogManager.java:25 qattr [@-1,183:184='mc',<0>,41:43].[@-1,186:186='m',<0>,41:46]
2022-03-23 22:29:32:023 action-translator LogManager.java:25 attr [@-1,244:244='m',<0>,42:43]
2022-03-23 22:29:32:023 action-translator LogManager.java:25 qattr [@-1,249:250='mc',<0>,42:48].[@-1,252:252='m',<0>,42:51]
2022-03-23 22:29:32:024 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-23 22:29:32:024 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-23 22:29:32:024 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-23 22:29:32:025 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-23 22:29:32:025 action-translator LogManager.java:25 translate  $ma = $function.fun 
2022-03-23 22:29:32:025 action-translator LogManager.java:25 attr [@-1,2:3='ma',<0>,83:13]
2022-03-23 22:29:32:025 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,83:19].[@-1,17:19='fun',<0>,83:28]
2022-03-23 22:29:32:025 action-translator LogManager.java:25 translate  $ma = $structCreation.dec 
2022-03-23 22:29:32:025 action-translator LogManager.java:25 attr [@-1,2:3='ma',<0>,84:19]
2022-03-23 22:29:32:026 action-translator LogManager.java:25 qattr [@-1,8:21='structCreation',<0>,84:25].[@-1,23:25='dec',<0>,84:40]
2022-03-23 22:29:32:026 action-translator LogManager.java:25 translate  $mainInst = $block.blk 
2022-03-23 22:29:32:026 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,89:52]
2022-03-23 22:29:32:026 action-translator LogManager.java:25 qattr [@-1,14:18='block',<0>,89:64].[@-1,20:22='blk',<0>,89:70]
2022-03-23 22:29:32:027 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-03-23 22:29:32:027 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,94:5]
2022-03-23 22:29:32:027 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-03-23 22:29:32:027 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,100:13]
2022-03-23 22:29:32:029 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-03-23 22:29:32:029 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,106:19]
2022-03-23 22:29:32:029 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,106:27].[@-1,21:22='pr',<0>,106:38]
2022-03-23 22:29:32:029 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-03-23 22:29:32:029 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,107:20]
2022-03-23 22:29:32:029 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,107:28].[@-1,22:24='dec',<0>,107:40]
2022-03-23 22:29:32:029 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2022-03-23 22:29:32:029 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,108:19]
2022-03-23 22:29:32:029 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,108:27].[@-1,21:23='ass',<0>,108:38]
2022-03-23 22:29:32:030 action-translator LogManager.java:25 translate  $inst = $condIf.ifCond 
2022-03-23 22:29:32:030 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,109:11]
2022-03-23 22:29:32:030 action-translator LogManager.java:25 qattr [@-1,10:15='condIf',<0>,109:19].[@-1,17:22='ifCond',<0>,109:26]
2022-03-23 22:29:32:030 action-translator LogManager.java:25 translate  $inst = $condMatch.mtch 
2022-03-23 22:29:32:030 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,110:14]
2022-03-23 22:29:32:030 action-translator LogManager.java:25 qattr [@-1,10:18='condMatch',<0>,110:22].[@-1,20:23='mtch',<0>,110:32]
2022-03-23 22:29:32:030 action-translator LogManager.java:25 translate  $inst = $loopWhile.lw 
2022-03-23 22:29:32:030 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,111:14]
2022-03-23 22:29:32:030 action-translator LogManager.java:25 qattr [@-1,10:18='loopWhile',<0>,111:22].[@-1,20:21='lw',<0>,111:32]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 translate  $inst = $loopBucle.lb 
2022-03-23 22:29:32:031 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,112:14]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 qattr [@-1,10:18='loopBucle',<0>,112:22].[@-1,20:21='lb',<0>,112:32]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 translate  $inst = $loopForin.lfi 
2022-03-23 22:29:32:031 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,113:14]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 qattr [@-1,10:18='loopForin',<0>,113:22].[@-1,20:22='lfi',<0>,113:32]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 translate  $inst = $transBreak.brk 
2022-03-23 22:29:32:031 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,114:19]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 qattr [@-1,10:19='transBreak',<0>,114:27].[@-1,21:23='brk',<0>,114:38]
2022-03-23 22:29:32:031 action-translator LogManager.java:25 translate  $inst = $transContinue.cnt 
2022-03-23 22:29:32:031 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,115:22]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 qattr [@-1,10:22='transContinue',<0>,115:30].[@-1,24:26='cnt',<0>,115:44]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 translate  $inst = $transReturn.rt 
2022-03-23 22:29:32:032 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,116:16]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 qattr [@-1,10:20='transReturn',<0>,116:24].[@-1,22:23='rt',<0>,116:36]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2022-03-23 22:29:32:032 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,117:19]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,117:27].[@-1,25:27='dec',<0>,117:42]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 translate  $inst = $insVectors.iv 
2022-03-23 22:29:32:032 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,118:19]
2022-03-23 22:29:32:032 action-translator LogManager.java:25 qattr [@-1,10:19='insVectors',<0>,118:27].[@-1,21:22='iv',<0>,118:38]
2022-03-23 22:29:32:034 action-translator LogManager.java:25 translate  $iv = instructions.NewPush($ID.line, $ID.pos, $ID.text, $expression.p) 
2022-03-23 22:29:32:034 action-translator LogManager.java:25 attr [@-1,2:3='iv',<0>,122:43]
2022-03-23 22:29:32:034 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,122:70].[@-1,32:35='line',<0>,122:73]
2022-03-23 22:29:32:034 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,122:80].[@-1,42:44='pos',<0>,122:83]
2022-03-23 22:29:32:034 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,122:89].[@-1,51:54='text',<0>,122:92]
2022-03-23 22:29:32:034 action-translator LogManager.java:25 qattr [@-1,58:67='expression',<0>,122:99].[@-1,69:69='p',<0>,122:110]
2022-03-23 22:29:32:034 action-translator LogManager.java:25 translate  $iv = instructions.NewInsert($ID.line, $ID.pos, $ID.text, $exp1.p, $exp2.p) 
2022-03-23 22:29:32:034 action-translator LogManager.java:25 attr [@-1,2:3='iv',<0>,123:71]
2022-03-23 22:29:32:035 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,123:100].[@-1,34:37='line',<0>,123:103]
2022-03-23 22:29:32:035 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,123:110].[@-1,44:46='pos',<0>,123:113]
2022-03-23 22:29:32:035 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,123:119].[@-1,53:56='text',<0>,123:122]
2022-03-23 22:29:32:035 action-translator LogManager.java:25 qattr [@-1,60:63='exp1',<0>,123:129].[@-1,65:65='p',<0>,123:134]
2022-03-23 22:29:32:035 action-translator LogManager.java:25 qattr [@-1,69:72='exp2',<0>,123:138].[@-1,74:74='p',<0>,123:143]
2022-03-23 22:29:32:036 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:036 action-translator LogManager.java:25 translate 
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              
2022-03-23 22:29:32:036 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,3:54].[@-1,67:67='p',<0>,3:65]
2022-03-23 22:29:32:036 action-translator LogManager.java:25 attr [@-1,96:96='l',<0>,4:18]
2022-03-23 22:29:32:036 action-translator LogManager.java:25 attr [@-1,135:135='l',<0>,5:18]
2022-03-23 22:29:32:036 action-translator LogManager.java:25 translate 
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     
2022-03-23 22:29:32:036 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,8:61].[@-1,74:74='p',<0>,8:72]
2022-03-23 22:29:32:036 action-translator LogManager.java:25 attr [@-1,109:109='l',<0>,9:25]
2022-03-23 22:29:32:037 action-translator LogManager.java:25 attr [@-1,155:155='l',<0>,10:25]
2022-03-23 22:29:32:037 action-translator LogManager.java:25 translate 
          $l = arrayList.New()
       
2022-03-23 22:29:32:037 action-translator LogManager.java:25 attr [@-1,13:13='l',<0>,13:11]
2022-03-23 22:29:32:037 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-23 22:29:32:037 action-translator LogManager.java:25 translate 
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                
2022-03-23 22:29:32:037 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,18:88].[@-1,101:101='p',<0>,18:99]
2022-03-23 22:29:32:037 action-translator LogManager.java:25 qattr [@-1,164:167='list',<0>,19:52].[@-1,169:169='l',<0>,19:57]
2022-03-23 22:29:32:037 action-translator LogManager.java:25 setAttr [@-1,236:236='l',<0>,20:52] [@-1,239:246=' $list.l',<0>,20:55]
2022-03-23 22:29:32:037 action-translator LogManager.java:25 translate  $list.l
2022-03-23 22:29:32:037 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,17:107].[@-1,7:7='l',<0>,17:112]
2022-03-23 22:29:32:038 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-23 22:29:32:038 action-translator LogManager.java:25 translate 
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   
2022-03-23 22:29:32:038 action-translator LogManager.java:25 qattr [@-1,93:102='expression',<0>,23:91].[@-1,104:104='p',<0>,23:102]
2022-03-23 22:29:32:038 action-translator LogManager.java:25 qattr [@-1,169:172='list',<0>,24:55].[@-1,174:174='l',<0>,24:60]
2022-03-23 22:29:32:039 action-translator LogManager.java:25 setAttr [@-1,244:244='l',<0>,25:55] [@-1,247:254=' $list.l',<0>,25:58]
2022-03-23 22:29:32:039 action-translator LogManager.java:25 translate  $list.l
2022-03-23 22:29:32:039 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,22:158].[@-1,7:7='l',<0>,22:163]
2022-03-23 22:29:32:039 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-23 22:29:32:039 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-23 22:29:32:039 action-translator LogManager.java:25 translate  $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) 
2022-03-23 22:29:32:039 action-translator LogManager.java:25 attr [@-1,2:3='lw',<0>,153:45]
2022-03-23 22:29:32:040 action-translator LogManager.java:25 qattr [@-1,30:34='WHILE',<0>,153:73].[@-1,36:39='line',<0>,153:79]
2022-03-23 22:29:32:040 action-translator LogManager.java:25 qattr [@-1,43:47='WHILE',<0>,153:86].[@-1,49:51='pos',<0>,153:92]
2022-03-23 22:29:32:040 action-translator LogManager.java:25 qattr [@-1,55:64='expression',<0>,153:98].[@-1,66:66='p',<0>,153:109]
2022-03-23 22:29:32:040 action-translator LogManager.java:25 qattr [@-1,70:74='block',<0>,153:113].[@-1,76:78='blk',<0>,153:119]
2022-03-23 22:29:32:040 action-translator LogManager.java:25 translate  $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) 
2022-03-23 22:29:32:040 action-translator LogManager.java:25 attr [@-1,2:3='lb',<0>,157:33]
2022-03-23 22:29:32:040 action-translator LogManager.java:25 qattr [@-1,29:32='LOOP',<0>,157:60].[@-1,34:37='line',<0>,157:65]
2022-03-23 22:29:32:041 action-translator LogManager.java:25 qattr [@-1,41:44='LOOP',<0>,157:72].[@-1,46:48='pos',<0>,157:77]
2022-03-23 22:29:32:041 action-translator LogManager.java:25 qattr [@-1,52:56='block',<0>,157:83].[@-1,58:60='blk',<0>,157:89]
2022-03-23 22:29:32:041 action-translator LogManager.java:25 translate  $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) 
2022-03-23 22:29:32:041 action-translator LogManager.java:25 attr [@-1,2:4='lfi',<0>,161:56]
2022-03-23 22:29:32:042 action-translator LogManager.java:25 qattr [@-1,31:33='FOR',<0>,161:85].[@-1,35:38='line',<0>,161:89]
2022-03-23 22:29:32:042 action-translator LogManager.java:25 qattr [@-1,42:44='FOR',<0>,161:96].[@-1,46:48='pos',<0>,161:100]
2022-03-23 22:29:32:042 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,161:106].[@-1,55:58='text',<0>,161:109]
2022-03-23 22:29:32:042 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,161:116].[@-1,73:73='p',<0>,161:127]
2022-03-23 22:29:32:043 action-translator LogManager.java:25 qattr [@-1,77:88='instructions',<0>,161:131].[@-1,90:94='insts',<0>,161:144]
2022-03-23 22:29:32:043 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) 
2022-03-23 22:29:32:043 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,165:21]
2022-03-23 22:29:32:043 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,165:50].[@-1,37:40='line',<0>,165:56]
2022-03-23 22:29:32:043 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,165:63].[@-1,50:52='pos',<0>,165:69]
2022-03-23 22:29:32:043 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,165:75].[@-1,67:67='p',<0>,165:86]
2022-03-23 22:29:32:044 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) 
2022-03-23 22:29:32:044 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,166:10]
2022-03-23 22:29:32:044 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,166:39].[@-1,37:40='line',<0>,166:45]
2022-03-23 22:29:32:044 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,166:52].[@-1,50:52='pos',<0>,166:58]
2022-03-23 22:29:32:044 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2022-03-23 22:29:32:044 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,170:13]
2022-03-23 22:29:32:045 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,170:45].[@-1,43:46='line',<0>,170:54]
2022-03-23 22:29:32:045 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,170:61].[@-1,59:61='pos',<0>,170:70]
2022-03-23 22:29:32:045 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) 
2022-03-23 22:29:32:045 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,174:26]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,174:55].[@-1,38:41='line',<0>,174:62]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,174:69].[@-1,52:54='pos',<0>,174:76]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 qattr [@-1,58:67='expression',<0>,174:82].[@-1,69:69='p',<0>,174:93]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2022-03-23 22:29:32:046 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,175:14]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,175:43].[@-1,38:41='line',<0>,175:50]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,175:57].[@-1,52:54='pos',<0>,175:64]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) 
2022-03-23 22:29:32:046 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,176:22]
2022-03-23 22:29:32:046 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,176:51].[@-1,38:41='line',<0>,176:58]
2022-03-23 22:29:32:047 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,176:65].[@-1,52:54='pos',<0>,176:72]
2022-03-23 22:29:32:047 action-translator LogManager.java:25 qattr [@-1,58:67='expression',<0>,176:78].[@-1,69:69='p',<0>,176:89]
2022-03-23 22:29:32:047 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2022-03-23 22:29:32:047 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,177:11]
2022-03-23 22:29:32:047 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,177:40].[@-1,38:41='line',<0>,177:47]
2022-03-23 22:29:32:047 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,177:54].[@-1,52:54='pos',<0>,177:61]
2022-03-23 22:29:32:048 action-translator LogManager.java:25 translate 
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            
2022-03-23 22:29:32:048 action-translator LogManager.java:25 attr [@-1,206:211='ifCond',<0>,187:13]
2022-03-23 22:29:32:048 action-translator LogManager.java:25 qattr [@-1,235:236='IF',<0>,187:42].[@-1,238:241='line',<0>,187:45]
2022-03-23 22:29:32:048 action-translator LogManager.java:25 qattr [@-1,245:246='IF',<0>,187:52].[@-1,248:250='pos',<0>,187:55]
2022-03-23 22:29:32:048 action-translator LogManager.java:25 qattr [@-1,254:263='expression',<0>,187:61].[@-1,265:265='p',<0>,187:72]
2022-03-23 22:29:32:049 action-translator LogManager.java:25 qattr [@-1,269:273='block',<0>,187:76].[@-1,275:277='blk',<0>,187:82]
2022-03-23 22:29:32:049 action-translator LogManager.java:25 qattr [@-1,287:294='condElse',<0>,187:94].[@-1,296:302='blkelse',<0>,187:103]
2022-03-23 22:29:32:050 action-translator LogManager.java:25 translate 
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    
2022-03-23 22:29:32:050 action-translator LogManager.java:25 attr [@-1,69:72='elif',<0>,195:5]
2022-03-23 22:29:32:050 action-translator LogManager.java:25 qattr [@-1,96:99='ELSE',<0>,195:32].[@-1,101:104='line',<0>,195:37]
2022-03-23 22:29:32:050 action-translator LogManager.java:25 qattr [@-1,108:111='ELSE',<0>,195:44].[@-1,113:115='pos',<0>,195:49]
2022-03-23 22:29:32:050 action-translator LogManager.java:25 qattr [@-1,119:128='expression',<0>,195:55].[@-1,130:130='p',<0>,195:66]
2022-03-23 22:29:32:050 action-translator LogManager.java:25 qattr [@-1,134:138='block',<0>,195:70].[@-1,140:142='blk',<0>,195:76]
2022-03-23 22:29:32:051 action-translator LogManager.java:25 translate  $blkelse = $block.blk 
2022-03-23 22:29:32:051 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,200:33]
2022-03-23 22:29:32:051 action-translator LogManager.java:25 qattr [@-1,13:17='block',<0>,200:44].[@-1,19:21='blk',<0>,200:50]
2022-03-23 22:29:32:051 action-translator LogManager.java:25 translate  $blkelse = arrayList.New() 
2022-03-23 22:29:32:051 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,201:4]
2022-03-23 22:29:32:052 action-translator LogManager.java:25 translate 
    $blk = arrayList.New()
  
2022-03-23 22:29:32:052 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,206:5]
2022-03-23 22:29:32:052 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:052 action-translator LogManager.java:25 translate  $blk.Add($instruction.inst) 
2022-03-23 22:29:32:052 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,2:43]
2022-03-23 22:29:32:052 action-translator LogManager.java:25 qattr [@-1,11:21='instruction',<0>,2:52].[@-1,23:26='inst',<0>,2:64]
2022-03-23 22:29:32:053 action-translator LogManager.java:25 translate  $blk.Add($expression.p) 
2022-03-23 22:29:32:053 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,3:39]
2022-03-23 22:29:32:053 action-translator LogManager.java:25 qattr [@-1,11:20='expression',<0>,3:48].[@-1,22:22='p',<0>,3:59]
2022-03-23 22:29:32:053 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-23 22:29:32:053 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      
2022-03-23 22:29:32:053 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,7:39].[@-1,48:50='blk',<0>,7:46]
2022-03-23 22:29:32:053 action-translator LogManager.java:25 qattr [@-1,57:67='instruction',<0>,7:55].[@-1,69:72='inst',<0>,7:67]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 attr [@-1,115:117='blk',<0>,8:39]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 qattr [@-1,122:127='bloque',<0>,8:46].[@-1,129:131='blk',<0>,8:53]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-23 22:29:32:054 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     
2022-03-23 22:29:32:054 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,11:39].[@-1,48:50='blk',<0>,11:46]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,11:55].[@-1,68:68='p',<0>,11:66]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 attr [@-1,111:113='blk',<0>,12:39]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 qattr [@-1,118:123='bloque',<0>,12:46].[@-1,125:127='blk',<0>,12:53]
2022-03-23 22:29:32:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-23 22:29:32:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-23 22:29:32:055 action-translator LogManager.java:25 translate 
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        
2022-03-23 22:29:32:055 action-translator LogManager.java:25 attr [@-1,185:188='mtch',<0>,228:9]
2022-03-23 22:29:32:055 action-translator LogManager.java:25 qattr [@-1,215:219='MATCH',<0>,228:39].[@-1,221:224='line',<0>,228:45]
2022-03-23 22:29:32:056 action-translator LogManager.java:25 qattr [@-1,228:232='MATCH',<0>,228:52].[@-1,234:236='pos',<0>,228:58]
2022-03-23 22:29:32:056 action-translator LogManager.java:25 qattr [@-1,240:249='expression',<0>,228:64].[@-1,251:251='p',<0>,228:75]
2022-03-23 22:29:32:056 action-translator LogManager.java:25 qattr [@-1,264:273='defaultArm',<0>,228:88].[@-1,275:278='defa',<0>,228:99]
2022-03-23 22:29:32:057 action-translator LogManager.java:25 translate 
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         
2022-03-23 22:29:32:057 action-translator LogManager.java:25 attr [@-1,12:15='arms',<0>,234:10]
2022-03-23 22:29:32:057 action-translator LogManager.java:25 qattr [@-1,40:48='listMatch',<0>,234:38].[@-1,50:54='start',<0>,234:48]
2022-03-23 22:29:32:057 action-translator LogManager.java:25 qattr [@-1,67:75='listMatch',<0>,234:65].[@-1,77:81='start',<0>,234:75]
2022-03-23 22:29:32:057 action-translator LogManager.java:25 qattr [@-1,97:105='listMatch',<0>,234:95].[@-1,107:108='ma',<0>,234:105]
2022-03-23 22:29:32:057 action-translator LogManager.java:25 qattr [@-1,112:116='block',<0>,234:110].[@-1,118:120='blk',<0>,234:116]
2022-03-23 22:29:32:058 action-translator LogManager.java:25 translate 
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        
2022-03-23 22:29:32:058 action-translator LogManager.java:25 attr [@-1,11:14='arms',<0>,237:9]
2022-03-23 22:29:32:058 action-translator LogManager.java:25 qattr [@-1,39:47='listMatch',<0>,237:37].[@-1,49:53='start',<0>,237:47]
2022-03-23 22:29:32:058 action-translator LogManager.java:25 qattr [@-1,66:74='listMatch',<0>,237:64].[@-1,76:80='start',<0>,237:74]
2022-03-23 22:29:32:058 action-translator LogManager.java:25 qattr [@-1,96:104='listMatch',<0>,237:94].[@-1,106:107='ma',<0>,237:104]
2022-03-23 22:29:32:058 action-translator LogManager.java:25 qattr [@-1,111:115='block',<0>,237:109].[@-1,117:119='blk',<0>,237:115]
2022-03-23 22:29:32:059 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:059 action-translator LogManager.java:25 translate 
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              
2022-03-23 22:29:32:059 action-translator LogManager.java:25 attr [@-1,20:21='ma',<0>,3:18]
2022-03-23 22:29:32:059 action-translator LogManager.java:25 attr [@-1,60:61='ma',<0>,4:18]
2022-03-23 22:29:32:059 action-translator LogManager.java:25 qattr [@-1,68:77='expression',<0>,4:26].[@-1,79:79='p',<0>,4:37]
2022-03-23 22:29:32:059 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:059 action-translator LogManager.java:25 translate 
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       
2022-03-23 22:29:32:059 action-translator LogManager.java:25 qattr [@-1,45:47='lma',<0>,9:43].[@-1,49:50='ma',<0>,9:47]
2022-03-23 22:29:32:059 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,9:55].[@-1,68:68='p',<0>,9:66]
2022-03-23 22:29:32:059 action-translator LogManager.java:25 attr [@-1,115:116='ma',<0>,10:43]
2022-03-23 22:29:32:060 action-translator LogManager.java:25 qattr [@-1,121:123='lma',<0>,10:49].[@-1,125:126='ma',<0>,10:53]
2022-03-23 22:29:32:060 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:060 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-03-23 22:29:32:060 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,253:33]
2022-03-23 22:29:32:060 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,253:41].[@-1,16:18='blk',<0>,253:47]
2022-03-23 22:29:32:061 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-03-23 22:29:32:061 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,254:51]
2022-03-23 22:29:32:061 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,254:59].[@-1,16:18='blk',<0>,254:65]
2022-03-23 22:29:32:061 action-translator LogManager.java:25 translate  $defa = arrayList.New() 
2022-03-23 22:29:32:061 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,255:4]
2022-03-23 22:29:32:061 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-03-23 22:29:32:061 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,259:35]
2022-03-23 22:29:32:062 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,259:63].[@-1,36:39='line',<0>,259:69]
2022-03-23 22:29:32:062 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,259:75].[@-1,48:50='pos',<0>,259:81]
2022-03-23 22:29:32:062 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,259:86].[@-1,64:64='l',<0>,259:97]
2022-03-23 22:29:32:063 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) 
2022-03-23 22:29:32:063 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,263:46]
2022-03-23 22:29:32:063 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,263:81].[@-1,41:44='line',<0>,263:85]
2022-03-23 22:29:32:063 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,263:92].[@-1,52:54='pos',<0>,263:96]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,263:102].[@-1,61:64='text',<0>,263:105]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,263:112].[@-1,74:75='ty',<0>,263:118]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,263:123].[@-1,90:90='p',<0>,263:134]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) 
2022-03-23 22:29:32:064 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,264:46]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,264:81].[@-1,41:44='line',<0>,264:85]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,264:92].[@-1,52:54='pos',<0>,264:96]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,264:102].[@-1,61:64='text',<0>,264:105]
2022-03-23 22:29:32:064 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,264:134].[@-1,101:101='p',<0>,264:145]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) 
2022-03-23 22:29:32:065 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,265:46]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,265:81].[@-1,41:44='line',<0>,265:85]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,265:92].[@-1,52:54='pos',<0>,265:96]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,265:102].[@-1,61:64='text',<0>,265:105]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,265:112].[@-1,74:75='ty',<0>,265:118]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,265:123].[@-1,90:90='p',<0>,265:134]
2022-03-23 22:29:32:065 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) 
2022-03-23 22:29:32:065 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,266:46]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,266:81].[@-1,41:44='line',<0>,266:85]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,266:92].[@-1,52:54='pos',<0>,266:96]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,266:102].[@-1,61:64='text',<0>,266:105]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,266:134].[@-1,101:101='p',<0>,266:145]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) 
2022-03-23 22:29:32:066 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,267:48]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,267:88].[@-1,46:49='line',<0>,267:92]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,267:99].[@-1,57:59='pos',<0>,267:103]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,267:109].[@-1,66:69='text',<0>,267:112]
2022-03-23 22:29:32:066 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,267:119].[@-1,83:83='t',<0>,267:129]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,267:133].[@-1,98:98='p',<0>,267:144]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) 
2022-03-23 22:29:32:067 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,268:46]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,268:86].[@-1,46:49='line',<0>,268:90]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,268:97].[@-1,57:59='pos',<0>,268:101]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,268:107].[@-1,66:69='text',<0>,268:110]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,268:117].[@-1,83:83='t',<0>,268:127]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,268:131].[@-1,98:98='p',<0>,268:142]
2022-03-23 22:29:32:067 action-translator LogManager.java:25 translate  $dec = $vectDeclaration.vec 
2022-03-23 22:29:32:068 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,269:20]
2022-03-23 22:29:32:068 action-translator LogManager.java:25 qattr [@-1,9:23='vectDeclaration',<0>,269:27].[@-1,25:27='vec',<0>,269:43]
2022-03-23 22:29:32:071 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false, nil, "") 
2022-03-23 22:29:32:071 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,273:81]
2022-03-23 22:29:32:071 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,273:122].[@-1,47:50='line',<0>,273:126]
2022-03-23 22:29:32:071 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,273:133].[@-1,58:60='pos',<0>,273:137]
2022-03-23 22:29:32:071 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,273:143].[@-1,67:70='text',<0>,273:146]
2022-03-23 22:29:32:071 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,273:153].[@-1,80:81='ty',<0>,273:159]
2022-03-23 22:29:32:071 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false, nil, "") 
2022-03-23 22:29:32:071 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,274:98]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,274:139].[@-1,47:50='line',<0>,274:143]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,274:150].[@-1,58:60='pos',<0>,274:154]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,274:160].[@-1,67:70='text',<0>,274:163]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,274:170].[@-1,80:81='ty',<0>,274:176]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,85:94='expression',<0>,274:181].[@-1,96:96='p',<0>,274:192]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, true, nil, "") 
2022-03-23 22:29:32:072 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,275:85]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,275:126].[@-1,47:50='line',<0>,275:130]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,275:137].[@-1,58:60='pos',<0>,275:141]
2022-03-23 22:29:32:072 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,275:147].[@-1,67:70='text',<0>,275:150]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,275:157].[@-1,80:81='ty',<0>,275:163]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true, nil, "") 
2022-03-23 22:29:32:073 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,276:102]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,276:143].[@-1,47:50='line',<0>,276:147]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,276:154].[@-1,58:60='pos',<0>,276:158]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,276:164].[@-1,67:70='text',<0>,276:167]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,276:174].[@-1,80:81='ty',<0>,276:180]
2022-03-23 22:29:32:073 action-translator LogManager.java:25 qattr [@-1,85:94='expression',<0>,276:185].[@-1,96:96='p',<0>,276:196]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false, $expression.p, "") 
2022-03-23 22:29:32:074 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,277:60]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,277:101].[@-1,47:50='line',<0>,277:105]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,277:112].[@-1,58:60='pos',<0>,277:116]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,277:122].[@-1,67:70='text',<0>,277:125]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,277:132].[@-1,80:81='ty',<0>,277:138]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 qattr [@-1,97:106='expression',<0>,277:155].[@-1,108:108='p',<0>,277:166]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, true, $expression.p, "") 
2022-03-23 22:29:32:074 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,278:64]
2022-03-23 22:29:32:074 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,278:105].[@-1,47:50='line',<0>,278:109]
2022-03-23 22:29:32:075 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,278:116].[@-1,58:60='pos',<0>,278:120]
2022-03-23 22:29:32:075 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,278:126].[@-1,67:70='text',<0>,278:129]
2022-03-23 22:29:32:075 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,278:136].[@-1,80:81='ty',<0>,278:142]
2022-03-23 22:29:32:075 action-translator LogManager.java:25 qattr [@-1,96:105='expression',<0>,278:158].[@-1,107:107='p',<0>,278:169]
2022-03-23 22:29:32:075 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, false, nil, $id2.text) 
2022-03-23 22:29:32:076 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,279:86]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,279:127].[@-1,47:50='line',<0>,279:131]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,279:138].[@-1,58:60='pos',<0>,279:142]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 qattr [@-1,64:66='id1',<0>,279:148].[@-1,68:71='text',<0>,279:152]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 qattr [@-1,114:116='id2',<0>,279:198].[@-1,118:121='text',<0>,279:202]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, $expression.p, false, nil, $id2.text) 
2022-03-23 22:29:32:076 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,280:103]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,280:144].[@-1,47:50='line',<0>,280:148]
2022-03-23 22:29:32:076 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,280:155].[@-1,58:60='pos',<0>,280:159]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,64:66='id1',<0>,280:165].[@-1,68:71='text',<0>,280:169]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,97:106='expression',<0>,280:198].[@-1,108:108='p',<0>,280:209]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,124:126='id2',<0>,280:225].[@-1,128:131='text',<0>,280:229]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, true, nil, $id2.text) 
2022-03-23 22:29:32:077 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,281:90]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,281:131].[@-1,47:50='line',<0>,281:135]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,281:142].[@-1,58:60='pos',<0>,281:146]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,64:66='id1',<0>,281:152].[@-1,68:71='text',<0>,281:156]
2022-03-23 22:29:32:077 action-translator LogManager.java:25 qattr [@-1,113:115='id2',<0>,281:201].[@-1,117:120='text',<0>,281:205]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, $expression.p, true, nil, $id2.text) 
2022-03-23 22:29:32:078 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,282:107]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,282:148].[@-1,47:50='line',<0>,282:152]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,282:159].[@-1,58:60='pos',<0>,282:163]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 qattr [@-1,64:66='id1',<0>,282:169].[@-1,68:71='text',<0>,282:173]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 qattr [@-1,97:106='expression',<0>,282:202].[@-1,108:108='p',<0>,282:213]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 qattr [@-1,123:125='id2',<0>,282:228].[@-1,127:130='text',<0>,282:232]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, false, $expression.p, $id2.text) 
2022-03-23 22:29:32:078 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,283:65]
2022-03-23 22:29:32:078 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,283:106].[@-1,47:50='line',<0>,283:110]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,283:117].[@-1,58:60='pos',<0>,283:121]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,64:66='id1',<0>,283:127].[@-1,68:71='text',<0>,283:131]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,109:118='expression',<0>,283:172].[@-1,120:120='p',<0>,283:183]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,124:126='id2',<0>,283:187].[@-1,128:131='text',<0>,283:191]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $id1.text, environment.WILDCARD, nil, true, $expression.p, $id2.text) 
2022-03-23 22:29:32:079 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,284:69]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,284:110].[@-1,47:50='line',<0>,284:114]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,284:121].[@-1,58:60='pos',<0>,284:125]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,64:66='id1',<0>,284:131].[@-1,68:71='text',<0>,284:135]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,108:117='expression',<0>,284:175].[@-1,119:119='p',<0>,284:186]
2022-03-23 22:29:32:079 action-translator LogManager.java:25 qattr [@-1,123:125='id2',<0>,284:190].[@-1,127:130='text',<0>,284:194]
2022-03-23 22:29:32:080 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2022-03-23 22:29:32:080 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,289:46]
2022-03-23 22:29:32:080 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,289:76].[@-1,39:42='line',<0>,289:83]
2022-03-23 22:29:32:080 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,289:90].[@-1,53:55='pos',<0>,289:97]
2022-03-23 22:29:32:080 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,289:103].[@-1,62:65='text',<0>,289:106]
2022-03-23 22:29:32:080 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,289:113].[@-1,83:83='l',<0>,289:127]
2022-03-23 22:29:32:081 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:081 action-translator LogManager.java:25 translate 
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                
2022-03-23 22:29:32:081 action-translator LogManager.java:25 qattr [@-1,59:61='id1',<0>,3:57].[@-1,63:66='text',<0>,3:61]
2022-03-23 22:29:32:082 action-translator LogManager.java:25 qattr [@-1,70:74='types',<0>,3:68].[@-1,76:77='ty',<0>,3:74]
2022-03-23 22:29:32:082 action-translator LogManager.java:25 setAttr [@-1,106:106='l',<0>,4:21] [@-1,109:124=' arrayList.New()',<0>,4:24]
2022-03-23 22:29:32:082 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-23 22:29:32:082 action-translator LogManager.java:25 attr [@-1,149:149='l',<0>,5:21]
2022-03-23 22:29:32:082 action-translator LogManager.java:25 translate 
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  
2022-03-23 22:29:32:082 action-translator LogManager.java:25 qattr [@-1,61:63='id1',<0>,8:59].[@-1,65:68='text',<0>,8:63]
2022-03-23 22:29:32:082 action-translator LogManager.java:25 qattr [@-1,94:96='id2',<0>,8:92].[@-1,98:101='text',<0>,8:96]
2022-03-23 22:29:32:082 action-translator LogManager.java:25 setAttr [@-1,128:128='l',<0>,9:23] [@-1,131:146=' arrayList.New()',<0>,9:26]
2022-03-23 22:29:32:083 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-23 22:29:32:083 action-translator LogManager.java:25 attr [@-1,173:173='l',<0>,10:23]
2022-03-23 22:29:32:083 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-23 22:29:32:083 action-translator LogManager.java:25 translate 
                                                  StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              
2022-03-23 22:29:32:083 action-translator LogManager.java:25 qattr [@-1,89:91='id1',<0>,15:87].[@-1,93:96='text',<0>,15:91]
2022-03-23 22:29:32:083 action-translator LogManager.java:25 qattr [@-1,100:104='types',<0>,15:98].[@-1,106:107='ty',<0>,15:104]
2022-03-23 22:29:32:083 action-translator LogManager.java:25 qattr [@-1,166:169='list',<0>,16:51].[@-1,171:171='l',<0>,16:56]
2022-03-23 22:29:32:083 action-translator LogManager.java:25 setAttr [@-1,238:238='l',<0>,17:51] [@-1,241:248=' $list.l',<0>,17:54]
2022-03-23 22:29:32:083 action-translator LogManager.java:25 translate  $list.l
2022-03-23 22:29:32:084 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,14:152].[@-1,7:7='l',<0>,14:157]
2022-03-23 22:29:32:084 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-23 22:29:32:084 action-translator LogManager.java:25 translate 
                                                    StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                                    $list.l.Add(StrDef);
                                                    $l = $list.l;
                                                
2022-03-23 22:29:32:084 action-translator LogManager.java:25 qattr [@-1,91:93='id1',<0>,20:89].[@-1,95:98='text',<0>,20:93]
2022-03-23 22:29:32:084 action-translator LogManager.java:25 qattr [@-1,123:125='id2',<0>,20:121].[@-1,127:130='text',<0>,20:125]
2022-03-23 22:29:32:084 action-translator LogManager.java:25 qattr [@-1,187:190='list',<0>,21:53].[@-1,192:192='l',<0>,21:58]
2022-03-23 22:29:32:084 action-translator LogManager.java:25 setAttr [@-1,261:261='l',<0>,22:53] [@-1,264:271=' $list.l',<0>,22:56]
2022-03-23 22:29:32:084 action-translator LogManager.java:25 translate  $list.l
2022-03-23 22:29:32:084 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,19:163].[@-1,7:7='l',<0>,19:168]
2022-03-23 22:29:32:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-23 22:29:32:085 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-23 22:29:32:085 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)
2022-03-23 22:29:32:085 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,316:24]
2022-03-23 22:29:32:085 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,316:58].[@-1,39:42='line',<0>,316:61]
2022-03-23 22:29:32:085 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,316:68].[@-1,49:51='pos',<0>,316:71]
2022-03-23 22:29:32:085 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,316:77].[@-1,58:61='text',<0>,316:80]
2022-03-23 22:29:32:086 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,316:87].[@-1,76:76='p',<0>,316:98]
2022-03-23 22:29:32:086 action-translator LogManager.java:25 translate  $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) 
2022-03-23 22:29:32:086 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,317:38]
2022-03-23 22:29:32:086 action-translator LogManager.java:25 qattr [@-1,38:53='listAccessStruct',<0>,317:74].[@-1,55:59='start',<0>,317:91]
2022-03-23 22:29:32:086 action-translator LogManager.java:25 qattr [@-1,72:87='listAccessStruct',<0>,317:108].[@-1,89:93='start',<0>,317:125]
2022-03-23 22:29:32:086 action-translator LogManager.java:25 qattr [@-1,109:124='listAccessStruct',<0>,317:145].[@-1,126:126='l',<0>,317:162]
2022-03-23 22:29:32:086 action-translator LogManager.java:25 qattr [@-1,130:139='expression',<0>,317:166].[@-1,141:141='p',<0>,317:177]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 translate  $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) 
2022-03-23 22:29:32:087 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,318:40]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,318:75].[@-1,40:43='line',<0>,318:78]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,318:85].[@-1,50:52='pos',<0>,318:88]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,318:94].[@-1,59:62='text',<0>,318:97]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 qattr [@-1,66:80='listAccessArray',<0>,318:104].[@-1,82:82='l',<0>,318:120]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 qattr [@-1,86:95='expression',<0>,318:124].[@-1,97:97='p',<0>,318:135]
2022-03-23 22:29:32:087 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:088 action-translator LogManager.java:25 translate 
    $l = arrayList.New()
    $l.Add($ID.text)

2022-03-23 22:29:32:088 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,3:5]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 attr [@-1,33:33='l',<0>,4:5]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,4:12].[@-1,43:46='text',<0>,4:15]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:088 action-translator LogManager.java:25 translate 
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            
2022-03-23 22:29:32:088 action-translator LogManager.java:25 qattr [@-1,48:51='list',<0>,9:46].[@-1,53:53='l',<0>,9:51]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,9:58].[@-1,63:66='text',<0>,9:61]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 attr [@-1,116:116='l',<0>,10:46]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 qattr [@-1,121:124='list',<0>,10:51].[@-1,126:126='l',<0>,10:56]
2022-03-23 22:29:32:088 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:089 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:089 action-translator LogManager.java:25 translate 
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          
2022-03-23 22:29:32:089 action-translator LogManager.java:25 attr [@-1,33:33='l',<0>,3:31]
2022-03-23 22:29:32:089 action-translator LogManager.java:25 attr [@-1,85:85='l',<0>,4:31]
2022-03-23 22:29:32:089 action-translator LogManager.java:25 qattr [@-1,92:101='expression',<0>,4:38].[@-1,103:103='p',<0>,4:49]
2022-03-23 22:29:32:089 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:090 action-translator LogManager.java:25 translate 
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           
2022-03-23 22:29:32:090 action-translator LogManager.java:25 qattr [@-1,63:66='list',<0>,9:61].[@-1,68:68='l',<0>,9:66]
2022-03-23 22:29:32:090 action-translator LogManager.java:25 qattr [@-1,75:84='expression',<0>,9:73].[@-1,86:86='p',<0>,9:84]
2022-03-23 22:29:32:090 action-translator LogManager.java:25 attr [@-1,151:151='l',<0>,10:61]
2022-03-23 22:29:32:090 action-translator LogManager.java:25 qattr [@-1,156:159='list',<0>,10:66].[@-1,161:161='l',<0>,10:71]
2022-03-23 22:29:32:090 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:091 action-translator LogManager.java:25 translate 
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        
2022-03-23 22:29:32:091 action-translator LogManager.java:25 qattr [@-1,98:107='expression',<0>,345:96].[@-1,109:109='p',<0>,345:107]
2022-03-23 22:29:32:091 action-translator LogManager.java:25 qattr [@-1,153:161='arrayType',<0>,346:40].[@-1,163:163='t',<0>,346:50]
2022-03-23 22:29:32:091 action-translator LogManager.java:25 attr [@-1,219:219='t',<0>,347:40]
2022-03-23 22:29:32:091 action-translator LogManager.java:25 qattr [@-1,224:232='arrayType',<0>,347:45].[@-1,234:234='t',<0>,347:55]
2022-03-23 22:29:32:091 action-translator LogManager.java:25 translate 
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         
2022-03-23 22:29:32:091 action-translator LogManager.java:25 attr [@-1,31:31='t',<0>,350:29]
2022-03-23 22:29:32:091 action-translator LogManager.java:25 qattr [@-1,117:121='types',<0>,351:65].[@-1,123:124='ty',<0>,351:71]
2022-03-23 22:29:32:091 action-translator LogManager.java:25 qattr [@-1,128:137='expression',<0>,351:76].[@-1,139:139='p',<0>,351:87]
2022-03-23 22:29:32:092 action-translator LogManager.java:25 attr [@-1,172:172='t',<0>,352:29]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 translate 
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        
2022-03-23 22:29:32:093 action-translator LogManager.java:25 attr [@-1,27:29='fun',<0>,358:25]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 qattr [@-1,59:62='FUNC',<0>,358:57].[@-1,64:67='line',<0>,358:62]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 qattr [@-1,71:74='FUNC',<0>,358:69].[@-1,76:78='pos',<0>,358:74]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,358:80].[@-1,85:88='text',<0>,358:83]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,358:90].[@-1,107:109='lpf',<0>,358:105]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,358:133].[@-1,141:143='blk',<0>,358:139]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       
2022-03-23 22:29:32:093 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,361:24]
2022-03-23 22:29:32:093 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,361:56].[@-1,63:66='line',<0>,361:61]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,361:68].[@-1,75:77='pos',<0>,361:73]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,361:79].[@-1,84:87='text',<0>,361:82]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,91:104='listParamsFunc',<0>,361:89].[@-1,106:108='lpf',<0>,361:104]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,112:116='types',<0>,361:110].[@-1,118:119='ty',<0>,361:116]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,123:127='block',<0>,361:121].[@-1,129:131='blk',<0>,361:127]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       
2022-03-23 22:29:32:094 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,364:24]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,364:56].[@-1,63:66='line',<0>,364:61]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,364:68].[@-1,75:77='pos',<0>,364:73]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,81:83='id1',<0>,364:79].[@-1,85:88='text',<0>,364:83]
2022-03-23 22:29:32:094 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,364:90].[@-1,107:109='lpf',<0>,364:105]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,364:133].[@-1,141:143='blk',<0>,364:139]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,147:149='id2',<0>,364:145].[@-1,151:154='text',<0>,364:149]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       
2022-03-23 22:29:32:095 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,367:24]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,367:56].[@-1,63:66='line',<0>,367:61]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,367:68].[@-1,75:77='pos',<0>,367:73]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,81:83='id1',<0>,367:79].[@-1,85:88='text',<0>,367:83]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,367:90].[@-1,107:109='lpf',<0>,367:105]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,367:133].[@-1,141:143='blk',<0>,367:139]
2022-03-23 22:29:32:095 action-translator LogManager.java:25 qattr [@-1,147:149='id2',<0>,367:145].[@-1,151:154='text',<0>,367:149]
2022-03-23 22:29:32:097 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:097 action-translator LogManager.java:25 translate 
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             
2022-03-23 22:29:32:097 action-translator LogManager.java:25 attr [@-1,19:21='lpf',<0>,3:17]
2022-03-23 22:29:32:097 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:63].[@-1,108:111='line',<0>,4:66]
2022-03-23 22:29:32:097 action-translator LogManager.java:25 qattr [@-1,115:116='ID',<0>,4:73].[@-1,118:120='pos',<0>,4:76]
2022-03-23 22:29:32:097 action-translator LogManager.java:25 qattr [@-1,124:125='ID',<0>,4:82].[@-1,127:130='text',<0>,4:85]
2022-03-23 22:29:32:097 action-translator LogManager.java:25 qattr [@-1,134:138='types',<0>,4:92].[@-1,140:141='ty',<0>,4:98]
2022-03-23 22:29:32:097 action-translator LogManager.java:25 attr [@-1,166:168='lpf',<0>,5:17]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              
2022-03-23 22:29:32:098 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,8:18]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,9:64].[@-1,110:113='line',<0>,9:67]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,9:74].[@-1,120:122='pos',<0>,9:77]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,9:83].[@-1,129:132='text',<0>,9:86]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 attr [@-1,177:179='lpf',<0>,10:18]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              
2022-03-23 22:29:32:098 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,13:18]
2022-03-23 22:29:32:098 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,14:64].[@-1,111:114='line',<0>,14:68]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,14:75].[@-1,122:124='pos',<0>,14:79]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,14:85].[@-1,132:135='text',<0>,14:89]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,14:118].[@-1,165:168='text',<0>,14:122]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 attr [@-1,190:192='lpf',<0>,15:18]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              
2022-03-23 22:29:32:099 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,18:18]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,19:64].[@-1,110:113='line',<0>,19:67]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,19:74].[@-1,120:122='pos',<0>,19:77]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,19:83].[@-1,129:132='text',<0>,19:86]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 attr [@-1,176:178='lpf',<0>,20:18]
2022-03-23 22:29:32:099 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              
2022-03-23 22:29:32:099 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,23:18]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,24:64].[@-1,111:114='line',<0>,24:68]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,24:75].[@-1,122:124='pos',<0>,24:79]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,24:85].[@-1,132:135='text',<0>,24:89]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,24:118].[@-1,165:168='text',<0>,24:122]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 attr [@-1,190:192='lpf',<0>,25:18]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 translate  $lpf = arrayList.New() 
2022-03-23 22:29:32:100 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,27:12]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-23 22:29:32:100 action-translator LogManager.java:25 translate 
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              
2022-03-23 22:29:32:100 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,31:76].[@-1,81:84='line',<0>,31:79]
2022-03-23 22:29:32:100 action-translator LogManager.java:25 qattr [@-1,88:89='ID',<0>,31:86].[@-1,91:93='pos',<0>,31:89]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,97:98='ID',<0>,31:95].[@-1,100:103='text',<0>,31:98]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,107:111='types',<0>,31:105].[@-1,113:114='ty',<0>,31:111]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,152:155='list',<0>,32:30].[@-1,157:159='lpf',<0>,32:35]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 attr [@-1,206:208='lpf',<0>,33:30]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,213:216='list',<0>,33:37].[@-1,218:220='lpf',<0>,33:42]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-23 22:29:32:101 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,36:70].[@-1,75:78='line',<0>,36:73]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,36:80].[@-1,85:87='pos',<0>,36:83]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,36:89].[@-1,94:97='text',<0>,36:92]
2022-03-23 22:29:32:101 action-translator LogManager.java:25 qattr [@-1,148:151='list',<0>,37:24].[@-1,153:155='lpf',<0>,37:29]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 attr [@-1,196:198='lpf',<0>,38:24]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,203:206='list',<0>,38:31].[@-1,208:210='lpf',<0>,38:36]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-23 22:29:32:102 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,41:70].[@-1,76:79='line',<0>,41:74]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,41:81].[@-1,87:89='pos',<0>,41:85]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,41:91].[@-1,97:100='text',<0>,41:95]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,126:128='id2',<0>,41:124].[@-1,130:133='text',<0>,41:128]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,161:164='list',<0>,42:24].[@-1,166:168='lpf',<0>,42:29]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 attr [@-1,209:211='lpf',<0>,43:24]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 qattr [@-1,216:219='list',<0>,43:31].[@-1,221:223='lpf',<0>,43:36]
2022-03-23 22:29:32:102 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-23 22:29:32:103 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-23 22:29:32:103 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,46:70].[@-1,75:78='line',<0>,46:73]
2022-03-23 22:29:32:103 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,46:80].[@-1,85:87='pos',<0>,46:83]
2022-03-23 22:29:32:103 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,46:89].[@-1,94:97='text',<0>,46:92]
2022-03-23 22:29:32:103 action-translator LogManager.java:25 qattr [@-1,148:151='list',<0>,47:24].[@-1,153:155='lpf',<0>,47:29]
2022-03-23 22:29:32:103 action-translator LogManager.java:25 attr [@-1,196:198='lpf',<0>,48:24]
2022-03-23 22:29:32:103 action-translator LogManager.java:25 qattr [@-1,203:206='list',<0>,48:31].[@-1,208:210='lpf',<0>,48:36]
2022-03-23 22:29:32:103 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-23 22:29:32:103 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-23 22:29:32:103 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,51:70].[@-1,76:79='line',<0>,51:74]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,51:81].[@-1,87:89='pos',<0>,51:85]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,51:91].[@-1,97:100='text',<0>,51:95]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 qattr [@-1,126:128='id2',<0>,51:124].[@-1,130:133='text',<0>,51:128]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 qattr [@-1,161:164='list',<0>,52:24].[@-1,166:168='lpf',<0>,52:29]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 attr [@-1,209:211='lpf',<0>,53:24]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 qattr [@-1,216:219='list',<0>,53:31].[@-1,221:223='lpf',<0>,53:36]
2022-03-23 22:29:32:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-23 22:29:32:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-23 22:29:32:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-23 22:29:32:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-23 22:29:32:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-23 22:29:32:105 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-03-23 22:29:32:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,426:8]
2022-03-23 22:29:32:105 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-03-23 22:29:32:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,427:10]
2022-03-23 22:29:32:105 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-03-23 22:29:32:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,428:9]
2022-03-23 22:29:32:105 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-03-23 22:29:32:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,429:9]
2022-03-23 22:29:32:106 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-03-23 22:29:32:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,430:9]
2022-03-23 22:29:32:106 action-translator LogManager.java:25 translate  $ty = environment.STR 
2022-03-23 22:29:32:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,431:9]
2022-03-23 22:29:32:106 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-03-23 22:29:32:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,432:12]
2022-03-23 22:29:32:106 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-03-23 22:29:32:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,433:11]
2022-03-23 22:29:32:107 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:107 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-03-23 22:29:32:107 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-03-23 22:29:32:107 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-03-23 22:29:32:107 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-03-23 22:29:32:107 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:107 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-03-23 22:29:32:107 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-03-23 22:29:32:107 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-03-23 22:29:32:108 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-03-23 22:29:32:108 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-03-23 22:29:32:108 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:108 action-translator LogManager.java:25 translate  $lv = expressions.NewVectorList($exp1.start.GetLine(),$exp1.start.GetColumn(), $exp1.p, $exp2.p) 
2022-03-23 22:29:32:108 action-translator LogManager.java:25 attr [@-1,2:3='lv',<0>,448:40]
2022-03-23 22:29:32:108 action-translator LogManager.java:25 qattr [@-1,34:37='exp1',<0>,448:72].[@-1,39:43='start',<0>,448:77]
2022-03-23 22:29:32:108 action-translator LogManager.java:25 qattr [@-1,56:59='exp1',<0>,448:94].[@-1,61:65='start',<0>,448:99]
2022-03-23 22:29:32:109 action-translator LogManager.java:25 qattr [@-1,81:84='exp1',<0>,448:119].[@-1,86:86='p',<0>,448:124]
2022-03-23 22:29:32:109 action-translator LogManager.java:25 qattr [@-1,90:93='exp2',<0>,448:128].[@-1,95:95='p',<0>,448:133]
2022-03-23 22:29:32:109 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:109 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-03-23 22:29:32:109 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:42]
2022-03-23 22:29:32:109 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,2:47].[@-1,17:17='p',<0>,2:57]
2022-03-23 22:29:32:109 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-03-23 22:29:32:110 action-translator LogManager.java:25 translate  $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) 
2022-03-23 22:29:32:110 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:145]
2022-03-23 22:29:32:110 action-translator LogManager.java:25 qattr [@-1,28:33='expuno',<0>,5:171].[@-1,35:39='start',<0>,5:178]
2022-03-23 22:29:32:110 action-translator LogManager.java:25 qattr [@-1,52:57='expuno',<0>,5:195].[@-1,59:63='start',<0>,5:202]
2022-03-23 22:29:32:110 action-translator LogManager.java:25 qattr [@-1,79:84='expuno',<0>,5:222].[@-1,86:86='p',<0>,5:229]
2022-03-23 22:29:32:110 action-translator LogManager.java:25 qattr [@-1,90:95='expdos',<0>,5:233].[@-1,97:97='p',<0>,5:240]
2022-03-23 22:29:32:110 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-03-23 22:29:32:110 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-03-23 22:29:32:110 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,457:42]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,457:71].[@-1,34:37='line',<0>,457:74]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,457:81].[@-1,44:46='pos',<0>,457:84]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,457:90].[@-1,53:56='text',<0>,457:93]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,457:100].[@-1,75:75='l',<0>,457:115]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-03-23 22:29:32:111 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,458:42]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,458:71].[@-1,34:37='line',<0>,458:74]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,458:81].[@-1,44:46='pos',<0>,458:84]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,458:90].[@-1,53:56='text',<0>,458:93]
2022-03-23 22:29:32:111 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,458:100].[@-1,75:75='l',<0>,458:115]
2022-03-23 22:29:32:113 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:113 action-translator LogManager.java:25 translate $p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)
2022-03-23 22:29:32:113 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:72]
2022-03-23 22:29:32:113 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:102].[@-1,35:38='line',<0>,2:106]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:112].[@-1,45:47='pos',<0>,2:116]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:121].[@-1,55:55='p',<0>,2:126]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 translate $p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)
2022-03-23 22:29:32:114 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:69]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:99].[@-1,35:38='line',<0>,3:103]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 qattr [@-1,41:43='NOT',<0>,3:109].[@-1,45:47='pos',<0>,3:113]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,3:118].[@-1,55:55='p',<0>,3:123]
2022-03-23 22:29:32:114 action-translator LogManager.java:25 qattr [@-1,58:60='NOT',<0>,3:126].[@-1,62:65='text',<0>,3:130]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 translate  $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2022-03-23 22:29:32:115 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:88]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:114].[@-1,35:38='line',<0>,4:121]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:128].[@-1,49:51='pos',<0>,4:135]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:141].[@-1,66:66='l',<0>,4:152]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 translate  $p = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l) 
2022-03-23 22:29:32:115 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:134]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 qattr [@-1,29:35='VECTOR1',<0>,5:161].[@-1,37:40='line',<0>,5:169]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 qattr [@-1,44:50='VECTOR1',<0>,5:176].[@-1,52:54='pos',<0>,5:184]
2022-03-23 22:29:32:115 action-translator LogManager.java:25 qattr [@-1,58:67='listParams',<0>,5:190].[@-1,69:69='l',<0>,5:201]
2022-03-23 22:29:32:116 action-translator LogManager.java:25 translate  $p = $listVec.lv 
2022-03-23 22:29:32:116 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:131]
2022-03-23 22:29:32:116 action-translator LogManager.java:25 qattr [@-1,7:13='listVec',<0>,6:136].[@-1,15:16='lv',<0>,6:144]
2022-03-23 22:29:32:116 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-03-23 22:29:32:116 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:88]
2022-03-23 22:29:32:116 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,7:93].[@-1,18:18='p',<0>,7:104]
2022-03-23 22:29:32:116 action-translator LogManager.java:25 translate  $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2022-03-23 22:29:32:116 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:115]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,8:145].[@-1,35:38='line',<0>,8:148]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,8:155].[@-1,45:47='pos',<0>,8:158]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,8:164].[@-1,54:57='text',<0>,8:167]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,8:174].[@-1,75:75='l',<0>,8:188]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-03-23 22:29:32:117 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:42]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,9:47].[@-1,20:21='cf',<0>,9:60]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-03-23 22:29:32:117 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:63]
2022-03-23 22:29:32:117 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,10:68].[@-1,20:21='cf',<0>,10:81]
2022-03-23 22:29:32:118 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-03-23 22:29:32:118 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:40]
2022-03-23 22:29:32:118 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,11:45].[@-1,18:19='cm',<0>,11:56]
2022-03-23 22:29:32:118 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-03-23 22:29:32:118 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:61]
2022-03-23 22:29:32:118 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,12:66].[@-1,18:19='cm',<0>,12:77]
2022-03-23 22:29:32:118 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-03-23 22:29:32:118 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:39]
2022-03-23 22:29:32:118 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,13:44].[@-1,17:17='p',<0>,13:54]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 translate  $p = $condIf.ifCond 
2022-03-23 22:29:32:119 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:36]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 qattr [@-1,7:12='condIf',<0>,14:41].[@-1,14:19='ifCond',<0>,14:48]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 translate  $p = $condMatch.mtch 
2022-03-23 22:29:32:119 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,15:39]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 qattr [@-1,7:15='condMatch',<0>,15:44].[@-1,17:20='mtch',<0>,15:54]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 translate  $p = $loopBucle.lb 
2022-03-23 22:29:32:119 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,16:39]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 qattr [@-1,7:15='loopBucle',<0>,16:44].[@-1,17:18='lb',<0>,16:54]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 translate  $p = $expVectors.ev 
2022-03-23 22:29:32:119 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,17:40]
2022-03-23 22:29:32:119 action-translator LogManager.java:25 qattr [@-1,7:16='expVectors',<0>,17:45].[@-1,18:19='ev',<0>,17:56]
2022-03-23 22:29:32:120 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-03-23 22:29:32:120 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-23 22:29:32:120 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,20:166]
2022-03-23 22:29:32:120 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,20:196].[@-1,36:40='start',<0>,20:201]
2022-03-23 22:29:32:120 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,20:218].[@-1,58:62='start',<0>,20:223]
2022-03-23 22:29:32:120 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,20:242].[@-1,82:82='p',<0>,20:247]
2022-03-23 22:29:32:120 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,20:250].[@-1,88:91='text',<0>,20:253]
2022-03-23 22:29:32:121 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,20:259].[@-1,99:99='p',<0>,20:264]
2022-03-23 22:29:32:121 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-03-23 22:29:32:121 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-23 22:29:32:121 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,21:155]
2022-03-23 22:29:32:121 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,21:185].[@-1,36:40='start',<0>,21:190]
2022-03-23 22:29:32:121 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,21:207].[@-1,58:62='start',<0>,21:212]
2022-03-23 22:29:32:121 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,21:231].[@-1,82:82='p',<0>,21:236]
2022-03-23 22:29:32:121 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,21:239].[@-1,88:91='text',<0>,21:242]
2022-03-23 22:29:32:122 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,21:248].[@-1,99:99='p',<0>,21:253]
2022-03-23 22:29:32:122 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-03-23 22:29:32:122 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-23 22:29:32:122 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,22:265]
2022-03-23 22:29:32:122 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,22:295].[@-1,36:40='start',<0>,22:300]
2022-03-23 22:29:32:122 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,22:317].[@-1,58:62='start',<0>,22:322]
2022-03-23 22:29:32:123 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,22:341].[@-1,82:82='p',<0>,22:346]
2022-03-23 22:29:32:123 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,22:349].[@-1,88:91='text',<0>,22:352]
2022-03-23 22:29:32:123 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,22:358].[@-1,99:99='p',<0>,22:363]
2022-03-23 22:29:32:123 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-03-23 22:29:32:123 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-03-23 22:29:32:123 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-03-23 22:29:32:124 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,485:34].[@-1,43:46='text',<0>,485:41]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,486:47].[@-1,110:113='text',<0>,486:54]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,490:17]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,257:262='NUMBER',<0>,490:47].[@-1,264:267='line',<0>,490:54]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,270:275='NUMBER',<0>,490:60].[@-1,277:279='pos',<0>,490:67]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,366:371='NUMBER',<0>,492:41].[@-1,373:376='text',<0>,492:48]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 attr [@-1,485:485='p',<0>,496:17]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,515:520='NUMBER',<0>,496:47].[@-1,522:525='line',<0>,496:54]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,528:533='NUMBER',<0>,496:60].[@-1,535:537='pos',<0>,496:67]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 translate  $p = $stringTypes.st  
2022-03-23 22:29:32:124 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,499:19]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,7:17='stringTypes',<0>,499:24].[@-1,19:20='st',<0>,499:36]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,$CHARACTER.text,environment.CHAR) 
2022-03-23 22:29:32:124 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,500:14]
2022-03-23 22:29:32:124 action-translator LogManager.java:25 qattr [@-1,32:40='CHARACTER',<0>,500:44].[@-1,42:45='line',<0>,500:54]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,49:57='CHARACTER',<0>,500:61].[@-1,59:61='pos',<0>,500:71]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,64:72='CHARACTER',<0>,500:76].[@-1,74:77='text',<0>,500:86]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) 
2022-03-23 22:29:32:125 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,501:8]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,501:38].[@-1,36:39='line',<0>,501:42]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,501:49].[@-1,47:49='pos',<0>,501:53]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) 
2022-03-23 22:29:32:125 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,502:8]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,502:38].[@-1,36:39='line',<0>,502:42]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,502:49].[@-1,47:49='pos',<0>,502:53]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-23 22:29:32:125 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,503:19]
2022-03-23 22:29:32:125 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,503:24].[@-1,12:12='p',<0>,503:29]
2022-03-23 22:29:32:126 action-translator LogManager.java:25 translate 
                                     str := $STRING.text
                                     $st = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STRING)
                                 
2022-03-23 22:29:32:126 action-translator LogManager.java:25 qattr [@-1,47:52='STRING',<0>,508:45].[@-1,54:57='text',<0>,508:52]
2022-03-23 22:29:32:126 action-translator LogManager.java:25 attr [@-1,98:99='st',<0>,509:38]
2022-03-23 22:29:32:126 action-translator LogManager.java:25 qattr [@-1,129:134='STRING',<0>,509:69].[@-1,136:139='line',<0>,509:76]
2022-03-23 22:29:32:126 action-translator LogManager.java:25 qattr [@-1,143:148='STRING',<0>,509:83].[@-1,150:152='pos',<0>,509:90]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 translate 
              str := $STRING.text
              $st = expressions.NewPrimitive($AMP.line, $AMP.pos,str[1:len(str)-1],environment.STR)
          
2022-03-23 22:29:32:127 action-translator LogManager.java:25 qattr [@-1,24:29='STRING',<0>,512:22].[@-1,31:34='text',<0>,512:29]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 attr [@-1,52:53='st',<0>,513:15]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 qattr [@-1,83:85='AMP',<0>,513:46].[@-1,87:90='line',<0>,513:50]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 qattr [@-1,94:96='AMP',<0>,513:57].[@-1,98:100='pos',<0>,513:61]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:127 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2022-03-23 22:29:32:127 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2022-03-23 22:29:32:127 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-23 22:29:32:128 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) 
2022-03-23 22:29:32:128 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:136]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:168].[@-1,39:43='start',<0>,5:173]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:191].[@-1,62:66='start',<0>,5:196]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:216].[@-1,87:87='p',<0>,5:221]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,5:225].[@-1,102:102='p',<0>,5:236]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:128 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2022-03-23 22:29:32:128 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2022-03-23 22:29:32:128 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2022-03-23 22:29:32:129 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2022-03-23 22:29:32:129 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2022-03-23 22:29:32:129 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2022-03-23 22:29:32:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-23 22:29:32:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:129 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:129 action-translator LogManager.java:25 translate 
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                
2022-03-23 22:29:32:130 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,3:60].[@-1,65:68='text',<0>,3:63]
2022-03-23 22:29:32:130 action-translator LogManager.java:25 qattr [@-1,72:81='expression',<0>,3:70].[@-1,83:83='p',<0>,3:81]
2022-03-23 22:29:32:130 action-translator LogManager.java:25 setAttr [@-1,108:108='l',<0>,4:21] [@-1,111:126=' arrayList.New()',<0>,4:24]
2022-03-23 22:29:32:130 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-23 22:29:32:130 action-translator LogManager.java:25 attr [@-1,151:151='l',<0>,5:21]
2022-03-23 22:29:32:130 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:130 action-translator LogManager.java:25 translate 
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              
2022-03-23 22:29:32:130 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,10:90].[@-1,95:98='text',<0>,10:93]
2022-03-23 22:29:32:131 action-translator LogManager.java:25 qattr [@-1,102:111='expression',<0>,10:100].[@-1,113:113='p',<0>,10:111]
2022-03-23 22:29:32:131 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,11:51].[@-1,173:173='l',<0>,11:56]
2022-03-23 22:29:32:131 action-translator LogManager.java:25 setAttr [@-1,240:240='l',<0>,12:51] [@-1,243:250=' $list.l',<0>,12:54]
2022-03-23 22:29:32:131 action-translator LogManager.java:25 translate  $list.l
2022-03-23 22:29:32:131 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:153].[@-1,7:7='l',<0>,9:158]
2022-03-23 22:29:32:131 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:132 action-translator LogManager.java:25 translate  $ev = expressions.NewRemove($ID.line, $ID.pos, $ID.text, $expression.p) 
2022-03-23 22:29:32:132 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,537:45]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,537:73].[@-1,33:36='line',<0>,537:76]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,537:83].[@-1,43:45='pos',<0>,537:86]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,537:92].[@-1,52:55='text',<0>,537:95]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,59:68='expression',<0>,537:102].[@-1,70:70='p',<0>,537:113]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 translate  $ev = expressions.NewContains($ID.line, $ID.pos, $ID.text, $expression.p) 
2022-03-23 22:29:32:132 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,538:51]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,538:81].[@-1,35:38='line',<0>,538:84]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,538:91].[@-1,45:47='pos',<0>,538:94]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,538:100].[@-1,54:57='text',<0>,538:103]
2022-03-23 22:29:32:132 action-translator LogManager.java:25 qattr [@-1,61:70='expression',<0>,538:110].[@-1,72:72='p',<0>,538:121]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 translate  $ev = expressions.NewLen($ID.line, $ID.pos, $ID.text) 
2022-03-23 22:29:32:133 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,539:31]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 qattr [@-1,27:28='ID',<0>,539:56].[@-1,30:33='line',<0>,539:59]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,539:66].[@-1,40:42='pos',<0>,539:69]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,539:75].[@-1,49:52='text',<0>,539:78]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 translate  $ev = expressions.NewCapacity($ID.line, $ID.pos, $ID.text) 
2022-03-23 22:29:32:133 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,540:36]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,540:66].[@-1,35:38='line',<0>,540:69]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,540:76].[@-1,45:47='pos',<0>,540:79]
2022-03-23 22:29:32:133 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,540:85].[@-1,54:57='text',<0>,540:88]
2022-03-23 22:29:32:134 action-translator LogManager.java:25 translate  $cm = expressions.NewModuleAccess($listIdMod.start.GetLine(),$listIdMod.start.GetColumn(), $listIdMod.l, $expression.p ) 
2022-03-23 22:29:32:134 action-translator LogManager.java:25 attr [@-1,2:3='cm',<0>,544:25]
2022-03-23 22:29:32:134 action-translator LogManager.java:25 qattr [@-1,36:44='listIdMod',<0>,544:59].[@-1,46:50='start',<0>,544:69]
2022-03-23 22:29:32:134 action-translator LogManager.java:25 qattr [@-1,63:71='listIdMod',<0>,544:86].[@-1,73:77='start',<0>,544:96]
2022-03-23 22:29:32:134 action-translator LogManager.java:25 qattr [@-1,93:101='listIdMod',<0>,544:116].[@-1,103:103='l',<0>,544:126]
2022-03-23 22:29:32:134 action-translator LogManager.java:25 qattr [@-1,107:116='expression',<0>,544:130].[@-1,118:118='p',<0>,544:141]
2022-03-23 22:29:32:134 action-translator LogManager.java:25 translate 
2022-03-23 22:29:32:135 action-translator LogManager.java:25 translate 
               $l = arrayList.New()
               $l.Add($ID.text)
            
2022-03-23 22:29:32:135 action-translator LogManager.java:25 attr [@-1,18:18='l',<0>,3:16]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 attr [@-1,55:55='l',<0>,4:16]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,4:23].[@-1,65:68='text',<0>,4:26]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:135 action-translator LogManager.java:25 translate 
                                        $list.l.Add($ID.text)
                                        $l = $list.l
                                     
2022-03-23 22:29:32:135 action-translator LogManager.java:25 qattr [@-1,43:46='list',<0>,9:41].[@-1,48:48='l',<0>,9:46]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,9:53].[@-1,58:61='text',<0>,9:56]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 attr [@-1,106:106='l',<0>,10:41]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 qattr [@-1,111:114='list',<0>,10:46].[@-1,116:116='l',<0>,10:51]
2022-03-23 22:29:32:135 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-23 22:29:32:724 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-23 22:29:32:724 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-23 22:29:32:965 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-23 22:29:32:965 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

