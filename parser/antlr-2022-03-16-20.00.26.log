2022-03-16 20:00:25:138 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns string hi) (BLOCK (ALT declaration PYC {$hi = "declaration"}) (ALT function {$hi = "function"}) (ALT module {$hi = "module"}))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ instructions LLAVEDER { $mainInst = $instructions.insts }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond}))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER { $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk) }) (ALT IF expression LLAVEIZQ block LLAVEDER))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                            newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                           $arrayType.t.Add(newType)
                                           $t = $arrayType.t
                                            }) (ALT CORIZQ types PYC expression CORDER {
                                        $t = arrayList.New()
                                        newType := environment.NewArrayType($types.ty, $expression.p)
                                        $t.Add(newType)
                                     }))) (RULE function (returns ) (BLOCK (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ instructions LLAVEDER))) (RULE module (returns ) (BLOCK (ALT MODULE ID LLAVEIZQ LLAVEDER))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT VECTOR { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT condIf { $p = $condIf.ifCond }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR))) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT primitive { $p = $primitive.p }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.INTEGER)
            }
        }) (ALT STRING {
                str := $STRING.text
                $p = expressions.NewPrimitive(0,0,str[1:len(str)-1],environment.STRING)
            }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2022-03-16 20:00:25:165 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns string hi) (BLOCK (ALT declaration PYC {$hi = "declaration"}) (ALT function {$hi = "function"}) (ALT module {$hi = "module"}))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ instructions LLAVEDER { $mainInst = $instructions.insts }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond}))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER { $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk) }) (ALT IF expression LLAVEIZQ block LLAVEDER))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                            newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                           $arrayType.t.Add(newType)
                                           $t = $arrayType.t
                                            }) (ALT CORIZQ types PYC expression CORDER {
                                        $t = arrayList.New()
                                        newType := environment.NewArrayType($types.ty, $expression.p)
                                        $t.Add(newType)
                                     }))) (RULE function (returns ) (BLOCK (ALT FUNC ID PARIZQ listParams PARDER LLAVEIZQ instructions LLAVEDER))) (RULE module (returns ) (BLOCK (ALT MODULE ID LLAVEIZQ LLAVEDER))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT VECTOR { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT condIf { $p = $condIf.ifCond }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (SET MUL DIV)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR)) (= opDe expr_arit) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT primitive { $p = $primitive.p }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.INTEGER)
            }
        }) (ALT STRING {
                str := $STRING.text
                $p = expressions.NewPrimitive(0,0,str[1:len(str)-1],environment.STRING)
            }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2022-03-16 20:00:25:336 left-recursion LogManager.java:25 block returns [*arrayList.List blk]
    :   ( {} instruction<tokenIndex=224> { $blk.Add($instruction.inst) } 
        | expression<tokenIndex=230> { $blk.Add($expression.p) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> instruction<tokenIndex=208> {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> expression<tokenIndex=218> {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }
        )*
    ;
2022-03-16 20:00:25:340 grammar LogManager.java:25 added: (RULE block (returns *arrayList.List blk) (BLOCK (ALT (BLOCK (ALT {} (instruction (ELEMENT_OPTIONS (= tokenIndex 224))) { $blk.Add($instruction.inst) }) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 230))) { $blk.Add($expression.p) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (instruction (ELEMENT_OPTIONS (= tokenIndex 208))) {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (expression (ELEMENT_OPTIONS (= tokenIndex 218))) {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }))))))
2022-03-16 20:00:25:388 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=522> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=514> expression<tokenIndex=516>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-03-16 20:00:25:392 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 522))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 514))) (expression (ELEMENT_OPTIONS (= tokenIndex 516))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-03-16 20:00:25:476 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} CORIZQ<tokenIndex=618> listParams<tokenIndex=620> CORDER<tokenIndex=622> { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | PARIZQ<tokenIndex=628> expression<tokenIndex=630> PARDER<tokenIndex=632> { $p = $expression.p } 
        | primitive<tokenIndex=638> { $p = $primitive.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> op=(MUL<tokenIndex=561>|DIV<tokenIndex=563>) opDe=expr_arit<tokenIndex=568,p=7> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> op=(ADD<tokenIndex=581>|SUB<tokenIndex=583>) opDe=expr_arit<tokenIndex=588,p=6> {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=(MENOR<tokenIndex=601>|MENORIGUAL<tokenIndex=603>|MAYORIGUAL<tokenIndex=605>|MAYOR<tokenIndex=607>) opDe=expr_arit<tokenIndex=612,p=5> {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}
        )*
    ;
2022-03-16 20:00:25:484 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 618))) (listParams (ELEMENT_OPTIONS (= tokenIndex 620))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 622))) { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 628))) (expression (ELEMENT_OPTIONS (= tokenIndex 630))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 632))) { $p = $expression.p }) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 638))) { $p = $primitive.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 561))) (DIV (ELEMENT_OPTIONS (= tokenIndex 563))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 568) (= p 7)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 581))) (SUB (ELEMENT_OPTIONS (= tokenIndex 583))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 588) (= p 6)))) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 601))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 603))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 605))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 607))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 612) (= p 5)))) {$p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)}))))))
2022-03-16 20:00:25:524 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=693> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=683> expression<tokenIndex=685> CORDER<tokenIndex=687> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }
        )*
    ;
2022-03-16 20:00:25:532 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 693))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 683))) (expression (ELEMENT_OPTIONS (= tokenIndex 685))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 687))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }))))))
2022-03-16 20:00:25:548 grammar LogManager.java:25 import INT=1
2022-03-16 20:00:25:548 grammar LogManager.java:25 import FLOAT=2
2022-03-16 20:00:25:548 grammar LogManager.java:25 import BOOL=3
2022-03-16 20:00:25:548 grammar LogManager.java:25 import CHAR=4
2022-03-16 20:00:25:548 grammar LogManager.java:25 import STR1=5
2022-03-16 20:00:25:548 grammar LogManager.java:25 import STR2=6
2022-03-16 20:00:25:548 grammar LogManager.java:25 import USIZE=7
2022-03-16 20:00:25:548 grammar LogManager.java:25 import VECTOR=8
2022-03-16 20:00:25:548 grammar LogManager.java:25 import STRUCT=9
2022-03-16 20:00:25:548 grammar LogManager.java:25 import POW=10
2022-03-16 20:00:25:548 grammar LogManager.java:25 import PRINT=11
2022-03-16 20:00:25:548 grammar LogManager.java:25 import LET=12
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MUT=13
2022-03-16 20:00:25:548 grammar LogManager.java:25 import FUNC=14
2022-03-16 20:00:25:548 grammar LogManager.java:25 import ARROW1=15
2022-03-16 20:00:25:548 grammar LogManager.java:25 import ARROW2=16
2022-03-16 20:00:25:548 grammar LogManager.java:25 import ABS=17
2022-03-16 20:00:25:548 grammar LogManager.java:25 import SQRT=18
2022-03-16 20:00:25:548 grammar LogManager.java:25 import TOSTR=19
2022-03-16 20:00:25:548 grammar LogManager.java:25 import CLONE=20
2022-03-16 20:00:25:548 grammar LogManager.java:25 import NEW=21
2022-03-16 20:00:25:548 grammar LogManager.java:25 import LEN=22
2022-03-16 20:00:25:548 grammar LogManager.java:25 import PUSH=23
2022-03-16 20:00:25:548 grammar LogManager.java:25 import REMOVE=24
2022-03-16 20:00:25:548 grammar LogManager.java:25 import CONTAINS=25
2022-03-16 20:00:25:548 grammar LogManager.java:25 import INSERT=26
2022-03-16 20:00:25:548 grammar LogManager.java:25 import CAPACITY=27
2022-03-16 20:00:25:548 grammar LogManager.java:25 import WCAPACITY=28
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MAIN=29
2022-03-16 20:00:25:548 grammar LogManager.java:25 import IF=30
2022-03-16 20:00:25:548 grammar LogManager.java:25 import ELSE=31
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MATCH=32
2022-03-16 20:00:25:548 grammar LogManager.java:25 import LOOP=33
2022-03-16 20:00:25:548 grammar LogManager.java:25 import WHILE=34
2022-03-16 20:00:25:548 grammar LogManager.java:25 import FOR=35
2022-03-16 20:00:25:548 grammar LogManager.java:25 import IN=36
2022-03-16 20:00:25:548 grammar LogManager.java:25 import BREAK=37
2022-03-16 20:00:25:548 grammar LogManager.java:25 import CONTINUE=38
2022-03-16 20:00:25:548 grammar LogManager.java:25 import RETURN=39
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MODULE=40
2022-03-16 20:00:25:548 grammar LogManager.java:25 import PUB=41
2022-03-16 20:00:25:548 grammar LogManager.java:25 import NUMBER=42
2022-03-16 20:00:25:548 grammar LogManager.java:25 import STRING=43
2022-03-16 20:00:25:548 grammar LogManager.java:25 import ID=44
2022-03-16 20:00:25:548 grammar LogManager.java:25 import PUNTO=45
2022-03-16 20:00:25:548 grammar LogManager.java:25 import C_PTS=46
2022-03-16 20:00:25:548 grammar LogManager.java:25 import D_PTS=47
2022-03-16 20:00:25:548 grammar LogManager.java:25 import PYC=48
2022-03-16 20:00:25:548 grammar LogManager.java:25 import COMA=49
2022-03-16 20:00:25:548 grammar LogManager.java:25 import DIFERENTE=50
2022-03-16 20:00:25:548 grammar LogManager.java:25 import IG_IG=51
2022-03-16 20:00:25:548 grammar LogManager.java:25 import NOT=52
2022-03-16 20:00:25:548 grammar LogManager.java:25 import OR=53
2022-03-16 20:00:25:548 grammar LogManager.java:25 import AND=54
2022-03-16 20:00:25:548 grammar LogManager.java:25 import IGUAL=55
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MAYORIGUAL=56
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MENORIGUAL=57
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MAYOR=58
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MENOR=59
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MUL=60
2022-03-16 20:00:25:548 grammar LogManager.java:25 import DIV=61
2022-03-16 20:00:25:548 grammar LogManager.java:25 import ADD=62
2022-03-16 20:00:25:548 grammar LogManager.java:25 import SUB=63
2022-03-16 20:00:25:548 grammar LogManager.java:25 import MOD=64
2022-03-16 20:00:25:548 grammar LogManager.java:25 import PARIZQ=65
2022-03-16 20:00:25:551 grammar LogManager.java:25 import PARDER=66
2022-03-16 20:00:25:551 grammar LogManager.java:25 import LLAVEIZQ=67
2022-03-16 20:00:25:551 grammar LogManager.java:25 import LLAVEDER=68
2022-03-16 20:00:25:551 grammar LogManager.java:25 import CORIZQ=69
2022-03-16 20:00:25:551 grammar LogManager.java:25 import CORDER=70
2022-03-16 20:00:25:551 grammar LogManager.java:25 import WHITESPACE=71
2022-03-16 20:00:25:551 grammar LogManager.java:25 import COMMENT=72
2022-03-16 20:00:25:551 grammar LogManager.java:25 import LINE_COMMENT=73
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'i64'=1
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'f64'=2
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'bool'=3
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'char'=4
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'String'=5
2022-03-16 20:00:25:551 grammar LogManager.java:25 import '&str'=6
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'usize'=7
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'vec'=8
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'struct'=9
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'pow'=10
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'println!'=11
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'let'=12
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'mut'=13
2022-03-16 20:00:25:551 grammar LogManager.java:25 import 'fn'=14
2022-03-16 20:00:25:551 grammar LogManager.java:25 import '->'=15
2022-03-16 20:00:25:552 grammar LogManager.java:25 import '=>'=16
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'abs'=17
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'sqrt'=18
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'to_string'=19
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'clone'=20
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'new'=21
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'len'=22
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'push'=23
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'remove'=24
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'contains'=25
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'insert'=26
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'capacity'=27
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'with_capacity'=28
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'main'=29
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'if'=30
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'else'=31
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'match'=32
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'loop'=33
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'while'=34
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'for'=35
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'in'=36
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'break'=37
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'continue'=38
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'return'=39
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'mod'=40
2022-03-16 20:00:25:552 grammar LogManager.java:25 import 'pub'=41
2022-03-16 20:00:25:552 grammar LogManager.java:25 import '.'=45
2022-03-16 20:00:25:552 grammar LogManager.java:25 import '::'=46
2022-03-16 20:00:25:552 grammar LogManager.java:25 import ':'=47
2022-03-16 20:00:25:552 grammar LogManager.java:25 import ';'=48
2022-03-16 20:00:25:552 grammar LogManager.java:25 import ','=49
2022-03-16 20:00:25:552 grammar LogManager.java:25 import '!='=50
2022-03-16 20:00:25:552 grammar LogManager.java:25 import '=='=51
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '!'=52
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '||'=53
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '&&'=54
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '='=55
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '>='=56
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '<='=57
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '>'=58
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '<'=59
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '*'=60
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '/'=61
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '+'=62
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '-'=63
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '%'=64
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '('=65
2022-03-16 20:00:25:553 grammar LogManager.java:25 import ')'=66
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '{'=67
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '}'=68
2022-03-16 20:00:25:553 grammar LogManager.java:25 import '['=69
2022-03-16 20:00:25:553 grammar LogManager.java:25 import ']'=70
2022-03-16 20:00:25:554 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR=8, STRUCT=9, POW=10, PRINT=11, LET=12, MUT=13, FUNC=14, ARROW1=15, ARROW2=16, ABS=17, SQRT=18, TOSTR=19, CLONE=20, NEW=21, LEN=22, PUSH=23, REMOVE=24, CONTAINS=25, INSERT=26, CAPACITY=27, WCAPACITY=28, MAIN=29, IF=30, ELSE=31, MATCH=32, LOOP=33, WHILE=34, FOR=35, IN=36, BREAK=37, CONTINUE=38, RETURN=39, MODULE=40, PUB=41, NUMBER=42, STRING=43, ID=44, PUNTO=45, C_PTS=46, D_PTS=47, PYC=48, COMA=49, DIFERENTE=50, IG_IG=51, NOT=52, OR=53, AND=54, IGUAL=55, MAYORIGUAL=56, MENORIGUAL=57, MAYOR=58, MENOR=59, MUL=60, DIV=61, ADD=62, SUB=63, MOD=64, PARIZQ=65, PARDER=66, LLAVEIZQ=67, LLAVEDER=68, CORIZQ=69, CORDER=70, WHITESPACE=71, COMMENT=72, LINE_COMMENT=73, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'struct'=9, 'pow'=10, 'println!'=11, 'let'=12, 'mut'=13, 'fn'=14, '->'=15, '=>'=16, 'abs'=17, 'sqrt'=18, 'to_string'=19, 'clone'=20, 'new'=21, 'len'=22, 'push'=23, 'remove'=24, 'contains'=25, 'insert'=26, 'capacity'=27, 'with_capacity'=28, 'main'=29, 'if'=30, 'else'=31, 'match'=32, 'loop'=33, 'while'=34, 'for'=35, 'in'=36, 'break'=37, 'continue'=38, 'return'=39, 'mod'=40, 'pub'=41, '.'=45, '::'=46, ':'=47, ';'=48, ','=49, '!='=50, '=='=51, '!'=52, '||'=53, '&&'=54, '='=55, '>='=56, '<='=57, '>'=58, '<'=59, '*'=60, '/'=61, '+'=62, '-'=63, '%'=64, '('=65, ')'=66, '{'=67, '}'=68, '['=69, ']'=70}
2022-03-16 20:00:25:554 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR=8, STRUCT=9, POW=10, PRINT=11, LET=12, MUT=13, FUNC=14, ARROW1=15, ARROW2=16, ABS=17, SQRT=18, TOSTR=19, CLONE=20, NEW=21, LEN=22, PUSH=23, REMOVE=24, CONTAINS=25, INSERT=26, CAPACITY=27, WCAPACITY=28, MAIN=29, IF=30, ELSE=31, MATCH=32, LOOP=33, WHILE=34, FOR=35, IN=36, BREAK=37, CONTINUE=38, RETURN=39, MODULE=40, PUB=41, NUMBER=42, STRING=43, ID=44, PUNTO=45, C_PTS=46, D_PTS=47, PYC=48, COMA=49, DIFERENTE=50, IG_IG=51, NOT=52, OR=53, AND=54, IGUAL=55, MAYORIGUAL=56, MENORIGUAL=57, MAYOR=58, MENOR=59, MUL=60, DIV=61, ADD=62, SUB=63, MOD=64, PARIZQ=65, PARDER=66, LLAVEIZQ=67, LLAVEDER=68, CORIZQ=69, CORDER=70, WHITESPACE=71, COMMENT=72, LINE_COMMENT=73}
2022-03-16 20:00:25:554 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'struct'=9, 'pow'=10, 'println!'=11, 'let'=12, 'mut'=13, 'fn'=14, '->'=15, '=>'=16, 'abs'=17, 'sqrt'=18, 'to_string'=19, 'clone'=20, 'new'=21, 'len'=22, 'push'=23, 'remove'=24, 'contains'=25, 'insert'=26, 'capacity'=27, 'with_capacity'=28, 'main'=29, 'if'=30, 'else'=31, 'match'=32, 'loop'=33, 'while'=34, 'for'=35, 'in'=36, 'break'=37, 'continue'=38, 'return'=39, 'mod'=40, 'pub'=41, '.'=45, '::'=46, ':'=47, ';'=48, ','=49, '!='=50, '=='=51, '!'=52, '||'=53, '&&'=54, '='=55, '>='=56, '<='=57, '>'=58, '<'=59, '*'=60, '/'=61, '+'=62, '-'=63, '%'=64, '('=65, ')'=66, '{'=67, '}'=68, '['=69, ']'=70}
2022-03-16 20:00:25:761 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-03-16 20:00:25:761 LL1 LogManager.java:25 look=[{12, 14, 40}, 14]
2022-03-16 20:00:25:761 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:761 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[{12, 14, 40}, <EOF>]
2022-03-16 20:00:25:762 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:762 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[12, 14, 40]
2022-03-16 20:00:25:762 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:762 LL1 LogManager.java:25 
DECISION 3 in rule instructions
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[{11..12, 30, 44}, 68]
2022-03-16 20:00:25:762 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:762 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[11, 12, 44, 30]
2022-03-16 20:00:25:762 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:762 LL1 LogManager.java:25 
DECISION 5 in rule condIf
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[30, 30]
2022-03-16 20:00:25:762 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:762 LL1 LogManager.java:25 
DECISION 6 in rule block
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[{11..12, 30, 44}, {30, 42..44, 65, 69}]
2022-03-16 20:00:25:762 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:762 LL1 LogManager.java:25 
DECISION 7 in rule block
2022-03-16 20:00:25:762 LL1 LogManager.java:25 look=[null, null]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 8 in rule block
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[null, 68]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 9 in rule declaration
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[12, 12, 12, 12, 12, 12]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 10 in rule arrayType
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[69, 69]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 11 in rule types
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 8, 9]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 12 in rule listParams
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[null, {66, 70}]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 13 in rule expression
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[{42..44, 65, 69}, 30]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 14 in rule expr_arit
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[69, 65, {42..44}]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 15 in rule expr_arit
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[null, null, null]
2022-03-16 20:00:25:763 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:763 LL1 LogManager.java:25 
DECISION 16 in rule expr_arit
2022-03-16 20:00:25:763 LL1 LogManager.java:25 look=[null, null]
2022-03-16 20:00:25:764 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:764 LL1 LogManager.java:25 
DECISION 17 in rule primitive
2022-03-16 20:00:25:764 LL1 LogManager.java:25 look=[42, 43, 44]
2022-03-16 20:00:25:764 LL1 LogManager.java:25 LL(1)? true
2022-03-16 20:00:25:764 LL1 LogManager.java:25 
DECISION 18 in rule listArray
2022-03-16 20:00:25:764 LL1 LogManager.java:25 look=[null, null]
2022-03-16 20:00:25:764 LL1 LogManager.java:25 LL(1)? false
2022-03-16 20:00:25:781 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-16 20:00:25:834 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-03-16 20:00:25:834 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-03-16 20:00:25:834 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-03-16 20:00:25:843 action-translator LogManager.java:25 translate $hi = "declaration"
2022-03-16 20:00:25:843 action-translator LogManager.java:25 attr [@-1,1:2='hi',<0>,29:19]
2022-03-16 20:00:25:843 action-translator LogManager.java:25 translate $hi = "function"
2022-03-16 20:00:25:843 action-translator LogManager.java:25 attr [@-1,1:2='hi',<0>,30:12]
2022-03-16 20:00:25:843 action-translator LogManager.java:25 translate $hi = "module"
2022-03-16 20:00:25:843 action-translator LogManager.java:25 attr [@-1,1:2='hi',<0>,31:10]
2022-03-16 20:00:25:845 action-translator LogManager.java:25 translate  $mainInst = $instructions.insts 
2022-03-16 20:00:25:845 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,35:59]
2022-03-16 20:00:25:845 action-translator LogManager.java:25 qattr [@-1,14:25='instructions',<0>,35:71].[@-1,27:31='insts',<0>,35:84]
2022-03-16 20:00:25:845 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-03-16 20:00:25:845 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,40:5]
2022-03-16 20:00:25:846 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-03-16 20:00:25:846 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,46:13]
2022-03-16 20:00:25:846 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-03-16 20:00:25:846 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:19]
2022-03-16 20:00:25:846 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,52:27].[@-1,21:22='pr',<0>,52:38]
2022-03-16 20:00:25:847 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-03-16 20:00:25:847 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:20]
2022-03-16 20:00:25:847 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,53:28].[@-1,22:24='dec',<0>,53:40]
2022-03-16 20:00:25:847 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2022-03-16 20:00:25:847 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:19]
2022-03-16 20:00:25:847 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,54:27].[@-1,21:23='ass',<0>,54:38]
2022-03-16 20:00:25:847 action-translator LogManager.java:25 translate  $inst = $condIf.ifCond
2022-03-16 20:00:25:847 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,55:11]
2022-03-16 20:00:25:847 action-translator LogManager.java:25 qattr [@-1,10:15='condIf',<0>,55:19].[@-1,17:22='ifCond',<0>,55:26]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 translate  $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk) 
2022-03-16 20:00:25:848 action-translator LogManager.java:25 attr [@-1,2:7='ifCond',<0>,59:42]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,59:71].[@-1,34:37='line',<0>,59:74]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,59:81].[@-1,44:46='pos',<0>,59:84]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 qattr [@-1,50:59='expression',<0>,59:90].[@-1,61:61='p',<0>,59:101]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,59:105].[@-1,71:73='blk',<0>,59:111]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 translate 
    $blk = arrayList.New()
  
2022-03-16 20:00:25:848 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,65:5]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 translate 
2022-03-16 20:00:25:848 action-translator LogManager.java:25 translate  $blk.Add($instruction.inst) 
2022-03-16 20:00:25:848 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,2:43]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 qattr [@-1,11:21='instruction',<0>,2:52].[@-1,23:26='inst',<0>,2:64]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 translate  $blk.Add($expression.p) 
2022-03-16 20:00:25:848 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,3:39]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 qattr [@-1,11:20='expression',<0>,3:48].[@-1,22:22='p',<0>,3:59]
2022-03-16 20:00:25:848 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-16 20:00:25:851 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      
2022-03-16 20:00:25:851 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,7:39].[@-1,48:50='blk',<0>,7:46]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 qattr [@-1,57:67='instruction',<0>,7:55].[@-1,69:72='inst',<0>,7:67]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 attr [@-1,115:117='blk',<0>,8:39]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 qattr [@-1,122:127='bloque',<0>,8:46].[@-1,129:131='blk',<0>,8:53]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-16 20:00:25:851 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     
2022-03-16 20:00:25:851 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,11:39].[@-1,48:50='blk',<0>,11:46]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,11:55].[@-1,68:68='p',<0>,11:66]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 attr [@-1,111:113='blk',<0>,12:39]
2022-03-16 20:00:25:851 action-translator LogManager.java:25 qattr [@-1,118:123='bloque',<0>,12:46].[@-1,125:127='blk',<0>,12:53]
2022-03-16 20:00:25:852 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-16 20:00:25:852 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-16 20:00:25:852 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-03-16 20:00:25:852 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,81:35]
2022-03-16 20:00:25:852 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,81:63].[@-1,36:39='line',<0>,81:69]
2022-03-16 20:00:25:852 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,81:75].[@-1,48:50='pos',<0>,81:81]
2022-03-16 20:00:25:852 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,81:86].[@-1,64:64='l',<0>,81:97]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,85:46]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,85:81].[@-1,41:44='line',<0>,85:85]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,85:92].[@-1,52:54='pos',<0>,85:96]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,85:102].[@-1,61:64='text',<0>,85:105]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,85:112].[@-1,74:75='ty',<0>,85:118]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,85:123].[@-1,90:90='p',<0>,85:134]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,86:46]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,86:81].[@-1,41:44='line',<0>,86:85]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,86:92].[@-1,52:54='pos',<0>,86:96]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,86:102].[@-1,61:64='text',<0>,86:105]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,86:134].[@-1,101:101='p',<0>,86:145]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,87:46]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,87:81].[@-1,41:44='line',<0>,87:85]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,87:92].[@-1,52:54='pos',<0>,87:96]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,87:102].[@-1,61:64='text',<0>,87:105]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,87:112].[@-1,74:75='ty',<0>,87:118]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,87:123].[@-1,90:90='p',<0>,87:134]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,88:46]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,88:81].[@-1,41:44='line',<0>,88:85]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,88:92].[@-1,52:54='pos',<0>,88:96]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,88:102].[@-1,61:64='text',<0>,88:105]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,88:134].[@-1,101:101='p',<0>,88:145]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,89:48]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,89:88].[@-1,46:49='line',<0>,89:92]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,89:99].[@-1,57:59='pos',<0>,89:103]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,89:109].[@-1,66:69='text',<0>,89:112]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,89:119].[@-1,83:83='t',<0>,89:129]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,89:133].[@-1,98:98='p',<0>,89:144]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,90:46]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,90:86].[@-1,46:49='line',<0>,90:90]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,90:97].[@-1,57:59='pos',<0>,90:101]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,90:107].[@-1,66:69='text',<0>,90:110]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,90:117].[@-1,83:83='t',<0>,90:127]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,90:131].[@-1,98:98='p',<0>,90:142]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,94:24]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,94:58].[@-1,39:42='line',<0>,94:61]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,94:68].[@-1,49:51='pos',<0>,94:71]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,94:77].[@-1,58:61='text',<0>,94:80]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,94:87].[@-1,76:76='p',<0>,94:98]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate 
                                            newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                           $arrayType.t.Add(newType)
                                           $t = $arrayType.t
                                            
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,102:111='expression',<0>,99:100].[@-1,113:113='p',<0>,99:111]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,161:169='arrayType',<0>,100:44].[@-1,171:171='t',<0>,100:54]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,231:231='t',<0>,101:44]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,236:244='arrayType',<0>,101:49].[@-1,246:246='t',<0>,101:59]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate 
                                        $t = arrayList.New()
                                        newType := environment.NewArrayType($types.ty, $expression.p)
                                        $t.Add(newType)
                                     
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,43:43='t',<0>,104:41]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,141:145='types',<0>,105:77].[@-1,147:148='ty',<0>,105:83]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 qattr [@-1,152:161='expression',<0>,105:88].[@-1,163:163='p',<0>,105:99]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,208:208='t',<0>,106:41]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,119:8]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,120:10]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,121:9]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-03-16 20:00:25:853 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,122:9]
2022-03-16 20:00:25:853 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-03-16 20:00:25:861 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,123:9]
2022-03-16 20:00:25:861 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-03-16 20:00:25:861 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,124:11]
2022-03-16 20:00:25:861 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-03-16 20:00:25:861 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,125:11]
2022-03-16 20:00:25:861 action-translator LogManager.java:25 translate 
2022-03-16 20:00:25:861 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-03-16 20:00:25:861 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-03-16 20:00:25:861 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-03-16 20:00:25:861 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-03-16 20:00:25:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 20:00:25:862 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-03-16 20:00:25:862 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-03-16 20:00:25:862 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-03-16 20:00:25:862 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-03-16 20:00:25:862 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-03-16 20:00:25:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 20:00:25:862 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-03-16 20:00:25:863 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,140:14]
2022-03-16 20:00:25:863 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,140:19].[@-1,17:17='p',<0>,140:29]
2022-03-16 20:00:25:863 action-translator LogManager.java:25 translate  $p = $condIf.ifCond 
2022-03-16 20:00:25:863 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,141:11]
2022-03-16 20:00:25:863 action-translator LogManager.java:25 qattr [@-1,7:12='condIf',<0>,141:16].[@-1,14:19='ifCond',<0>,141:23]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate 
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate  $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2022-03-16 20:00:25:864 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:88]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,2:114].[@-1,35:38='line',<0>,2:121]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,2:128].[@-1,49:51='pos',<0>,2:135]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,2:141].[@-1,66:66='l',<0>,2:152]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-03-16 20:00:25:864 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,3:85]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,3:90].[@-1,18:18='p',<0>,3:101]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-03-16 20:00:25:864 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:38]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,4:43].[@-1,17:17='p',<0>,4:53]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-16 20:00:25:864 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:139]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,7:169].[@-1,36:40='start',<0>,7:174]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,7:191].[@-1,58:62='start',<0>,7:196]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,7:215].[@-1,82:82='p',<0>,7:220]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,7:223].[@-1,88:91='text',<0>,7:226]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,7:232].[@-1,99:99='p',<0>,7:237]
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-16 20:00:25:864 action-translator LogManager.java:25 translate $p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)
2022-03-16 20:00:25:864 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:149]
2022-03-16 20:00:25:867 action-translator LogManager.java:25 qattr [@-1,35:38='opIz',<0>,8:183].[@-1,40:40='p',<0>,8:188]
2022-03-16 20:00:25:867 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,8:191].[@-1,46:49='text',<0>,8:194]
2022-03-16 20:00:25:867 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,8:200].[@-1,57:57='p',<0>,8:205]
2022-03-16 20:00:25:867 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-16 20:00:25:868 action-translator LogManager.java:25 translate $p = expressions.NewOperation(0,0,$opIz.p,$op.text,$opDe.p)
2022-03-16 20:00:25:868 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,9:207]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,35:38='opIz',<0>,9:241].[@-1,40:40='p',<0>,9:246]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,9:249].[@-1,46:49='text',<0>,9:252]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,9:258].[@-1,57:57='p',<0>,9:263]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-16 20:00:25:868 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-16 20:00:25:868 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-16 20:00:25:868 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive(0,0,num,environment.INTEGER)
            }
        
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,155:34].[@-1,43:46='text',<0>,155:41]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,156:47].[@-1,110:113='text',<0>,156:54]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,160:17]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,345:350='NUMBER',<0>,162:41].[@-1,352:355='text',<0>,162:48]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 attr [@-1,464:464='p',<0>,166:17]
2022-03-16 20:00:25:868 action-translator LogManager.java:25 translate 
                str := $STRING.text
                $p = expressions.NewPrimitive(0,0,str[1:len(str)-1],environment.STRING)
            
2022-03-16 20:00:25:868 action-translator LogManager.java:25 qattr [@-1,26:31='STRING',<0>,170:24].[@-1,33:36='text',<0>,170:31]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 attr [@-1,56:56='p',<0>,171:17]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-16 20:00:25:869 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,173:19]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,173:24].[@-1,12:12='p',<0>,173:29]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 translate 
2022-03-16 20:00:25:869 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2022-03-16 20:00:25:869 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 20:00:25:869 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) 
2022-03-16 20:00:25:869 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:133]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:165].[@-1,39:43='start',<0>,5:170]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:188].[@-1,62:66='start',<0>,5:193]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:213].[@-1,87:87='p',<0>,5:218]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,5:222].[@-1,102:102='p',<0>,5:233]
2022-03-16 20:00:25:869 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 20:00:26:119 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-16 20:00:26:119 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-16 20:00:26:271 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-16 20:00:26:271 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

