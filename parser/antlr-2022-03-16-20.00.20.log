2022-03-16 20:00:18:517 grammar LogManager.java:25 before: (LEXER_GRAMMAR RustLexer (RULES (RULE INT (BLOCK (ALT 'i64'))) (RULE FLOAT (BLOCK (ALT 'f64'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE STR1 (BLOCK (ALT 'String'))) (RULE STR2 (BLOCK (ALT '&str'))) (RULE USIZE (BLOCK (ALT 'usize'))) (RULE VECTOR (BLOCK (ALT 'vec'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE POW (BLOCK (ALT 'pow'))) (RULE PRINT (BLOCK (ALT 'println!'))) (RULE LET (BLOCK (ALT 'let'))) (RULE MUT (BLOCK (ALT 'mut'))) (RULE FUNC (BLOCK (ALT 'fn'))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE ARROW2 (BLOCK (ALT '=>'))) (RULE ABS (BLOCK (ALT 'abs'))) (RULE SQRT (BLOCK (ALT 'sqrt'))) (RULE TOSTR (BLOCK (ALT 'to_string'))) (RULE CLONE (BLOCK (ALT 'clone'))) (RULE NEW (BLOCK (ALT 'new'))) (RULE LEN (BLOCK (ALT 'len'))) (RULE PUSH (BLOCK (ALT 'push'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE CONTAINS (BLOCK (ALT 'contains'))) (RULE INSERT (BLOCK (ALT 'insert'))) (RULE CAPACITY (BLOCK (ALT 'capacity'))) (RULE WCAPACITY (BLOCK (ALT 'with_capacity'))) (RULE MAIN (BLOCK (ALT 'main'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE MATCH (BLOCK (ALT 'match'))) (RULE LOOP (BLOCK (ALT 'loop'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE MODULE (BLOCK (ALT 'mod'))) (RULE PUB (BLOCK (ALT 'pub'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE C_PTS (BLOCK (ALT '::'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE PYC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2022-03-16 20:00:18:590 grammar LogManager.java:25 after: (LEXER_GRAMMAR RustLexer (RULES (RULE INT (BLOCK (ALT 'i64'))) (RULE FLOAT (BLOCK (ALT 'f64'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE STR1 (BLOCK (ALT 'String'))) (RULE STR2 (BLOCK (ALT '&str'))) (RULE USIZE (BLOCK (ALT 'usize'))) (RULE VECTOR (BLOCK (ALT 'vec'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE POW (BLOCK (ALT 'pow'))) (RULE PRINT (BLOCK (ALT 'println!'))) (RULE LET (BLOCK (ALT 'let'))) (RULE MUT (BLOCK (ALT 'mut'))) (RULE FUNC (BLOCK (ALT 'fn'))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE ARROW2 (BLOCK (ALT '=>'))) (RULE ABS (BLOCK (ALT 'abs'))) (RULE SQRT (BLOCK (ALT 'sqrt'))) (RULE TOSTR (BLOCK (ALT 'to_string'))) (RULE CLONE (BLOCK (ALT 'clone'))) (RULE NEW (BLOCK (ALT 'new'))) (RULE LEN (BLOCK (ALT 'len'))) (RULE PUSH (BLOCK (ALT 'push'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE CONTAINS (BLOCK (ALT 'contains'))) (RULE INSERT (BLOCK (ALT 'insert'))) (RULE CAPACITY (BLOCK (ALT 'capacity'))) (RULE WCAPACITY (BLOCK (ALT 'with_capacity'))) (RULE MAIN (BLOCK (ALT 'main'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE MATCH (BLOCK (ALT 'match'))) (RULE LOOP (BLOCK (ALT 'loop'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE MODULE (BLOCK (ALT 'mod'))) (RULE PUB (BLOCK (ALT 'pub'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE C_PTS (BLOCK (ALT '::'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE PYC (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
